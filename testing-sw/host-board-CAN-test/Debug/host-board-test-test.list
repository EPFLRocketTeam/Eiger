
host-board-test-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059cc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005b90  08005b90  00015b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005cd8  08005cd8  00015cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005ce0  08005ce0  00015ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08005ce8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001050  20000010  08005cf8  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001060  08005cf8  00021060  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cbfe  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004bdb  00000000  00000000  0004cc3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00013952  00000000  00000000  00051819  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001320  00000000  00000000  00065170  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001c48  00000000  00000000  00066490  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ba29  00000000  00000000  000680d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006f6d  00000000  00000000  00073b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007aa6e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003d94  00000000  00000000  0007aaec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005b78 	.word	0x08005b78

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08005b78 	.word	0x08005b78

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 fbe8 	bl	8000d00 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000540:	f000 fbaa 	bl	8000c98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	2000000c 	.word	0x2000000c
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 fb7b 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f004 ff98 	bl	80054b8 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000260 	.word	0x20000260
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000260 	.word	0x20000260

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff6 	bl	80005a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005bc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	bf1c      	itt	ne
 80005c0:	4b05      	ldrne	r3, [pc, #20]	; (80005d8 <HAL_Delay+0x24>)
 80005c2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005c6:	bf18      	it	ne
 80005c8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	f7ff ffed 	bl	80005a8 <HAL_GetTick>
 80005ce:	1b40      	subs	r0, r0, r5
 80005d0:	4284      	cmp	r4, r0
 80005d2:	d8fa      	bhi.n	80005ca <HAL_Delay+0x16>
  {
  }
}
 80005d4:	bd38      	pop	{r3, r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005dc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005de:	4604      	mov	r4, r0
 80005e0:	2800      	cmp	r0, #0
 80005e2:	f000 8099 	beq.w	8000718 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80005e8:	b923      	cbnz	r3, 80005f4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ea:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005f0:	f004 ffaa 	bl	8005548 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005f6:	06db      	lsls	r3, r3, #27
 80005f8:	f100 808c 	bmi.w	8000714 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000602:	f023 0302 	bic.w	r3, r3, #2
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800060c:	4b43      	ldr	r3, [pc, #268]	; (800071c <HAL_ADC_Init+0x140>)
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000614:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	6861      	ldr	r1, [r4, #4]
 800061a:	430a      	orrs	r2, r1
 800061c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800061e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000620:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000632:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000634:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000636:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800063a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	430a      	orrs	r2, r1
 8000640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000642:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000644:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800064a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	430a      	orrs	r2, r1
 8000650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000652:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_ADC_Init+0x144>)
 8000654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000656:	428a      	cmp	r2, r1
 8000658:	d050      	beq.n	80006fc <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800065a:	6899      	ldr	r1, [r3, #8]
 800065c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000660:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000662:	6899      	ldr	r1, [r3, #8]
 8000664:	430a      	orrs	r2, r1
 8000666:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000668:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800066a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800066c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000676:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000678:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800067a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800067c:	f022 0202 	bic.w	r2, r2, #2
 8000680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000688:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800068a:	6a22      	ldr	r2, [r4, #32]
 800068c:	2a00      	cmp	r2, #0
 800068e:	d03d      	beq.n	800070c <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000690:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000692:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000698:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006a0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	3901      	subs	r1, #1
 80006a6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006ae:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b8:	3901      	subs	r1, #1
 80006ba:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006c0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006d0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006d2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006d4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006dc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006de:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006e0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006e4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006e6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006ea:	f023 0303 	bic.w	r3, r3, #3
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006f4:	2300      	movs	r3, #0
 80006f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006fa:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800070a:	e7b4      	b.n	8000676 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000712:	e7ca      	b.n	80006aa <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000714:	2001      	movs	r0, #1
 8000716:	e7ed      	b.n	80006f4 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000718:	2001      	movs	r0, #1
}
 800071a:	bd10      	pop	{r4, pc}
 800071c:	40012300 	.word	0x40012300
 8000720:	0f000001 	.word	0x0f000001

08000724 <HAL_ADC_ConfigChannel>:
{
 8000724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000726:	2300      	movs	r3, #0
 8000728:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800072a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800072e:	2b01      	cmp	r3, #1
 8000730:	d06a      	beq.n	8000808 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000732:	680d      	ldr	r5, [r1, #0]
 8000734:	6804      	ldr	r4, [r0, #0]
 8000736:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000738:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800073a:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800073c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000740:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000742:	d92a      	bls.n	800079a <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000744:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000748:	68e7      	ldr	r7, [r4, #12]
 800074a:	3b1e      	subs	r3, #30
 800074c:	f04f 0e07 	mov.w	lr, #7
 8000750:	fa0e fe03 	lsl.w	lr, lr, r3
 8000754:	ea27 070e 	bic.w	r7, r7, lr
 8000758:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800075a:	68e7      	ldr	r7, [r4, #12]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	433b      	orrs	r3, r7
 8000762:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000764:	684a      	ldr	r2, [r1, #4]
 8000766:	2a06      	cmp	r2, #6
 8000768:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800076c:	d825      	bhi.n	80007ba <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800076e:	4413      	add	r3, r2
 8000770:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000772:	1f59      	subs	r1, r3, #5
 8000774:	231f      	movs	r3, #31
 8000776:	408b      	lsls	r3, r1
 8000778:	ea27 0303 	bic.w	r3, r7, r3
 800077c:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800077e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000780:	fa06 f101 	lsl.w	r1, r6, r1
 8000784:	4311      	orrs	r1, r2
 8000786:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <HAL_ADC_ConfigChannel+0x11c>)
 800078a:	429c      	cmp	r4, r3
 800078c:	d034      	beq.n	80007f8 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800078e:	2300      	movs	r3, #0
 8000790:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000794:	4618      	mov	r0, r3
}
 8000796:	b003      	add	sp, #12
 8000798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800079a:	6927      	ldr	r7, [r4, #16]
 800079c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80007a0:	f04f 0e07 	mov.w	lr, #7
 80007a4:	fa0e fe03 	lsl.w	lr, lr, r3
 80007a8:	ea27 070e 	bic.w	r7, r7, lr
 80007ac:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007ae:	6927      	ldr	r7, [r4, #16]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	433b      	orrs	r3, r7
 80007b6:	6123      	str	r3, [r4, #16]
 80007b8:	e7d4      	b.n	8000764 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80007ba:	2a0c      	cmp	r2, #12
 80007bc:	d80e      	bhi.n	80007dc <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007be:	4413      	add	r3, r2
 80007c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80007c2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80007c6:	231f      	movs	r3, #31
 80007c8:	4093      	lsls	r3, r2
 80007ca:	ea21 0303 	bic.w	r3, r1, r3
 80007ce:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007d2:	fa06 f202 	lsl.w	r2, r6, r2
 80007d6:	431a      	orrs	r2, r3
 80007d8:	6322      	str	r2, [r4, #48]	; 0x30
 80007da:	e7d5      	b.n	8000788 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007dc:	4413      	add	r3, r2
 80007de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007e0:	3b41      	subs	r3, #65	; 0x41
 80007e2:	221f      	movs	r2, #31
 80007e4:	409a      	lsls	r2, r3
 80007e6:	ea21 0202 	bic.w	r2, r1, r2
 80007ea:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007ee:	fa06 f103 	lsl.w	r1, r6, r3
 80007f2:	4311      	orrs	r1, r2
 80007f4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007f6:	e7c7      	b.n	8000788 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007f8:	2d12      	cmp	r5, #18
 80007fa:	d107      	bne.n	800080c <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <HAL_ADC_ConfigChannel+0x120>)
 80007fe:	6853      	ldr	r3, [r2, #4]
 8000800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000804:	6053      	str	r3, [r2, #4]
 8000806:	e7c2      	b.n	800078e <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000808:	2002      	movs	r0, #2
 800080a:	e7c4      	b.n	8000796 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_ADC_ConfigChannel+0x124>)
 800080e:	429d      	cmp	r5, r3
 8000810:	d001      	beq.n	8000816 <HAL_ADC_ConfigChannel+0xf2>
 8000812:	2d11      	cmp	r5, #17
 8000814:	d1bb      	bne.n	800078e <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000816:	490b      	ldr	r1, [pc, #44]	; (8000844 <HAL_ADC_ConfigChannel+0x120>)
 8000818:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800081a:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800081c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000820:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000822:	d1b4      	bne.n	800078e <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_ADC_ConfigChannel+0x128>)
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_ADC_ConfigChannel+0x12c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	fbb3 f2f2 	udiv	r2, r3, r2
 800082e:	230a      	movs	r3, #10
 8000830:	4353      	muls	r3, r2
        counter--;
 8000832:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000834:	9b01      	ldr	r3, [sp, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0a9      	beq.n	800078e <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800083a:	9b01      	ldr	r3, [sp, #4]
 800083c:	3b01      	subs	r3, #1
 800083e:	e7f8      	b.n	8000832 <HAL_ADC_ConfigChannel+0x10e>
 8000840:	40012000 	.word	0x40012000
 8000844:	40012300 	.word	0x40012300
 8000848:	10000012 	.word	0x10000012
 800084c:	2000000c 	.word	0x2000000c
 8000850:	000f4240 	.word	0x000f4240

08000854 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000854:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000856:	4604      	mov	r4, r0
 8000858:	2800      	cmp	r0, #0
 800085a:	d06e      	beq.n	800093a <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800085c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000860:	b90b      	cbnz	r3, 8000866 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000862:	f004 febf 	bl	80055e4 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000866:	6822      	ldr	r2, [r4, #0]
 8000868:	6813      	ldr	r3, [r2, #0]
 800086a:	f023 0302 	bic.w	r3, r3, #2
 800086e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000870:	f7ff fe9a 	bl	80005a8 <HAL_GetTick>
 8000874:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	0791      	lsls	r1, r2, #30
 800087c:	d451      	bmi.n	8000922 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f042 0201 	orr.w	r2, r2, #1
 8000884:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000886:	f7ff fe8f 	bl	80005a8 <HAL_GetTick>
 800088a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	07d2      	lsls	r2, r2, #31
 8000892:	d554      	bpl.n	800093e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000894:	7e22      	ldrb	r2, [r4, #24]
 8000896:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	bf0c      	ite	eq
 800089c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008a0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008a6:	7e62      	ldrb	r2, [r4, #25]
 80008a8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	bf0c      	ite	eq
 80008ae:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008b2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80008b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008b8:	7ea2      	ldrb	r2, [r4, #26]
 80008ba:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	bf0c      	ite	eq
 80008c0:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c4:	f022 0220 	bicne.w	r2, r2, #32
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ca:	7ee2      	ldrb	r2, [r4, #27]
 80008cc:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	bf0c      	ite	eq
 80008d2:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d6:	f042 0210 	orrne.w	r2, r2, #16
 80008da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008dc:	7f22      	ldrb	r2, [r4, #28]
 80008de:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	bf0c      	ite	eq
 80008e4:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e8:	f022 0208 	bicne.w	r2, r2, #8
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008ee:	7f62      	ldrb	r2, [r4, #29]
 80008f0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	bf0c      	ite	eq
 80008f6:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008fa:	f022 0204 	bicne.w	r2, r2, #4
 80008fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000900:	68e1      	ldr	r1, [r4, #12]
 8000902:	68a2      	ldr	r2, [r4, #8]
 8000904:	430a      	orrs	r2, r1
 8000906:	6921      	ldr	r1, [r4, #16]
 8000908:	430a      	orrs	r2, r1
 800090a:	6961      	ldr	r1, [r4, #20]
 800090c:	430a      	orrs	r2, r1
 800090e:	6861      	ldr	r1, [r4, #4]
 8000910:	3901      	subs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000916:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000918:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800091a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800091c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000920:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000922:	f7ff fe41 	bl	80005a8 <HAL_GetTick>
 8000926:	1b40      	subs	r0, r0, r5
 8000928:	280a      	cmp	r0, #10
 800092a:	d9a4      	bls.n	8000876 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800092c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800092e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000932:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000934:	2305      	movs	r3, #5
 8000936:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800093a:	2001      	movs	r0, #1
}
 800093c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800093e:	f7ff fe33 	bl	80005a8 <HAL_GetTick>
 8000942:	1b40      	subs	r0, r0, r5
 8000944:	280a      	cmp	r0, #10
 8000946:	d9a1      	bls.n	800088c <HAL_CAN_Init+0x38>
 8000948:	e7f0      	b.n	800092c <HAL_CAN_Init+0xd8>
	...

0800094c <HAL_CAN_ConfigFilter>:
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800094c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000950:	2b01      	cmp	r3, #1
{
 8000952:	b530      	push	{r4, r5, lr}
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000954:	d003      	beq.n	800095e <HAL_CAN_ConfigFilter+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000956:	f890 3020 	ldrb.w	r3, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800095a:	2b02      	cmp	r3, #2
 800095c:	d177      	bne.n	8000a4e <HAL_CAN_ConfigFilter+0x102>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800095e:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <HAL_CAN_ConfigFilter+0x110>)
 8000960:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000964:	f042 0201 	orr.w	r2, r2, #1
 8000968:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800096c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000970:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000974:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000978:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800097c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800097e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000982:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 8000986:	6948      	ldr	r0, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000988:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 800098c:	2401      	movs	r4, #1
 800098e:	4084      	lsls	r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000990:	43e2      	mvns	r2, r4
 8000992:	4015      	ands	r5, r2
 8000994:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000998:	69cd      	ldr	r5, [r1, #28]
 800099a:	2d00      	cmp	r5, #0
 800099c:	d136      	bne.n	8000a0c <HAL_CAN_ConfigFilter+0xc0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800099e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80009a2:	4015      	ands	r5, r2
 80009a4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80009a8:	00c0      	lsls	r0, r0, #3

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009aa:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009ac:	888b      	ldrh	r3, [r1, #4]
 80009ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80009b2:	f500 40c8 	add.w	r0, r0, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009b6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ba:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009be:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009c0:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009c2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009c6:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009ca:	6988      	ldr	r0, [r1, #24]
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <HAL_CAN_ConfigFilter+0x110>)
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d135      	bne.n	8000a3e <HAL_CAN_ConfigFilter+0xf2>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009d2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80009d6:	4010      	ands	r0, r2
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009d8:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009dc:	6908      	ldr	r0, [r1, #16]
 80009de:	bb90      	cbnz	r0, 8000a46 <HAL_CAN_ConfigFilter+0xfa>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009e0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80009e4:	4002      	ands	r2, r0
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 80009ea:	6a0b      	ldr	r3, [r1, #32]
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <HAL_CAN_ConfigFilter+0x110>)
 80009ee:	2b01      	cmp	r3, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009f0:	bf02      	ittt	eq
 80009f2:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 80009f6:	4323      	orreq	r3, r4
 80009f8:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009fc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000a00:	f023 0301 	bic.w	r3, r3, #1
 8000a04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a08:	2000      	movs	r0, #0
 8000a0a:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a0c:	2d01      	cmp	r5, #1
 8000a0e:	d1dc      	bne.n	80009ca <HAL_CAN_ConfigFilter+0x7e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a10:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000a14:	4325      	orrs	r5, r4
 8000a16:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a1a:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a1c:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a1e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000a22:	00c3      	lsls	r3, r0, #3
 8000a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a28:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a2c:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a2e:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a32:	688d      	ldr	r5, [r1, #8]
 8000a34:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a38:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
 8000a3c:	e7c5      	b.n	80009ca <HAL_CAN_ConfigFilter+0x7e>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a3e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000a42:	4320      	orrs	r0, r4
 8000a44:	e7c8      	b.n	80009d8 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a4a:	4322      	orrs	r2, r4
 8000a4c:	e7cb      	b.n	80009e6 <HAL_CAN_ConfigFilter+0x9a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a54:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000a56:	2001      	movs	r0, #1
  }
}
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40006400 	.word	0x40006400

08000a60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a60:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a62:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000a66:	2b01      	cmp	r3, #1
{
 8000a68:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000a6a:	d11f      	bne.n	8000aac <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a6c:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a74:	6813      	ldr	r3, [r2, #0]
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a7c:	f7ff fd94 	bl	80005a8 <HAL_GetTick>
 8000a80:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	6858      	ldr	r0, [r3, #4]
 8000a86:	f010 0001 	ands.w	r0, r0, #1
 8000a8a:	d101      	bne.n	8000a90 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a8c:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a90:	f7ff fd8a 	bl	80005a8 <HAL_GetTick>
 8000a94:	1b40      	subs	r0, r0, r5
 8000a96:	280a      	cmp	r0, #10
 8000a98:	d9f3      	bls.n	8000a82 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
  }
}
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000aac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ab2:	6243      	str	r3, [r0, #36]	; 0x24
 8000ab4:	e7f8      	b.n	8000aa8 <HAL_CAN_Start+0x48>

08000ab6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000ab8:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000abc:	2c01      	cmp	r4, #1
 8000abe:	d003      	beq.n	8000ac8 <HAL_CAN_AddTxMessage+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000ac0:	f890 4020 	ldrb.w	r4, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000ac4:	2c02      	cmp	r4, #2
 8000ac6:	d141      	bne.n	8000b4c <HAL_CAN_AddTxMessage+0x96>
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000ac8:	6804      	ldr	r4, [r0, #0]
 8000aca:	68a5      	ldr	r5, [r4, #8]
 8000acc:	016f      	lsls	r7, r5, #5
 8000ace:	d405      	bmi.n	8000adc <HAL_CAN_AddTxMessage+0x26>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000ad0:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000ad2:	012e      	lsls	r6, r5, #4
 8000ad4:	d402      	bmi.n	8000adc <HAL_CAN_AddTxMessage+0x26>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 8000ad6:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000ad8:	00ed      	lsls	r5, r5, #3
 8000ada:	d531      	bpl.n	8000b40 <HAL_CAN_AddTxMessage+0x8a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000adc:	68a0      	ldr	r0, [r4, #8]

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 8000ade:	2501      	movs	r5, #1
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ae0:	f3c0 6001 	ubfx	r0, r0, #24, #2
      *pTxMailbox = 1U << transmitmailbox;
 8000ae4:	4085      	lsls	r5, r0
 8000ae6:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ae8:	688d      	ldr	r5, [r1, #8]
 8000aea:	68cf      	ldr	r7, [r1, #12]
 8000aec:	f100 0318 	add.w	r3, r0, #24
 8000af0:	bb0d      	cbnz	r5, 8000b36 <HAL_CAN_AddTxMessage+0x80>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000af2:	680d      	ldr	r5, [r1, #0]
 8000af4:	ea47 5545 	orr.w	r5, r7, r5, lsl #21
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	0100      	lsls	r0, r0, #4
 8000afc:	50e5      	str	r5, [r4, r3]
 8000afe:	1823      	adds	r3, r4, r0
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b00:	690d      	ldr	r5, [r1, #16]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b02:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b04:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b08:	2901      	cmp	r1, #1
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b0a:	bf02      	ittt	eq
 8000b0c:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000b10:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000b14:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b18:	4404      	add	r4, r0
 8000b1a:	6851      	ldr	r1, [r2, #4]
 8000b1c:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b26:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000b2a:	f042 0201 	orr.w	r2, r2, #1
 8000b2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8000b32:	2000      	movs	r0, #0
 8000b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b36:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 8000b38:	433d      	orrs	r5, r7
 8000b3a:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
 8000b3e:	e7db      	b.n	8000af8 <HAL_CAN_AddTxMessage+0x42>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b46:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000b48:	2001      	movs	r0, #1
  }
}
 8000b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b52:	e7f8      	b.n	8000b46 <HAL_CAN_AddTxMessage+0x90>

08000b54 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b56:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000b5a:	2c01      	cmp	r4, #1
 8000b5c:	d003      	beq.n	8000b66 <HAL_CAN_GetRxMessage+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000b5e:	f890 4020 	ldrb.w	r4, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b62:	2c02      	cmp	r4, #2
 8000b64:	d170      	bne.n	8000c48 <HAL_CAN_GetRxMessage+0xf4>
 8000b66:	6806      	ldr	r6, [r0, #0]
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b68:	b941      	cbnz	r1, 8000b7c <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 8000b6a:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8000b6c:	07a4      	lsls	r4, r4, #30
 8000b6e:	d109      	bne.n	8000b84 <HAL_CAN_GetRxMessage+0x30>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b76:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000b78:	2001      	movs	r0, #1
 8000b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8000b7c:	2901      	cmp	r1, #1
 8000b7e:	d101      	bne.n	8000b84 <HAL_CAN_GetRxMessage+0x30>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8000b80:	6934      	ldr	r4, [r6, #16]
 8000b82:	e7f3      	b.n	8000b6c <HAL_CAN_GetRxMessage+0x18>
 8000b84:	010c      	lsls	r4, r1, #4
 8000b86:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b88:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b8c:	f007 0704 	and.w	r7, r7, #4
 8000b90:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b92:	2f00      	cmp	r7, #0
 8000b94:	d14b      	bne.n	8000c2e <HAL_CAN_GetRxMessage+0xda>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b96:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b9a:	0d7f      	lsrs	r7, r7, #21
 8000b9c:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000b9e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000ba2:	f3c7 0740 	ubfx	r7, r7, #1, #1
 8000ba6:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ba8:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000bac:	f007 070f 	and.w	r7, r7, #15
 8000bb0:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bb2:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bb6:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8000bba:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bbc:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bc0:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bc2:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bc4:	6155      	str	r5, [r2, #20]
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8000bc6:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000bca:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8000bcc:	6802      	ldr	r2, [r0, #0]
 8000bce:	4422      	add	r2, r4
 8000bd0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000bd4:	0a12      	lsrs	r2, r2, #8
 8000bd6:	705a      	strb	r2, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8000bd8:	6802      	ldr	r2, [r0, #0]
 8000bda:	4422      	add	r2, r4
 8000bdc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000be0:	0c12      	lsrs	r2, r2, #16
 8000be2:	709a      	strb	r2, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8000be4:	6802      	ldr	r2, [r0, #0]
 8000be6:	4422      	add	r2, r4
 8000be8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000bec:	0e12      	lsrs	r2, r2, #24
 8000bee:	70da      	strb	r2, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8000bf0:	6802      	ldr	r2, [r0, #0]
 8000bf2:	4422      	add	r2, r4
 8000bf4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000bf8:	711a      	strb	r2, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8000bfa:	6802      	ldr	r2, [r0, #0]
 8000bfc:	4422      	add	r2, r4
 8000bfe:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000c02:	0a12      	lsrs	r2, r2, #8
 8000c04:	715a      	strb	r2, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8000c06:	6802      	ldr	r2, [r0, #0]
 8000c08:	4422      	add	r2, r4
 8000c0a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000c0e:	0c12      	lsrs	r2, r2, #16
 8000c10:	719a      	strb	r2, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8000c12:	6802      	ldr	r2, [r0, #0]
 8000c14:	4414      	add	r4, r2
 8000c16:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000c1a:	0e12      	lsrs	r2, r2, #24
 8000c1c:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c1e:	b959      	cbnz	r1, 8000c38 <HAL_CAN_GetRxMessage+0xe4>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000c20:	6802      	ldr	r2, [r0, #0]
 8000c22:	68d3      	ldr	r3, [r2, #12]
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8000c2a:	2000      	movs	r0, #0
  }
}
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c2e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000c32:	08ff      	lsrs	r7, r7, #3
 8000c34:	6057      	str	r7, [r2, #4]
 8000c36:	e7b2      	b.n	8000b9e <HAL_CAN_GetRxMessage+0x4a>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8000c38:	2901      	cmp	r1, #1
 8000c3a:	d1f6      	bne.n	8000c2a <HAL_CAN_GetRxMessage+0xd6>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000c3c:	6802      	ldr	r2, [r0, #0]
 8000c3e:	6913      	ldr	r3, [r2, #16]
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	6113      	str	r3, [r2, #16]
 8000c46:	e7f0      	b.n	8000c2a <HAL_CAN_GetRxMessage+0xd6>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4e:	e792      	b.n	8000b76 <HAL_CAN_GetRxMessage+0x22>

08000c50 <HAL_CAN_GetRxFifoFillLevel>:
  uint32_t filllevel = 0U;

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c50:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d003      	beq.n	8000c60 <HAL_CAN_GetRxFifoFillLevel+0x10>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000c58:	f890 3020 	ldrb.w	r3, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d107      	bne.n	8000c70 <HAL_CAN_GetRxFifoFillLevel+0x20>
 8000c60:	6803      	ldr	r3, [r0, #0]
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000c62:	b919      	cbnz	r1, 8000c6c <HAL_CAN_GetRxFifoFillLevel+0x1c>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000c64:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000c66:	f000 0003 	and.w	r0, r0, #3
 8000c6a:	4770      	bx	lr
 8000c6c:	6918      	ldr	r0, [r3, #16]
 8000c6e:	e7fa      	b.n	8000c66 <HAL_CAN_GetRxFifoFillLevel+0x16>
  uint32_t filllevel = 0U;
 8000c70:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8000c72:	4770      	bx	lr

08000c74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c76:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c78:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c7c:	041b      	lsls	r3, r3, #16
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c84:	0200      	lsls	r0, r0, #8
 8000c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c8a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c8e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c90:	60d3      	str	r3, [r2, #12]
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c98:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b530      	push	{r4, r5, lr}
 8000c9c:	68dc      	ldr	r4, [r3, #12]
 8000c9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	bf28      	it	cs
 8000cac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 0501 	mov.w	r5, #1
 8000cb4:	fa05 f303 	lsl.w	r3, r5, r3
 8000cb8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cbc:	bf8c      	ite	hi
 8000cbe:	3c03      	subhi	r4, #3
 8000cc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc2:	4019      	ands	r1, r3
 8000cc4:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc6:	fa05 f404 	lsl.w	r4, r5, r4
 8000cca:	3c01      	subs	r4, #1
 8000ccc:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000cce:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	ea42 0201 	orr.w	r2, r2, r1
 8000cd4:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	bfaf      	iteee	ge
 8000cda:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	f000 000f 	andlt.w	r0, r0, #15
 8000ce2:	4b06      	ldrlt	r3, [pc, #24]	; (8000cfc <HAL_NVIC_SetPriority+0x64>)
 8000ce4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	bfa5      	ittet	ge
 8000ce8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000cec:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000cf4:	bd30      	pop	{r4, r5, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00
 8000cfc:	e000ed14 	.word	0xe000ed14

08000d00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	3801      	subs	r0, #1
 8000d02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d06:	d20a      	bcs.n	8000d1e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d0c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0e:	21f0      	movs	r1, #240	; 0xf0
 8000d10:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d16:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d2e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d30:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d32:	bf0c      	ite	eq
 8000d34:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d38:	f022 0204 	bicne.w	r2, r2, #4
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	4770      	bx	lr
 8000d40:	e000e010 	.word	0xe000e010

08000d44 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d44:	4770      	bx	lr

08000d46 <HAL_SYSTICK_IRQHandler>:
{
 8000d46:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000d48:	f7ff fffc 	bl	8000d44 <HAL_SYSTICK_Callback>
 8000d4c:	bd08      	pop	{r3, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d54:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000efc <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d5c:	4a65      	ldr	r2, [pc, #404]	; (8000ef4 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d5e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000f00 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d62:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d64:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000d66:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000d6c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d70:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000d74:	45b6      	cmp	lr, r6
 8000d76:	f040 80aa 	bne.w	8000ece <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7a:	684c      	ldr	r4, [r1, #4]
 8000d7c:	f024 0710 	bic.w	r7, r4, #16
 8000d80:	2f02      	cmp	r7, #2
 8000d82:	d116      	bne.n	8000db2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000d84:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000d88:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000d90:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d94:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000d98:	f04f 0c0f 	mov.w	ip, #15
 8000d9c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000da0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da4:	690d      	ldr	r5, [r1, #16]
 8000da6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000daa:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000dae:	f8ca 5020 	str.w	r5, [sl, #32]
 8000db2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000db8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dbc:	fa05 f50a 	lsl.w	r5, r5, sl
 8000dc0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dca:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dce:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000dd6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dda:	d811      	bhi.n	8000e00 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ddc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dde:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de2:	68cf      	ldr	r7, [r1, #12]
 8000de4:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000de8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000dec:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dee:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000df4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000dfe:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000e00:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e02:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e04:	688f      	ldr	r7, [r1, #8]
 8000e06:	fa07 f70a 	lsl.w	r7, r7, sl
 8000e0a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000e0c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0e:	00e5      	lsls	r5, r4, #3
 8000e10:	d55d      	bpl.n	8000ece <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	f04f 0b00 	mov.w	fp, #0
 8000e16:	f8cd b00c 	str.w	fp, [sp, #12]
 8000e1a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e1e:	4d36      	ldr	r5, [pc, #216]	; (8000ef8 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e20:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000e24:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000e28:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000e2c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000e30:	9703      	str	r7, [sp, #12]
 8000e32:	9f03      	ldr	r7, [sp, #12]
 8000e34:	f023 0703 	bic.w	r7, r3, #3
 8000e38:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e3c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e40:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000e44:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e48:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000e4c:	f04f 0e0f 	mov.w	lr, #15
 8000e50:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e54:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e56:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5a:	d03f      	beq.n	8000edc <HAL_GPIO_Init+0x18c>
 8000e5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e60:	42a8      	cmp	r0, r5
 8000e62:	d03d      	beq.n	8000ee0 <HAL_GPIO_Init+0x190>
 8000e64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e68:	42a8      	cmp	r0, r5
 8000e6a:	d03b      	beq.n	8000ee4 <HAL_GPIO_Init+0x194>
 8000e6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e70:	42a8      	cmp	r0, r5
 8000e72:	d039      	beq.n	8000ee8 <HAL_GPIO_Init+0x198>
 8000e74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e78:	42a8      	cmp	r0, r5
 8000e7a:	d037      	beq.n	8000eec <HAL_GPIO_Init+0x19c>
 8000e7c:	4548      	cmp	r0, r9
 8000e7e:	d037      	beq.n	8000ef0 <HAL_GPIO_Init+0x1a0>
 8000e80:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000e84:	42a8      	cmp	r0, r5
 8000e86:	bf14      	ite	ne
 8000e88:	2507      	movne	r5, #7
 8000e8a:	2506      	moveq	r5, #6
 8000e8c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e90:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e94:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000e96:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e98:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e9a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	bf0c      	ite	eq
 8000ea0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ea2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000ea4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000ea6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ea8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000eac:	bf0c      	ite	eq
 8000eae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000eb0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000eb2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000eba:	bf0c      	ite	eq
 8000ebc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000ebe:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000ec0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000ec2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	bf54      	ite	pl
 8000ec8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000eca:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000ecc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ece:	3301      	adds	r3, #1
 8000ed0:	2b10      	cmp	r3, #16
 8000ed2:	f47f af48 	bne.w	8000d66 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ed6:	b005      	add	sp, #20
 8000ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000edc:	465d      	mov	r5, fp
 8000ede:	e7d5      	b.n	8000e8c <HAL_GPIO_Init+0x13c>
 8000ee0:	2501      	movs	r5, #1
 8000ee2:	e7d3      	b.n	8000e8c <HAL_GPIO_Init+0x13c>
 8000ee4:	2502      	movs	r5, #2
 8000ee6:	e7d1      	b.n	8000e8c <HAL_GPIO_Init+0x13c>
 8000ee8:	2503      	movs	r5, #3
 8000eea:	e7cf      	b.n	8000e8c <HAL_GPIO_Init+0x13c>
 8000eec:	2504      	movs	r5, #4
 8000eee:	e7cd      	b.n	8000e8c <HAL_GPIO_Init+0x13c>
 8000ef0:	2505      	movs	r5, #5
 8000ef2:	e7cb      	b.n	8000e8c <HAL_GPIO_Init+0x13c>
 8000ef4:	40013c00 	.word	0x40013c00
 8000ef8:	40020000 	.word	0x40020000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40021400 	.word	0x40021400

08000f04 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000f04:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000f06:	4604      	mov	r4, r0
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	d062      	beq.n	8000fd2 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000f0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f14:	b91b      	cbnz	r3, 8000f1e <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f16:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000f1a:	f004 fb97 	bl	800564c <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f1e:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000f20:	4e2d      	ldr	r6, [pc, #180]	; (8000fd8 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000f22:	4d2e      	ldr	r5, [pc, #184]	; (8000fdc <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f24:	2324      	movs	r3, #36	; 0x24
 8000f26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000f2a:	6813      	ldr	r3, [r2, #0]
 8000f2c:	f023 0301 	bic.w	r3, r3, #1
 8000f30:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f32:	f000 f8f5 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000f36:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000f38:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000f3a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000f3e:	42b3      	cmp	r3, r6
 8000f40:	bf84      	itt	hi
 8000f42:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000f46:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000f48:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000f4a:	bf91      	iteee	ls
 8000f4c:	1c69      	addls	r1, r5, #1
 8000f4e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000f52:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000f56:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f58:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000f5a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f5c:	d821      	bhi.n	8000fa2 <HAL_I2C_Init+0x9e>
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f64:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	bf98      	it	ls
 8000f6c:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f6e:	6a21      	ldr	r1, [r4, #32]
 8000f70:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000f72:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f74:	430b      	orrs	r3, r1
 8000f76:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000f78:	68e1      	ldr	r1, [r4, #12]
 8000f7a:	6923      	ldr	r3, [r4, #16]
 8000f7c:	430b      	orrs	r3, r1
 8000f7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000f80:	69a1      	ldr	r1, [r4, #24]
 8000f82:	6963      	ldr	r3, [r4, #20]
 8000f84:	430b      	orrs	r3, r1
 8000f86:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f88:	6813      	ldr	r3, [r2, #0]
 8000f8a:	f043 0301 	orr.w	r3, r3, #1
 8000f8e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f90:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000f92:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f94:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f96:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f9a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f9c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000fa2:	68a1      	ldr	r1, [r4, #8]
 8000fa4:	b949      	cbnz	r1, 8000fba <HAL_I2C_Init+0xb6>
 8000fa6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000faa:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fae:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000fb2:	b163      	cbz	r3, 8000fce <HAL_I2C_Init+0xca>
 8000fb4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000fb8:	e7d9      	b.n	8000f6e <HAL_I2C_Init+0x6a>
 8000fba:	2119      	movs	r1, #25
 8000fbc:	434b      	muls	r3, r1
 8000fbe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000fc6:	b113      	cbz	r3, 8000fce <HAL_I2C_Init+0xca>
 8000fc8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000fcc:	e7cf      	b.n	8000f6e <HAL_I2C_Init+0x6a>
 8000fce:	2001      	movs	r0, #1
 8000fd0:	e7cd      	b.n	8000f6e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000fd2:	2001      	movs	r0, #1
}
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}
 8000fd6:	bf00      	nop
 8000fd8:	000186a0 	.word	0x000186a0
 8000fdc:	000f4240 	.word	0x000f4240

08000fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe4:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	b910      	cbnz	r0, 8000ff0 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000fea:	2001      	movs	r0, #1
 8000fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ff0:	4b44      	ldr	r3, [pc, #272]	; (8001104 <HAL_RCC_ClockConfig+0x124>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	f002 020f 	and.w	r2, r2, #15
 8000ff8:	428a      	cmp	r2, r1
 8000ffa:	d328      	bcc.n	800104e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ffc:	6821      	ldr	r1, [r4, #0]
 8000ffe:	078f      	lsls	r7, r1, #30
 8001000:	d42d      	bmi.n	800105e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001002:	07c8      	lsls	r0, r1, #31
 8001004:	d440      	bmi.n	8001088 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001006:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <HAL_RCC_ClockConfig+0x124>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	f002 020f 	and.w	r2, r2, #15
 800100e:	4295      	cmp	r5, r2
 8001010:	d366      	bcc.n	80010e0 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001012:	6822      	ldr	r2, [r4, #0]
 8001014:	0751      	lsls	r1, r2, #29
 8001016:	d46c      	bmi.n	80010f2 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001018:	0713      	lsls	r3, r2, #28
 800101a:	d507      	bpl.n	800102c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800101c:	4a3a      	ldr	r2, [pc, #232]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 800101e:	6921      	ldr	r1, [r4, #16]
 8001020:	6893      	ldr	r3, [r2, #8]
 8001022:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001026:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800102a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800102c:	f000 faa0 	bl	8001570 <HAL_RCC_GetSysClockFreq>
 8001030:	4b35      	ldr	r3, [pc, #212]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 8001032:	4a36      	ldr	r2, [pc, #216]	; (800110c <HAL_RCC_ClockConfig+0x12c>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800103a:	5cd3      	ldrb	r3, [r2, r3]
 800103c:	40d8      	lsrs	r0, r3
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <HAL_RCC_ClockConfig+0x130>)
 8001040:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff fa66 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001048:	2000      	movs	r0, #0
 800104a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104e:	b2ca      	uxtb	r2, r1
 8001050:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	4299      	cmp	r1, r3
 800105a:	d1c6      	bne.n	8000fea <HAL_RCC_ClockConfig+0xa>
 800105c:	e7ce      	b.n	8000ffc <HAL_RCC_ClockConfig+0x1c>
 800105e:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001060:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	bf1e      	ittt	ne
 8001066:	689a      	ldrne	r2, [r3, #8]
 8001068:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800106c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800106e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001070:	bf42      	ittt	mi
 8001072:	689a      	ldrmi	r2, [r3, #8]
 8001074:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001078:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	68a0      	ldr	r0, [r4, #8]
 800107e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001082:	4302      	orrs	r2, r0
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	e7bc      	b.n	8001002 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001088:	6862      	ldr	r2, [r4, #4]
 800108a:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 800108c:	2a01      	cmp	r2, #1
 800108e:	d11d      	bne.n	80010cc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001096:	d0a8      	beq.n	8000fea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001098:	4e1b      	ldr	r6, [pc, #108]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 800109a:	68b3      	ldr	r3, [r6, #8]
 800109c:	f023 0303 	bic.w	r3, r3, #3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010a4:	f7ff fa80 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010ac:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ae:	68b3      	ldr	r3, [r6, #8]
 80010b0:	6862      	ldr	r2, [r4, #4]
 80010b2:	f003 030c 	and.w	r3, r3, #12
 80010b6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010ba:	d0a4      	beq.n	8001006 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010bc:	f7ff fa74 	bl	80005a8 <HAL_GetTick>
 80010c0:	1bc0      	subs	r0, r0, r7
 80010c2:	4540      	cmp	r0, r8
 80010c4:	d9f3      	bls.n	80010ae <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80010c6:	2003      	movs	r0, #3
}
 80010c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010cc:	1e91      	subs	r1, r2, #2
 80010ce:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d2:	d802      	bhi.n	80010da <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010d8:	e7dd      	b.n	8001096 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	f013 0f02 	tst.w	r3, #2
 80010de:	e7da      	b.n	8001096 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e0:	b2ea      	uxtb	r2, r5
 80010e2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	429d      	cmp	r5, r3
 80010ec:	f47f af7d 	bne.w	8000fea <HAL_RCC_ClockConfig+0xa>
 80010f0:	e78f      	b.n	8001012 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010f2:	4905      	ldr	r1, [pc, #20]	; (8001108 <HAL_RCC_ClockConfig+0x128>)
 80010f4:	68e0      	ldr	r0, [r4, #12]
 80010f6:	688b      	ldr	r3, [r1, #8]
 80010f8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010fc:	4303      	orrs	r3, r0
 80010fe:	608b      	str	r3, [r1, #8]
 8001100:	e78a      	b.n	8001018 <HAL_RCC_ClockConfig+0x38>
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00
 8001108:	40023800 	.word	0x40023800
 800110c:	08005cc0 	.word	0x08005cc0
 8001110:	2000000c 	.word	0x2000000c

08001114 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001114:	4b01      	ldr	r3, [pc, #4]	; (800111c <HAL_RCC_GetHCLKFreq+0x8>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	2000000c 	.word	0x2000000c

08001120 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800112a:	5cd3      	ldrb	r3, [r2, r3]
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800112e:	6810      	ldr	r0, [r2, #0]
}
 8001130:	40d8      	lsrs	r0, r3
 8001132:	4770      	bx	lr
 8001134:	40023800 	.word	0x40023800
 8001138:	08005cd0 	.word	0x08005cd0
 800113c:	2000000c 	.word	0x2000000c

08001140 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800114a:	5cd3      	ldrb	r3, [r2, r3]
 800114c:	4a03      	ldr	r2, [pc, #12]	; (800115c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800114e:	6810      	ldr	r0, [r2, #0]
}
 8001150:	40d8      	lsrs	r0, r3
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800
 8001158:	08005cd0 	.word	0x08005cd0
 800115c:	2000000c 	.word	0x2000000c

08001160 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001160:	6803      	ldr	r3, [r0, #0]
{
 8001162:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001166:	f013 0601 	ands.w	r6, r3, #1
{
 800116a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800116c:	d00b      	beq.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800116e:	49aa      	ldr	r1, [pc, #680]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001170:	6b86      	ldr	r6, [r0, #56]	; 0x38
 8001172:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001176:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800117a:	4332      	orrs	r2, r6
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800117c:	fab6 f686 	clz	r6, r6
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001180:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001184:	0976      	lsrs	r6, r6, #5
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001186:	079d      	lsls	r5, r3, #30
 8001188:	d50b      	bpl.n	80011a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800118a:	48a3      	ldr	r0, [pc, #652]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800118c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800118e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001192:	f022 52c0 	bic.w	r2, r2, #402653184	; 0x18000000
 8001196:	430a      	orrs	r2, r1
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1U;
 8001198:	2900      	cmp	r1, #0
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800119a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      plli2sused = 1U;
 800119e:	bf08      	it	eq
 80011a0:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80011a2:	f013 0504 	ands.w	r5, r3, #4
 80011a6:	d012      	beq.n	80011ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011a8:	499b      	ldr	r1, [pc, #620]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80011aa:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80011ac:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80011b0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011b4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80011b8:	ea42 0205 	orr.w	r2, r2, r5
    {
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80011bc:	bf18      	it	ne
 80011be:	fab5 f585 	clzne	r5, r5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011c2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80011c6:	bf12      	itee	ne
 80011c8:	096d      	lsrne	r5, r5, #5
  uint32_t pllsaiused = 0U;
 80011ca:	2500      	moveq	r5, #0
      plli2sused = 1U;
 80011cc:	2601      	moveq	r6, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80011ce:	0718      	lsls	r0, r3, #28
 80011d0:	d50f      	bpl.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011d2:	4891      	ldr	r0, [pc, #580]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80011d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011d6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80011da:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80011de:	430a      	orrs	r2, r1

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80011e0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011e4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80011e8:	f000 8109 	beq.w	80013fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
      plli2sused = 1U;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1U;
 80011ec:	2900      	cmp	r1, #0
 80011ee:	bf08      	it	eq
 80011f0:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80011f2:	0699      	lsls	r1, r3, #26
 80011f4:	d533      	bpl.n	800125e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	9301      	str	r3, [sp, #4]
 80011fa:	4b87      	ldr	r3, [pc, #540]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80011fc:	4f87      	ldr	r7, [pc, #540]	; (800141c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001200:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001216:	603b      	str	r3, [r7, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001218:	f7ff f9c6 	bl	80005a8 <HAL_GetTick>
 800121c:	4680      	mov	r8, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	05da      	lsls	r2, r3, #23
 8001222:	f140 80ee 	bpl.w	8001402 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001226:	4f7c      	ldr	r7, [pc, #496]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001228:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800122a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800122e:	f040 80fb 	bne.w	8001428 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001234:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001238:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800123c:	4a76      	ldr	r2, [pc, #472]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800123e:	f040 8116 	bne.w	800146e <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8001242:	6891      	ldr	r1, [r2, #8]
 8001244:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001248:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800124c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001250:	4301      	orrs	r1, r0
 8001252:	6091      	str	r1, [r2, #8]
 8001254:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800125a:	430b      	orrs	r3, r1
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	06d9      	lsls	r1, r3, #27
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001262:	bf42      	ittt	mi
 8001264:	4b6e      	ldrmi	r3, [pc, #440]	; (8001420 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8001266:	f894 2058 	ldrbmi.w	r2, [r4, #88]	; 0x58
 800126a:	601a      	strmi	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	061a      	lsls	r2, r3, #24
 8001270:	d508      	bpl.n	8001284 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001272:	4969      	ldr	r1, [pc, #420]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001274:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001276:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 800127a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800127e:	4302      	orrs	r2, r0
 8001280:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001284:	065f      	lsls	r7, r3, #25
 8001286:	d508      	bpl.n	800129a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001288:	4963      	ldr	r1, [pc, #396]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 800128a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800128c:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8001290:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001294:	4302      	orrs	r2, r0
 8001296:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800129a:	05d8      	lsls	r0, r3, #23
 800129c:	d50c      	bpl.n	80012b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800129e:	485e      	ldr	r0, [pc, #376]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012a0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80012a2:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 80012a6:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 80012aa:	430a      	orrs	r2, r1

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
    {
      pllsaiused = 1U;
 80012ac:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80012b0:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
      pllsaiused = 1U;
 80012b4:	bf08      	it	eq
 80012b6:	2501      	moveq	r5, #1
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80012b8:	0599      	lsls	r1, r3, #22
 80012ba:	d508      	bpl.n	80012ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80012bc:	4956      	ldr	r1, [pc, #344]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80012be:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80012c0:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 80012c4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80012c8:	4302      	orrs	r2, r0
 80012ca:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80012ce:	055a      	lsls	r2, r3, #21
 80012d0:	f100 80d1 	bmi.w	8001476 <HAL_RCCEx_PeriphCLKConfig+0x316>
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80012d4:	2e01      	cmp	r6, #1
 80012d6:	f040 80dc 	bne.w	8001492 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80012da:	4e52      	ldr	r6, [pc, #328]	; (8001424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012dc:	4f4e      	ldr	r7, [pc, #312]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    __HAL_RCC_PLLI2S_DISABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80012e2:	f7ff f961 	bl	80005a8 <HAL_GetTick>
 80012e6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	f100 8125 	bmi.w	800153a <HAL_RCCEx_PeriphCLKConfig+0x3da>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80012f0:	6822      	ldr	r2, [r4, #0]
 80012f2:	07d0      	lsls	r0, r2, #31
 80012f4:	d501      	bpl.n	80012fa <HAL_RCCEx_PeriphCLKConfig+0x19a>
 80012f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80012f8:	b11b      	cbz	r3, 8001302 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80012fa:	0791      	lsls	r1, r2, #30
 80012fc:	d515      	bpl.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80012fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001300:	b99b      	cbnz	r3, 800132a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001302:	4945      	ldr	r1, [pc, #276]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001304:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001308:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800130c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001310:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8001314:	4303      	orrs	r3, r0
 8001316:	6860      	ldr	r0, [r4, #4]
 8001318:	4303      	orrs	r3, r0
 800131a:	68a0      	ldr	r0, [r4, #8]
 800131c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001320:	6960      	ldr	r0, [r4, #20]
 8001322:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8001326:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800132a:	0753      	lsls	r3, r2, #29
 800132c:	d503      	bpl.n	8001336 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
 800132e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001334:	d005      	beq.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8001336:	0717      	lsls	r7, r2, #28
 8001338:	d520      	bpl.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x21c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800133a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800133c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001340:	d11c      	bne.n	800137c <HAL_RCCEx_PeriphCLKConfig+0x21c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001342:	4935      	ldr	r1, [pc, #212]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001344:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001348:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800134c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001350:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001354:	4303      	orrs	r3, r0
 8001356:	6860      	ldr	r0, [r4, #4]
 8001358:	4303      	orrs	r3, r0
 800135a:	68a0      	ldr	r0, [r4, #8]
 800135c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001360:	6920      	ldr	r0, [r4, #16]
 8001362:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001366:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800136a:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 800136e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001370:	f020 001f 	bic.w	r0, r0, #31
 8001374:	3b01      	subs	r3, #1
 8001376:	4303      	orrs	r3, r0
 8001378:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800137c:	0550      	lsls	r0, r2, #21
 800137e:	d51b      	bpl.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001380:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001386:	d117      	bne.n	80013b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001388:	4823      	ldr	r0, [pc, #140]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800138a:	6867      	ldr	r7, [r4, #4]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800138c:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001390:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001394:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001398:	433b      	orrs	r3, r7
 800139a:	68a7      	ldr	r7, [r4, #8]
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800139c:	f3c1 4101 	ubfx	r1, r1, #16, #2
 80013a0:	3101      	adds	r1, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80013a2:	ea43 1387 	orr.w	r3, r3, r7, lsl #6
 80013a6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 80013aa:	68e1      	ldr	r1, [r4, #12]
 80013ac:	0849      	lsrs	r1, r1, #1
 80013ae:	3901      	subs	r1, #1
 80013b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013b4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80013b8:	0511      	lsls	r1, r2, #20
 80013ba:	d511      	bpl.n	80013e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80013bc:	6923      	ldr	r3, [r4, #16]
 80013be:	68a2      	ldr	r2, [r4, #8]
 80013c0:	061b      	lsls	r3, r3, #24
 80013c2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013c6:	6862      	ldr	r2, [r4, #4]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	6962      	ldr	r2, [r4, #20]
 80013cc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80013d0:	68e2      	ldr	r2, [r4, #12]
 80013d2:	0852      	lsrs	r2, r2, #1
 80013d4:	3a01      	subs	r2, #1
 80013d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013da:	4a0f      	ldr	r2, [pc, #60]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 80013dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80013e0:	2301      	movs	r3, #1
 80013e2:	6033      	str	r3, [r6, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80013e4:	f7ff f8e0 	bl	80005a8 <HAL_GetTick>
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013e8:	4e0b      	ldr	r6, [pc, #44]	; (8001418 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
    tickstart = HAL_GetTick();
 80013ea:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013ec:	6833      	ldr	r3, [r6, #0]
 80013ee:	011a      	lsls	r2, r3, #4
 80013f0:	d453      	bmi.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80013f2:	f7ff f8d9 	bl	80005a8 <HAL_GetTick>
 80013f6:	1bc0      	subs	r0, r0, r7
 80013f8:	2802      	cmp	r0, #2
 80013fa:	d9f7      	bls.n	80013ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80013fc:	e008      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      plli2sused = 1U;
 80013fe:	2601      	movs	r6, #1
 8001400:	e6f7      	b.n	80011f2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff f8d1 	bl	80005a8 <HAL_GetTick>
 8001406:	eba0 0008 	sub.w	r0, r0, r8
 800140a:	2802      	cmp	r0, #2
 800140c:	f67f af07 	bls.w	800121e <HAL_RCCEx_PeriphCLKConfig+0xbe>
        return HAL_TIMEOUT;
 8001410:	2003      	movs	r0, #3
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8001412:	b003      	add	sp, #12
 8001414:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001418:	40023800 	.word	0x40023800
 800141c:	40007000 	.word	0x40007000
 8001420:	424711e0 	.word	0x424711e0
 8001424:	42470068 	.word	0x42470068
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001428:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800142a:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800142e:	4293      	cmp	r3, r2
 8001430:	f43f aeff 	beq.w	8001232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001436:	4a4b      	ldr	r2, [pc, #300]	; (8001564 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8001438:	2101      	movs	r1, #1
 800143a:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800143c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001440:	2100      	movs	r1, #0
 8001442:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8001444:	673b      	str	r3, [r7, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001448:	07db      	lsls	r3, r3, #31
 800144a:	f57f aef2 	bpl.w	8001232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        tickstart = HAL_GetTick();
 800144e:	f7ff f8ab 	bl	80005a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001452:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001456:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800145a:	0798      	lsls	r0, r3, #30
 800145c:	f53f aee9 	bmi.w	8001232 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001460:	f7ff f8a2 	bl	80005a8 <HAL_GetTick>
 8001464:	eba0 0008 	sub.w	r0, r0, r8
 8001468:	4548      	cmp	r0, r9
 800146a:	d9f5      	bls.n	8001458 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800146c:	e7d0      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800146e:	6891      	ldr	r1, [r2, #8]
 8001470:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001474:	e6ed      	b.n	8001252 <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001476:	483c      	ldr	r0, [pc, #240]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8001478:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800147a:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
 800147e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001482:	430a      	orrs	r2, r1
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001484:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001488:	f8c0 2094 	str.w	r2, [r0, #148]	; 0x94
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800148c:	f47f af22 	bne.w	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8001490:	e723      	b.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001496:	f43f af20 	beq.w	80012da <HAL_RCCEx_PeriphCLKConfig+0x17a>
  if(pllsaiused == 1U)
 800149a:	2d01      	cmp	r5, #1
 800149c:	d14b      	bne.n	8001536 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    __HAL_RCC_PLLSAI_DISABLE();
 800149e:	4d33      	ldr	r5, [pc, #204]	; (800156c <HAL_RCCEx_PeriphCLKConfig+0x40c>)
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014a0:	4e31      	ldr	r6, [pc, #196]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    __HAL_RCC_PLLSAI_DISABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80014a6:	f7ff f87f 	bl	80005a8 <HAL_GetTick>
 80014aa:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80014ac:	6833      	ldr	r3, [r6, #0]
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	d44b      	bmi.n	800154a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80014b2:	6821      	ldr	r1, [r4, #0]
 80014b4:	074e      	lsls	r6, r1, #29
 80014b6:	d501      	bpl.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80014b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80014ba:	b11b      	cbz	r3, 80014c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 80014bc:	0708      	lsls	r0, r1, #28
 80014be:	d51a      	bpl.n	80014f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80014c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80014c2:	b9c3      	cbnz	r3, 80014f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80014c6:	69a0      	ldr	r0, [r4, #24]
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80014c8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80014cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d0:	4303      	orrs	r3, r0
 80014d2:	69e0      	ldr	r0, [r4, #28]
 80014d4:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014d8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80014da:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80014de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80014e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80014e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80014e8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80014ec:	3801      	subs	r0, #1
 80014ee:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80014f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80014f6:	05ca      	lsls	r2, r1, #23
 80014f8:	d514      	bpl.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 80014fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001500:	d110      	bne.n	8001524 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001502:	4919      	ldr	r1, [pc, #100]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x408>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001504:	69a2      	ldr	r2, [r4, #24]
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001506:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800150a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800150e:	4313      	orrs	r3, r2
 8001510:	69e2      	ldr	r2, [r4, #28]
 8001512:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001516:	6a22      	ldr	r2, [r4, #32]
 8001518:	0852      	lsrs	r2, r2, #1
 800151a:	3a01      	subs	r2, #1
 800151c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 8001524:	2301      	movs	r3, #1
 8001526:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8001528:	f7ff f83e 	bl	80005a8 <HAL_GetTick>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800152c:	4c0e      	ldr	r4, [pc, #56]	; (8001568 <HAL_RCCEx_PeriphCLKConfig+0x408>)
    tickstart = HAL_GetTick();
 800152e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	d50f      	bpl.n	8001556 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
  return HAL_OK;
 8001536:	2000      	movs	r0, #0
 8001538:	e76b      	b.n	8001412 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800153a:	f7ff f835 	bl	80005a8 <HAL_GetTick>
 800153e:	eba0 0008 	sub.w	r0, r0, r8
 8001542:	2802      	cmp	r0, #2
 8001544:	f67f aed0 	bls.w	80012e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8001548:	e762      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800154a:	f7ff f82d 	bl	80005a8 <HAL_GetTick>
 800154e:	1bc0      	subs	r0, r0, r7
 8001550:	2802      	cmp	r0, #2
 8001552:	d9ab      	bls.n	80014ac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8001554:	e75c      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001556:	f7ff f827 	bl	80005a8 <HAL_GetTick>
 800155a:	1b40      	subs	r0, r0, r5
 800155c:	2802      	cmp	r0, #2
 800155e:	d9e7      	bls.n	8001530 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001560:	e756      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8001562:	bf00      	nop
 8001564:	42470e40 	.word	0x42470e40
 8001568:	40023800 	.word	0x40023800
 800156c:	42470070 	.word	0x42470070

08001570 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001570:	4920      	ldr	r1, [pc, #128]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001572:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001574:	688b      	ldr	r3, [r1, #8]
 8001576:	f003 030c 	and.w	r3, r3, #12
 800157a:	2b08      	cmp	r3, #8
 800157c:	d007      	beq.n	800158e <HAL_RCC_GetSysClockFreq+0x1e>
 800157e:	2b0c      	cmp	r3, #12
 8001580:	d020      	beq.n	80015c4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001582:	4a1d      	ldr	r2, [pc, #116]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x88>)
 8001584:	481d      	ldr	r0, [pc, #116]	; (80015fc <HAL_RCC_GetSysClockFreq+0x8c>)
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf18      	it	ne
 800158a:	4610      	movne	r0, r2
 800158c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001590:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001592:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001594:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001598:	bf14      	ite	ne
 800159a:	4818      	ldrne	r0, [pc, #96]	; (80015fc <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159c:	4816      	ldreq	r0, [pc, #88]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015a2:	bf18      	it	ne
 80015a4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015aa:	fba1 0100 	umull	r0, r1, r1, r0
 80015ae:	f7fe fe29 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x84>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80015ba:	3301      	adds	r3, #1
 80015bc:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80015be:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80015c2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015c4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015ca:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	bf14      	ite	ne
 80015d0:	480a      	ldrne	r0, [pc, #40]	; (80015fc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d2:	4809      	ldreq	r0, [pc, #36]	; (80015f8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80015d8:	bf18      	it	ne
 80015da:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e0:	fba1 0100 	umull	r0, r1, r1, r0
 80015e4:	f7fe fe0e 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015e8:	4b02      	ldr	r3, [pc, #8]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x84>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80015f0:	e7e5      	b.n	80015be <HAL_RCC_GetSysClockFreq+0x4e>
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	00f42400 	.word	0x00f42400
 80015fc:	017d7840 	.word	0x017d7840

08001600 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001600:	6803      	ldr	r3, [r0, #0]
{
 8001602:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	07df      	lsls	r7, r3, #31
{
 8001608:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	d410      	bmi.n	800162e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160c:	6823      	ldr	r3, [r4, #0]
 800160e:	079e      	lsls	r6, r3, #30
 8001610:	d467      	bmi.n	80016e2 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	071a      	lsls	r2, r3, #28
 8001616:	f100 80b2 	bmi.w	800177e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	075b      	lsls	r3, r3, #29
 800161e:	f100 80d0 	bmi.w	80017c2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	69a2      	ldr	r2, [r4, #24]
 8001624:	2a00      	cmp	r2, #0
 8001626:	f040 8139 	bne.w	800189c <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800162a:	2000      	movs	r0, #0
 800162c:	e01e      	b.n	800166c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800162e:	4b97      	ldr	r3, [pc, #604]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	f002 020c 	and.w	r2, r2, #12
 8001636:	2a04      	cmp	r2, #4
 8001638:	d010      	beq.n	800165c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001640:	2a08      	cmp	r2, #8
 8001642:	d102      	bne.n	800164a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	025d      	lsls	r5, r3, #9
 8001648:	d408      	bmi.n	800165c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b90      	ldr	r3, [pc, #576]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001652:	2a0c      	cmp	r2, #12
 8001654:	d10d      	bne.n	8001672 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	0250      	lsls	r0, r2, #9
 800165a:	d50a      	bpl.n	8001672 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	4b8b      	ldr	r3, [pc, #556]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0399      	lsls	r1, r3, #14
 8001662:	d5d3      	bpl.n	800160c <HAL_RCC_OscConfig+0xc>
 8001664:	6863      	ldr	r3, [r4, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1d0      	bne.n	800160c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800166a:	2001      	movs	r0, #1
}
 800166c:	b002      	add	sp, #8
 800166e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001672:	6862      	ldr	r2, [r4, #4]
 8001674:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001678:	d111      	bne.n	800169e <HAL_RCC_OscConfig+0x9e>
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001680:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001682:	f7fe ff91 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001686:	4d81      	ldr	r5, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001688:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168a:	682b      	ldr	r3, [r5, #0]
 800168c:	039a      	lsls	r2, r3, #14
 800168e:	d4bd      	bmi.n	800160c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001690:	f7fe ff8a 	bl	80005a8 <HAL_GetTick>
 8001694:	1b80      	subs	r0, r0, r6
 8001696:	2864      	cmp	r0, #100	; 0x64
 8001698:	d9f7      	bls.n	800168a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800169a:	2003      	movs	r0, #3
 800169c:	e7e6      	b.n	800166c <HAL_RCC_OscConfig+0x6c>
 800169e:	4d7b      	ldr	r5, [pc, #492]	; (800188c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0xb8>
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ac:	602b      	str	r3, [r5, #0]
 80016ae:	682b      	ldr	r3, [r5, #0]
 80016b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016b4:	602b      	str	r3, [r5, #0]
 80016b6:	e7e4      	b.n	8001682 <HAL_RCC_OscConfig+0x82>
 80016b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016bc:	602b      	str	r3, [r5, #0]
 80016be:	682b      	ldr	r3, [r5, #0]
 80016c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d1db      	bne.n	8001682 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80016ca:	f7fe ff6d 	bl	80005a8 <HAL_GetTick>
 80016ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d0:	682b      	ldr	r3, [r5, #0]
 80016d2:	039b      	lsls	r3, r3, #14
 80016d4:	d59a      	bpl.n	800160c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d6:	f7fe ff67 	bl	80005a8 <HAL_GetTick>
 80016da:	1b80      	subs	r0, r0, r6
 80016dc:	2864      	cmp	r0, #100	; 0x64
 80016de:	d9f7      	bls.n	80016d0 <HAL_RCC_OscConfig+0xd0>
 80016e0:	e7db      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016e2:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	f012 0f0c 	tst.w	r2, #12
 80016ea:	d010      	beq.n	800170e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80016f2:	2a08      	cmp	r2, #8
 80016f4:	d102      	bne.n	80016fc <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	025f      	lsls	r7, r3, #9
 80016fa:	d508      	bpl.n	800170e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016fc:	4a63      	ldr	r2, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 80016fe:	6893      	ldr	r3, [r2, #8]
 8001700:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001704:	2b0c      	cmp	r3, #12
 8001706:	d111      	bne.n	800172c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001708:	6853      	ldr	r3, [r2, #4]
 800170a:	025e      	lsls	r6, r3, #9
 800170c:	d40e      	bmi.n	800172c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	4b5f      	ldr	r3, [pc, #380]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	0795      	lsls	r5, r2, #30
 8001714:	d502      	bpl.n	800171c <HAL_RCC_OscConfig+0x11c>
 8001716:	68e2      	ldr	r2, [r4, #12]
 8001718:	2a01      	cmp	r2, #1
 800171a:	d1a6      	bne.n	800166a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	6921      	ldr	r1, [r4, #16]
 8001720:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001724:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001728:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	e772      	b.n	8001612 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800172c:	68e2      	ldr	r2, [r4, #12]
 800172e:	4b58      	ldr	r3, [pc, #352]	; (8001890 <HAL_RCC_OscConfig+0x290>)
 8001730:	b1b2      	cbz	r2, 8001760 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001732:	2201      	movs	r2, #1
 8001734:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001736:	f7fe ff37 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173a:	4d54      	ldr	r5, [pc, #336]	; (800188c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800173c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800173e:	682b      	ldr	r3, [r5, #0]
 8001740:	0798      	lsls	r0, r3, #30
 8001742:	d507      	bpl.n	8001754 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	6922      	ldr	r2, [r4, #16]
 8001748:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800174c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001750:	602b      	str	r3, [r5, #0]
 8001752:	e75e      	b.n	8001612 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001754:	f7fe ff28 	bl	80005a8 <HAL_GetTick>
 8001758:	1b80      	subs	r0, r0, r6
 800175a:	2802      	cmp	r0, #2
 800175c:	d9ef      	bls.n	800173e <HAL_RCC_OscConfig+0x13e>
 800175e:	e79c      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001760:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001762:	f7fe ff21 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001766:	4d49      	ldr	r5, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001768:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	0799      	lsls	r1, r3, #30
 800176e:	f57f af50 	bpl.w	8001612 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001772:	f7fe ff19 	bl	80005a8 <HAL_GetTick>
 8001776:	1b80      	subs	r0, r0, r6
 8001778:	2802      	cmp	r0, #2
 800177a:	d9f6      	bls.n	800176a <HAL_RCC_OscConfig+0x16a>
 800177c:	e78d      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800177e:	6962      	ldr	r2, [r4, #20]
 8001780:	4b44      	ldr	r3, [pc, #272]	; (8001894 <HAL_RCC_OscConfig+0x294>)
 8001782:	b17a      	cbz	r2, 80017a4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001784:	2201      	movs	r2, #1
 8001786:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001788:	f7fe ff0e 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800178c:	4d3f      	ldr	r5, [pc, #252]	; (800188c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800178e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001790:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001792:	079f      	lsls	r7, r3, #30
 8001794:	f53f af41 	bmi.w	800161a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001798:	f7fe ff06 	bl	80005a8 <HAL_GetTick>
 800179c:	1b80      	subs	r0, r0, r6
 800179e:	2802      	cmp	r0, #2
 80017a0:	d9f6      	bls.n	8001790 <HAL_RCC_OscConfig+0x190>
 80017a2:	e77a      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80017a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80017a6:	f7fe feff 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017aa:	4d38      	ldr	r5, [pc, #224]	; (800188c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80017ac:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80017b0:	0798      	lsls	r0, r3, #30
 80017b2:	f57f af32 	bpl.w	800161a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7fe fef7 	bl	80005a8 <HAL_GetTick>
 80017ba:	1b80      	subs	r0, r0, r6
 80017bc:	2802      	cmp	r0, #2
 80017be:	d9f6      	bls.n	80017ae <HAL_RCC_OscConfig+0x1ae>
 80017c0:	e76b      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 80017c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017c6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80017ca:	d128      	bne.n	800181e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	9201      	str	r2, [sp, #4]
 80017ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017d4:	641a      	str	r2, [r3, #64]	; 0x40
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80017e0:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4d2d      	ldr	r5, [pc, #180]	; (8001898 <HAL_RCC_OscConfig+0x298>)
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	05d9      	lsls	r1, r3, #23
 80017e8:	d51b      	bpl.n	8001822 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ea:	68a3      	ldr	r3, [r4, #8]
 80017ec:	4d27      	ldr	r5, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d127      	bne.n	8001842 <HAL_RCC_OscConfig+0x242>
 80017f2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80017fa:	f7fe fed5 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fe:	4d23      	ldr	r5, [pc, #140]	; (800188c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001800:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001806:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001808:	079b      	lsls	r3, r3, #30
 800180a:	d539      	bpl.n	8001880 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 800180c:	2e00      	cmp	r6, #0
 800180e:	f43f af08 	beq.w	8001622 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001812:	4a1e      	ldr	r2, [pc, #120]	; (800188c <HAL_RCC_OscConfig+0x28c>)
 8001814:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	e701      	b.n	8001622 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800181e:	2600      	movs	r6, #0
 8001820:	e7df      	b.n	80017e2 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001822:	682b      	ldr	r3, [r5, #0]
 8001824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001828:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800182a:	f7fe febd 	bl	80005a8 <HAL_GetTick>
 800182e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001830:	682b      	ldr	r3, [r5, #0]
 8001832:	05da      	lsls	r2, r3, #23
 8001834:	d4d9      	bmi.n	80017ea <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001836:	f7fe feb7 	bl	80005a8 <HAL_GetTick>
 800183a:	1bc0      	subs	r0, r0, r7
 800183c:	2802      	cmp	r0, #2
 800183e:	d9f7      	bls.n	8001830 <HAL_RCC_OscConfig+0x230>
 8001840:	e72b      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001842:	2b05      	cmp	r3, #5
 8001844:	d104      	bne.n	8001850 <HAL_RCC_OscConfig+0x250>
 8001846:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	672b      	str	r3, [r5, #112]	; 0x70
 800184e:	e7d0      	b.n	80017f2 <HAL_RCC_OscConfig+0x1f2>
 8001850:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001852:	f022 0201 	bic.w	r2, r2, #1
 8001856:	672a      	str	r2, [r5, #112]	; 0x70
 8001858:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800185a:	f022 0204 	bic.w	r2, r2, #4
 800185e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1ca      	bne.n	80017fa <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001864:	f7fe fea0 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800186c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001870:	0798      	lsls	r0, r3, #30
 8001872:	d5cb      	bpl.n	800180c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7fe fe98 	bl	80005a8 <HAL_GetTick>
 8001878:	1bc0      	subs	r0, r0, r7
 800187a:	4540      	cmp	r0, r8
 800187c:	d9f7      	bls.n	800186e <HAL_RCC_OscConfig+0x26e>
 800187e:	e70c      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7fe fe92 	bl	80005a8 <HAL_GetTick>
 8001884:	1bc0      	subs	r0, r0, r7
 8001886:	4540      	cmp	r0, r8
 8001888:	d9bd      	bls.n	8001806 <HAL_RCC_OscConfig+0x206>
 800188a:	e706      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
 800188c:	40023800 	.word	0x40023800
 8001890:	42470000 	.word	0x42470000
 8001894:	42470e80 	.word	0x42470e80
 8001898:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189c:	4d23      	ldr	r5, [pc, #140]	; (800192c <HAL_RCC_OscConfig+0x32c>)
 800189e:	68ab      	ldr	r3, [r5, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	f43f aee0 	beq.w	800166a <HAL_RCC_OscConfig+0x6a>
 80018aa:	4e21      	ldr	r6, [pc, #132]	; (8001930 <HAL_RCC_OscConfig+0x330>)
 80018ac:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ae:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80018b0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b2:	d12d      	bne.n	8001910 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80018b4:	f7fe fe78 	bl	80005a8 <HAL_GetTick>
 80018b8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	0199      	lsls	r1, r3, #6
 80018be:	d421      	bmi.n	8001904 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c0:	6a22      	ldr	r2, [r4, #32]
 80018c2:	69e3      	ldr	r3, [r4, #28]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018c8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018d4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80018d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018da:	4c14      	ldr	r4, [pc, #80]	; (800192c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018dc:	0852      	lsrs	r2, r2, #1
 80018de:	3a01      	subs	r2, #1
 80018e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018e6:	2301      	movs	r3, #1
 80018e8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018ea:	f7fe fe5d 	bl	80005a8 <HAL_GetTick>
 80018ee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	019a      	lsls	r2, r3, #6
 80018f4:	f53f ae99 	bmi.w	800162a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe fe56 	bl	80005a8 <HAL_GetTick>
 80018fc:	1b40      	subs	r0, r0, r5
 80018fe:	2802      	cmp	r0, #2
 8001900:	d9f6      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2f0>
 8001902:	e6ca      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001904:	f7fe fe50 	bl	80005a8 <HAL_GetTick>
 8001908:	1bc0      	subs	r0, r0, r7
 800190a:	2802      	cmp	r0, #2
 800190c:	d9d5      	bls.n	80018ba <HAL_RCC_OscConfig+0x2ba>
 800190e:	e6c4      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001910:	f7fe fe4a 	bl	80005a8 <HAL_GetTick>
 8001914:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	682b      	ldr	r3, [r5, #0]
 8001918:	019b      	lsls	r3, r3, #6
 800191a:	f57f ae86 	bpl.w	800162a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191e:	f7fe fe43 	bl	80005a8 <HAL_GetTick>
 8001922:	1b00      	subs	r0, r0, r4
 8001924:	2802      	cmp	r0, #2
 8001926:	d9f6      	bls.n	8001916 <HAL_RCC_OscConfig+0x316>
 8001928:	e6b7      	b.n	800169a <HAL_RCC_OscConfig+0x9a>
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	42470060 	.word	0x42470060

08001934 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001938:	b089      	sub	sp, #36	; 0x24
 800193a:	4605      	mov	r5, r0
 800193c:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 800193e:	f7fe fe33 	bl	80005a8 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001942:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8001944:	4681      	mov	r9, r0
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001946:	2108      	movs	r1, #8
 8001948:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800194e:	f001 fb04 	bl	8002f5a <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8001952:	4604      	mov	r4, r0
 8001954:	bb40      	cbnz	r0, 80019a8 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8001956:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001958:	6828      	ldr	r0, [r5, #0]
 800195a:	0409      	lsls	r1, r1, #16
 800195c:	f001 fc08 	bl	8003170 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8001960:	4604      	mov	r4, r0
 8001962:	bb08      	cbnz	r0, 80019a8 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001968:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 800196a:	2308      	movs	r3, #8
 800196c:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800196e:	2330      	movs	r3, #48	; 0x30
 8001970:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001972:	2302      	movs	r3, #2
 8001974:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001976:	9006      	str	r0, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001978:	2301      	movs	r3, #1
  SDIO_ConfigData(hsd->Instance, &config);
 800197a:	a902      	add	r1, sp, #8
 800197c:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800197e:	9307      	str	r3, [sp, #28]
  SDIO_ConfigData(hsd->Instance, &config);
 8001980:	f001 fad8 	bl	8002f34 <SDIO_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001984:	6828      	ldr	r0, [r5, #0]
 8001986:	f001 fc24 	bl	80031d2 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 800198a:	4604      	mov	r4, r0
 800198c:	b960      	cbnz	r0, 80019a8 <SD_FindSCR+0x74>
 800198e:	4607      	mov	r7, r0
  {
    return errorstate;
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001990:	f240 482a 	movw	r8, #1066	; 0x42a
 8001994:	6828      	ldr	r0, [r5, #0]
 8001996:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001998:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800199c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800199e:	d007      	beq.n	80019b0 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80019a0:	0719      	lsls	r1, r3, #28
 80019a2:	d518      	bpl.n	80019d6 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80019a4:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80019a6:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
      ((tempscr[1U] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1U] & SDMMC_24TO31BITS) >> 24U);
  }

  return HAL_SD_ERROR_NONE;
}
 80019a8:	4620      	mov	r0, r4
 80019aa:	b009      	add	sp, #36	; 0x24
 80019ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80019b0:	029b      	lsls	r3, r3, #10
 80019b2:	d507      	bpl.n	80019c4 <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80019b4:	f001 fa00 	bl	8002db8 <SDIO_ReadFIFO>
 80019b8:	ab08      	add	r3, sp, #32
 80019ba:	eb03 0387 	add.w	r3, r3, r7, lsl #2
      index++;
 80019be:	3701      	adds	r7, #1
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80019c0:	f843 0c20 	str.w	r0, [r3, #-32]
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80019c4:	f7fe fdf0 	bl	80005a8 <HAL_GetTick>
 80019c8:	eba0 0009 	sub.w	r0, r0, r9
 80019cc:	3001      	adds	r0, #1
 80019ce:	d1e1      	bne.n	8001994 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 80019d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80019d4:	e7e8      	b.n	80019a8 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80019d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019d8:	079a      	lsls	r2, r3, #30
 80019da:	d501      	bpl.n	80019e0 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80019dc:	2402      	movs	r4, #2
 80019de:	e7e2      	b.n	80019a6 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80019e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80019e2:	069b      	lsls	r3, r3, #26
 80019e4:	d501      	bpl.n	80019ea <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80019e6:	2420      	movs	r4, #32
 80019e8:	e7dd      	b.n	80019a6 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80019ea:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80019ee:	6383      	str	r3, [r0, #56]	; 0x38
 80019f0:	9b00      	ldr	r3, [sp, #0]
 80019f2:	ba1b      	rev	r3, r3
    *(pSCR + 1U) = ((tempscr[0U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0U] & SDMMC_8TO15BITS) << 8U) |\
 80019f4:	6073      	str	r3, [r6, #4]
 80019f6:	9b01      	ldr	r3, [sp, #4]
 80019f8:	ba1b      	rev	r3, r3
    *(pSCR) = ((tempscr[1U] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1U] & SDMMC_8TO15BITS) << 8U) |\
 80019fa:	6033      	str	r3, [r6, #0]
  return HAL_SD_ERROR_NONE;
 80019fc:	e7d4      	b.n	80019a8 <SD_FindSCR+0x74>

080019fe <HAL_SD_ReadBlocks>:
{
 80019fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a02:	b087      	sub	sp, #28
 8001a04:	4604      	mov	r4, r0
 8001a06:	460d      	mov	r5, r1
 8001a08:	4691      	mov	r9, r2
 8001a0a:	4698      	mov	r8, r3
 8001a0c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8001a0e:	f7fe fdcb 	bl	80005a8 <HAL_GetTick>
 8001a12:	4607      	mov	r7, r0
  if(NULL == pData)
 8001a14:	b92d      	cbnz	r5, 8001a22 <HAL_SD_ReadBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001a16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001a1c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001a1e:	2001      	movs	r0, #1
 8001a20:	e010      	b.n	8001a44 <HAL_SD_ReadBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8001a22:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001a26:	b2c0      	uxtb	r0, r0
 8001a28:	2801      	cmp	r0, #1
 8001a2a:	f040 80c1 	bne.w	8001bb0 <HAL_SD_ReadBlocks+0x1b2>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a2e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a30:	eb09 0308 	add.w	r3, r9, r8
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a34:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a36:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a38:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001a3a:	d906      	bls.n	8001a4a <HAL_SD_ReadBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001a3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a42:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001a44:	b007      	add	sp, #28
 8001a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001a50:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a52:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001a54:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001a56:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001a58:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8001a5c:	bf18      	it	ne
 8001a5e:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001a62:	f001 fa7a 	bl	8002f5a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001a66:	b150      	cbz	r0, 8001a7e <HAL_SD_ReadBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001a6e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001a70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a72:	4318      	orrs	r0, r3
 8001a74:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001a76:	2001      	movs	r0, #1
 8001a78:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        return HAL_ERROR;
 8001a7c:	e7e2      	b.n	8001a44 <HAL_SD_ReadBlocks+0x46>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a82:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001a84:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001a88:	9301      	str	r3, [sp, #4]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001a8a:	9004      	str	r0, [sp, #16]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001a8c:	2390      	movs	r3, #144	; 0x90
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001a8e:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001a92:	f04f 0b02 	mov.w	fp, #2
    SDIO_ConfigData(hsd->Instance, &config);
 8001a96:	4669      	mov	r1, sp
 8001a98:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001a9a:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001a9c:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001aa0:	f8cd a014 	str.w	sl, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001aa4:	f001 fa46 	bl	8002f34 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8001aa8:	45d0      	cmp	r8, sl
 8001aaa:	d925      	bls.n	8001af8 <HAL_SD_ReadBlocks+0xfa>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001aac:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	6820      	ldr	r0, [r4, #0]
 8001ab4:	f001 fa81 	bl	8002fba <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001ab8:	2800      	cmp	r0, #0
 8001aba:	d1d5      	bne.n	8001a68 <HAL_SD_ReadBlocks+0x6a>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8001abc:	6820      	ldr	r0, [r4, #0]
 8001abe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ac0:	f413 7f95 	tst.w	r3, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001ac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8001ac6:	d01e      	beq.n	8001b06 <HAL_SD_ReadBlocks+0x108>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001ac8:	05db      	lsls	r3, r3, #23
 8001aca:	d509      	bpl.n	8001ae0 <HAL_SD_ReadBlocks+0xe2>
 8001acc:	f1b8 0f01 	cmp.w	r8, #1
 8001ad0:	d906      	bls.n	8001ae0 <HAL_SD_ReadBlocks+0xe2>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001ad2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d003      	beq.n	8001ae0 <HAL_SD_ReadBlocks+0xe2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001ad8:	f001 fab8 	bl	800304c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d1c3      	bne.n	8001a68 <HAL_SD_ReadBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001ae0:	6823      	ldr	r3, [r4, #0]
 8001ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae4:	0710      	lsls	r0, r2, #28
 8001ae6:	d530      	bpl.n	8001b4a <HAL_SD_ReadBlocks+0x14c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ae8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001aee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001af0:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001af4:	63a3      	str	r3, [r4, #56]	; 0x38
 8001af6:	e7be      	b.n	8001a76 <HAL_SD_ReadBlocks+0x78>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001af8:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8001afc:	4649      	mov	r1, r9
 8001afe:	6820      	ldr	r0, [r4, #0]
 8001b00:	f001 fa43 	bl	8002f8a <SDMMC_CmdReadSingleBlock>
 8001b04:	e7d8      	b.n	8001ab8 <HAL_SD_ReadBlocks+0xba>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF))
 8001b06:	041a      	lsls	r2, r3, #16
 8001b08:	d50b      	bpl.n	8001b22 <HAL_SD_ReadBlocks+0x124>
 8001b0a:	f1a5 0904 	sub.w	r9, r5, #4
 8001b0e:	f105 0a1c 	add.w	sl, r5, #28
          *(tempbuff + count) = SDIO_ReadFIFO(hsd->Instance);
 8001b12:	6820      	ldr	r0, [r4, #0]
 8001b14:	f001 f950 	bl	8002db8 <SDIO_ReadFIFO>
 8001b18:	f849 0f04 	str.w	r0, [r9, #4]!
        for(count = 0U; count < 8U; count++)
 8001b1c:	45d1      	cmp	r9, sl
 8001b1e:	d1f8      	bne.n	8001b12 <HAL_SD_ReadBlocks+0x114>
        tempbuff += 8U;
 8001b20:	3520      	adds	r5, #32
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001b22:	b966      	cbnz	r6, 8001b3e <HAL_SD_ReadBlocks+0x140>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b24:	6823      	ldr	r3, [r4, #0]
 8001b26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001b2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b32:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	e782      	b.n	8001a44 <HAL_SD_ReadBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001b3e:	f7fe fd33 	bl	80005a8 <HAL_GetTick>
 8001b42:	1bc0      	subs	r0, r0, r7
 8001b44:	4286      	cmp	r6, r0
 8001b46:	d8b9      	bhi.n	8001abc <HAL_SD_ReadBlocks+0xbe>
 8001b48:	e7ec      	b.n	8001b24 <HAL_SD_ReadBlocks+0x126>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b4c:	0791      	lsls	r1, r2, #30
 8001b4e:	d506      	bpl.n	8001b5e <HAL_SD_ReadBlocks+0x160>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b50:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001b56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	e7ca      	b.n	8001af4 <HAL_SD_ReadBlocks+0xf6>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b60:	0692      	lsls	r2, r2, #26
 8001b62:	d518      	bpl.n	8001b96 <HAL_SD_ReadBlocks+0x198>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b64:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	e7c0      	b.n	8001af4 <HAL_SD_ReadBlocks+0xf6>
      *tempbuff = SDIO_ReadFIFO(hsd->Instance);
 8001b72:	f001 f921 	bl	8002db8 <SDIO_ReadFIFO>
 8001b76:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001b7a:	b93e      	cbnz	r6, 8001b8c <HAL_SD_ReadBlocks+0x18e>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);        
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001b82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001b84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b8a:	e7b3      	b.n	8001af4 <HAL_SD_ReadBlocks+0xf6>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001b8c:	f7fe fd0c 	bl	80005a8 <HAL_GetTick>
 8001b90:	1bc0      	subs	r0, r0, r7
 8001b92:	4286      	cmp	r6, r0
 8001b94:	d9f2      	bls.n	8001b7c <HAL_SD_ReadBlocks+0x17e>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)))
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b9a:	f413 1300 	ands.w	r3, r3, #2097152	; 0x200000
 8001b9e:	d1e8      	bne.n	8001b72 <HAL_SD_ReadBlocks+0x174>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ba0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ba4:	6382      	str	r2, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8001bac:	4618      	mov	r0, r3
 8001bae:	e749      	b.n	8001a44 <HAL_SD_ReadBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001bb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bb2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bb6:	e731      	b.n	8001a1c <HAL_SD_ReadBlocks+0x1e>

08001bb8 <HAL_SD_WriteBlocks>:
{
 8001bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bbc:	b087      	sub	sp, #28
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	460d      	mov	r5, r1
 8001bc2:	4691      	mov	r9, r2
 8001bc4:	461e      	mov	r6, r3
 8001bc6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7fe fcee 	bl	80005a8 <HAL_GetTick>
 8001bcc:	4680      	mov	r8, r0
  if(NULL == pData)
 8001bce:	b92d      	cbnz	r5, 8001bdc <HAL_SD_WriteBlocks+0x24>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001bd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001bd6:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001bd8:	2001      	movs	r0, #1
 8001bda:	e010      	b.n	8001bfe <HAL_SD_WriteBlocks+0x46>
  if(hsd->State == HAL_SD_STATE_READY)
 8001bdc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001be0:	b2c0      	uxtb	r0, r0
 8001be2:	2801      	cmp	r0, #1
 8001be4:	f040 809d 	bne.w	8001d22 <HAL_SD_WriteBlocks+0x16a>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001be8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001bea:	eb09 0306 	add.w	r3, r9, r6
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bee:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001bf0:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf2:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001bf4:	d906      	bls.n	8001c04 <HAL_SD_WriteBlocks+0x4c>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001bf6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001bfe:	b007      	add	sp, #28
 8001c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001c04:	2303      	movs	r3, #3
 8001c06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8001c0a:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001c0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001c0e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001c10:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001c12:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8001c16:	bf18      	it	ne
 8001c18:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001c1c:	f001 f99d 	bl	8002f5a <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001c20:	b150      	cbz	r0, 8001c38 <HAL_SD_WriteBlocks+0x80>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001c22:	6823      	ldr	r3, [r4, #0]
 8001c24:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001c2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c2c:	4318      	orrs	r0, r3
 8001c2e:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001c30:	2001      	movs	r0, #1
 8001c32:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001c36:	e7e2      	b.n	8001bfe <HAL_SD_WriteBlocks+0x46>
    if(NumberOfBlocks > 1U)
 8001c38:	2e01      	cmp	r6, #1
 8001c3a:	d933      	bls.n	8001ca4 <HAL_SD_WriteBlocks+0xec>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8001c40:	4649      	mov	r1, r9
 8001c42:	6820      	ldr	r0, [r4, #0]
 8001c44:	f001 f9e9 	bl	800301a <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001c48:	2800      	cmp	r0, #0
 8001c4a:	d1ea      	bne.n	8001c22 <HAL_SD_WriteBlocks+0x6a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c50:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001c52:	0273      	lsls	r3, r6, #9
 8001c54:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001c56:	2390      	movs	r3, #144	; 0x90
 8001c58:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001c5a:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001c5c:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001c5e:	2301      	movs	r3, #1
    SDIO_ConfigData(hsd->Instance, &config);
 8001c60:	4669      	mov	r1, sp
 8001c62:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001c64:	9305      	str	r3, [sp, #20]
    SDIO_ConfigData(hsd->Instance, &config);
 8001c66:	f001 f965 	bl	8002f34 <SDIO_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8001c6a:	6820      	ldr	r0, [r4, #0]
 8001c6c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001c6e:	f413 7f8d 	tst.w	r3, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001c72:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8001c74:	d01d      	beq.n	8001cb2 <HAL_SD_WriteBlocks+0xfa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001c76:	05dd      	lsls	r5, r3, #23
 8001c78:	d508      	bpl.n	8001c8c <HAL_SD_WriteBlocks+0xd4>
 8001c7a:	2e01      	cmp	r6, #1
 8001c7c:	d906      	bls.n	8001c8c <HAL_SD_WriteBlocks+0xd4>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001c7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c80:	2b03      	cmp	r3, #3
 8001c82:	d003      	beq.n	8001c8c <HAL_SD_WriteBlocks+0xd4>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001c84:	f001 f9e2 	bl	800304c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d1ca      	bne.n	8001c22 <HAL_SD_WriteBlocks+0x6a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c90:	0711      	lsls	r1, r2, #28
 8001c92:	d52d      	bpl.n	8001cf0 <HAL_SD_WriteBlocks+0x138>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001c94:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001c98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001c9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001ca0:	63a3      	str	r3, [r4, #56]	; 0x38
 8001ca2:	e7c5      	b.n	8001c30 <HAL_SD_WriteBlocks+0x78>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001ca4:	2310      	movs	r3, #16
 8001ca6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8001ca8:	4649      	mov	r1, r9
 8001caa:	6820      	ldr	r0, [r4, #0]
 8001cac:	f001 f99d 	bl	8002fea <SDMMC_CmdWriteSingleBlock>
 8001cb0:	e7ca      	b.n	8001c48 <HAL_SD_WriteBlocks+0x90>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE))
 8001cb2:	045b      	lsls	r3, r3, #17
 8001cb4:	d509      	bpl.n	8001cca <HAL_SD_WriteBlocks+0x112>
 8001cb6:	46a9      	mov	r9, r5
 8001cb8:	3520      	adds	r5, #32
          SDIO_WriteFIFO(hsd->Instance, (tempbuff + count));
 8001cba:	4649      	mov	r1, r9
 8001cbc:	6820      	ldr	r0, [r4, #0]
 8001cbe:	f109 0904 	add.w	r9, r9, #4
 8001cc2:	f001 f87c 	bl	8002dbe <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001cc6:	454d      	cmp	r5, r9
 8001cc8:	d1f7      	bne.n	8001cba <HAL_SD_WriteBlocks+0x102>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001cca:	b957      	cbnz	r7, 8001ce2 <HAL_SD_WriteBlocks+0x12a>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);  
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001cd2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001cd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cd6:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8001cde:	2003      	movs	r0, #3
 8001ce0:	e78d      	b.n	8001bfe <HAL_SD_WriteBlocks+0x46>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001ce2:	f7fe fc61 	bl	80005a8 <HAL_GetTick>
 8001ce6:	eba0 0008 	sub.w	r0, r0, r8
 8001cea:	4287      	cmp	r7, r0
 8001cec:	d8bd      	bhi.n	8001c6a <HAL_SD_WriteBlocks+0xb2>
 8001cee:	e7ed      	b.n	8001ccc <HAL_SD_WriteBlocks+0x114>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf2:	0792      	lsls	r2, r2, #30
 8001cf4:	d506      	bpl.n	8001d04 <HAL_SD_WriteBlocks+0x14c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001cf6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001cfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8001cfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	e7cd      	b.n	8001ca0 <HAL_SD_WriteBlocks+0xe8>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001d04:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001d06:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001d0a:	f010 0010 	ands.w	r0, r0, #16
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001d10:	d003      	beq.n	8001d1a <HAL_SD_WriteBlocks+0x162>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001d12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	e7c2      	b.n	8001ca0 <HAL_SD_WriteBlocks+0xe8>
    hsd->State = HAL_SD_STATE_READY;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8001d20:	e76d      	b.n	8001bfe <HAL_SD_WriteBlocks+0x46>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001d22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d28:	e755      	b.n	8001bd6 <HAL_SD_WriteBlocks+0x1e>

08001d2a <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0U] & 0xFF000000U) >> 24U;
 8001d2a:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0U) >> 6U);
 8001d2c:	0f9a      	lsrs	r2, r3, #30
 8001d2e:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3CU) >> 2U);
 8001d30:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8001d34:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03U;
 8001d36:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8001d3a:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8001d3c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001d40:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8001d42:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001d46:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8001d48:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8001d4a:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1U] & 0xFF000000U) >> 24U;
 8001d4c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8001d4e:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4U);
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8001d54:	88ca      	ldrh	r2, [r1, #6]
{
 8001d56:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0U) >> 4U);
 8001d58:	b292      	uxth	r2, r2
 8001d5a:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8001d5e:	4322      	orrs	r2, r4
 8001d60:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0FU);
 8001d62:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8001d66:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1U] & 0x0000FF00U) >> 8U;
 8001d68:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80U) >> 7U);
 8001d6c:	09d4      	lsrs	r4, r2, #7
 8001d6e:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40U) >> 6U);
 8001d70:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8001d74:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20U) >> 5U);
 8001d76:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8001d7a:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10U) >> 4U);
 8001d7c:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8001d80:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0U; /*!< Reserved */
 8001d82:	2400      	movs	r4, #0
 8001d84:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8001d86:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d88:	2c00      	cmp	r4, #0
 8001d8a:	f040 8083 	bne.w	8001e94 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03U) << 10U;
 8001d8e:	0292      	lsls	r2, r2, #10
 8001d90:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001d94:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2U;
 8001d96:	690a      	ldr	r2, [r1, #16]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001da2:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp & 0xC0U) >> 6U;
 8001da4:	690b      	ldr	r3, [r1, #16]
 8001da6:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8001daa:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38U) >> 3U;
 8001dac:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8001db0:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07U);
 8001db2:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8001db6:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0U) >> 5U;
 8001db8:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8001dbc:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1CU) >> 2U;
 8001dbe:	f3c2 4382 	ubfx	r3, r2, #18, #3
 8001dc2:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03U) << 1U;
 8001dc4:	0bd3      	lsrs	r3, r2, #15
 8001dc6:	f003 0306 	and.w	r3, r3, #6
 8001dca:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80U) >> 7U;
 8001dcc:	7e0c      	ldrb	r4, [r1, #24]
 8001dce:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8001dd2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8001dd6:	4322      	orrs	r2, r4
 8001dd8:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001dda:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8001ddc:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8001dde:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1U << (pCSD->DeviceSizeMul + 2U));
 8001de0:	3402      	adds	r4, #2
 8001de2:	40a2      	lsls	r2, r4
 8001de4:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1U << (pCSD->RdBlockLen);
 8001de6:	7a0d      	ldrb	r5, [r1, #8]
 8001de8:	2401      	movs	r4, #1
 8001dea:	40ac      	lsls	r4, r5
 8001dec:	6584      	str	r4, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U); 
 8001dee:	0a64      	lsrs	r4, r4, #9
 8001df0:	4362      	muls	r2, r4
 8001df2:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8001df4:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001df8:	6602      	str	r2, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8001dfa:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40U) >> 6U;
 8001e04:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3FU) << 1U;
 8001e06:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2U] & 0x000000FFU);
 8001e08:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8001e0a:	7e8a      	ldrb	r2, [r1, #26]
 8001e0c:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 8001e10:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80U) >> 7U;
 8001e16:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7FU);
 8001e18:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3U] & 0xFF000000U) >> 24U);
 8001e1a:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80U) >> 7U;
 8001e1c:	0fda      	lsrs	r2, r3, #31
 8001e1e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60U) >> 5U;
 8001e20:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8001e24:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1CU) >> 2U;
 8001e26:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8001e2a:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03U) << 2U;
 8001e2c:	0d9a      	lsrs	r2, r3, #22
 8001e2e:	f002 020c 	and.w	r2, r2, #12
 8001e32:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0U) >> 6U;
 8001e34:	7fca      	ldrb	r2, [r1, #31]
 8001e36:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8001e3a:	4302      	orrs	r2, r0
 8001e3c:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20U) >> 5U;
 8001e3e:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8001e42:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0U;
 8001e46:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8001e48:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0U;
 8001e4c:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01U);
 8001e50:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80U) >> 7U;
 8001e54:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8001e58:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40U) >> 6U;
 8001e5c:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8001e60:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20U) >> 5U;
 8001e64:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8001e68:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10U) >> 4U;
 8001e6c:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8001e70:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0CU) >> 2U;
 8001e74:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8001e78:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03U);
 8001e7c:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001e80:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03U);
 8001e84:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFEU) >> 1U;
 8001e88:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1U;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8001e92:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8001e94:	2c01      	cmp	r4, #1
 8001e96:	d11a      	bne.n	8001ece <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3FU) << 16U;
 8001e98:	041b      	lsls	r3, r3, #16
 8001e9a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8001e9e:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001ea0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp << 8U);
 8001ea2:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2U] & 0xFF000000U) >> 24U);
 8001ea4:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8U);
 8001ea6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8001eaa:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8001eac:	690c      	ldr	r4, [r1, #16]
 8001eae:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8001eb2:	4322      	orrs	r2, r4
 8001eb4:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1U) * 1024U);
 8001eb6:	690a      	ldr	r2, [r1, #16]
 8001eb8:	0292      	lsls	r2, r2, #10
 8001eba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ebe:	6542      	str	r2, [r0, #84]	; 0x54
 8001ec0:	65c2      	str	r2, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512U;
 8001ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ec6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8001eca:	6582      	str	r2, [r0, #88]	; 0x58
 8001ecc:	e794      	b.n	8001df8 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);   
 8001ece:	6803      	ldr	r3, [r0, #0]
 8001ed0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001ed6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd30      	pop	{r4, r5, pc}

08001ee8 <HAL_SD_InitCard>:
{
 8001ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eea:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001eec:	2500      	movs	r5, #0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001eee:	2376      	movs	r3, #118	; 0x76
 8001ef0:	930c      	str	r3, [sp, #48]	; 0x30
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001ef2:	950a      	str	r5, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ef4:	950b      	str	r5, [sp, #44]	; 0x2c
  SDIO_Init(hsd->Instance, Init);
 8001ef6:	ab0a      	add	r3, sp, #40	; 0x28
{
 8001ef8:	4604      	mov	r4, r0
  SDIO_Init(hsd->Instance, Init);
 8001efa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001efe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
  __HAL_SD_DISABLE(hsd); 
 8001f02:	4e6f      	ldr	r6, [pc, #444]	; (80020c0 <HAL_SD_InitCard+0x1d8>)
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8001f04:	9507      	str	r5, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001f06:	9508      	str	r5, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001f08:	9509      	str	r5, [sp, #36]	; 0x24
  SDIO_Init(hsd->Instance, Init);
 8001f0a:	ab07      	add	r3, sp, #28
 8001f0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f0e:	6820      	ldr	r0, [r4, #0]
 8001f10:	f000 ff36 	bl	8002d80 <SDIO_Init>
  __HAL_SD_ENABLE(hsd);
 8001f14:	2701      	movs	r7, #1
  __HAL_SD_DISABLE(hsd); 
 8001f16:	6035      	str	r5, [r6, #0]
  SDIO_PowerState_ON(hsd->Instance);
 8001f18:	6820      	ldr	r0, [r4, #0]
 8001f1a:	f000 ff55 	bl	8002dc8 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8001f1e:	6037      	str	r7, [r6, #0]
  HAL_Delay(2U);
 8001f20:	2002      	movs	r0, #2
 8001f22:	f7fe fb47 	bl	80005b4 <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001f26:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8001f28:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8001f2a:	f001 f8c1 	bl	80030b0 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f2e:	4606      	mov	r6, r0
 8001f30:	b968      	cbnz	r0, 8001f4e <HAL_SD_InitCard+0x66>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	f001 f8e4 	bl	8003100 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001f38:	b380      	cbz	r0, 8001f9c <HAL_SD_InitCard+0xb4>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8001f3a:	64a6      	str	r6, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001f3c:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001f40:	9b06      	ldr	r3, [sp, #24]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	42ab      	cmp	r3, r5
 8001f46:	9206      	str	r2, [sp, #24]
 8001f48:	d108      	bne.n	8001f5c <HAL_SD_InitCard+0x74>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8001f4a:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    hsd->State = HAL_SD_STATE_READY;
 8001f4e:	2001      	movs	r0, #1
 8001f50:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001f54:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001f56:	430e      	orrs	r6, r1
 8001f58:	63a6      	str	r6, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001f5a:	e081      	b.n	8002060 <HAL_SD_InitCard+0x178>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	6820      	ldr	r0, [r4, #0]
 8001f60:	f001 f906 	bl	8003170 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001f64:	4601      	mov	r1, r0
 8001f66:	b110      	cbz	r0, 8001f6e <HAL_SD_InitCard+0x86>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8001f68:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8001f6c:	e7ef      	b.n	8001f4e <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8001f6e:	6820      	ldr	r0, [r4, #0]
 8001f70:	f001 f916 	bl	80031a0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001f74:	4601      	mov	r1, r0
 8001f76:	2800      	cmp	r0, #0
 8001f78:	d1f6      	bne.n	8001f68 <HAL_SD_InitCard+0x80>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001f7a:	6820      	ldr	r0, [r4, #0]
 8001f7c:	f000 ff3f 	bl	8002dfe <SDIO_GetResponse>
    while(validvoltage == 0U)
 8001f80:	2800      	cmp	r0, #0
 8001f82:	dadd      	bge.n	8001f40 <HAL_SD_InitCard+0x58>
    hsd->SdCard.CardType = CARD_SDSC;
 8001f84:	2300      	movs	r3, #0
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8001f86:	6463      	str	r3, [r4, #68]	; 0x44
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8001f88:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U) 
 8001f90:	f000 ff1e 	bl	8002dd0 <SDIO_GetPowerState>
 8001f94:	bb10      	cbnz	r0, 8001fdc <HAL_SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8001f96:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8001f9a:	e06b      	b.n	8002074 <HAL_SD_InitCard+0x18c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8001f9c:	64a7      	str	r7, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001f9e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8001fa2:	9b06      	ldr	r3, [sp, #24]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	42ab      	cmp	r3, r5
 8001fa8:	9206      	str	r2, [sp, #24]
 8001faa:	d0ce      	beq.n	8001f4a <HAL_SD_InitCard+0x62>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0U);
 8001fac:	2100      	movs	r1, #0
 8001fae:	6820      	ldr	r0, [r4, #0]
 8001fb0:	f001 f8de 	bl	8003170 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001fb4:	4606      	mov	r6, r0
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d1c9      	bne.n	8001f4e <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8001fba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fbe:	6820      	ldr	r0, [r4, #0]
 8001fc0:	f001 f8ee 	bl	80031a0 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8001fc4:	4606      	mov	r6, r0
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d1c1      	bne.n	8001f4e <HAL_SD_InitCard+0x66>
      response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001fca:	4601      	mov	r1, r0
 8001fcc:	6820      	ldr	r0, [r4, #0]
 8001fce:	f000 ff16 	bl	8002dfe <SDIO_GetResponse>
    while(validvoltage == 0U)
 8001fd2:	0fc3      	lsrs	r3, r0, #31
 8001fd4:	d0e5      	beq.n	8001fa2 <HAL_SD_InitCard+0xba>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8001fd6:	0042      	lsls	r2, r0, #1
 8001fd8:	d5d4      	bpl.n	8001f84 <HAL_SD_InitCard+0x9c>
 8001fda:	e7d4      	b.n	8001f86 <HAL_SD_InitCard+0x9e>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8001fdc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d01a      	beq.n	8002018 <HAL_SD_InitCard+0x130>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8001fe2:	6820      	ldr	r0, [r4, #0]
 8001fe4:	f001 f90d 	bl	8003202 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001fe8:	4605      	mov	r5, r0
 8001fea:	2800      	cmp	r0, #0
 8001fec:	d142      	bne.n	8002074 <HAL_SD_InitCard+0x18c>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001fee:	4601      	mov	r1, r0
 8001ff0:	6820      	ldr	r0, [r4, #0]
 8001ff2:	f000 ff04 	bl	8002dfe <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001ff6:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8001ff8:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8001ffa:	6820      	ldr	r0, [r4, #0]
 8001ffc:	f000 feff 	bl	8002dfe <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002000:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002002:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002004:	6820      	ldr	r0, [r4, #0]
 8002006:	f000 fefa 	bl	8002dfe <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800200a:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800200c:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800200e:	6820      	ldr	r0, [r4, #0]
 8002010:	f000 fef5 	bl	8002dfe <SDIO_GetResponse>
 8002014:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002018:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800201a:	2b03      	cmp	r3, #3
 800201c:	d122      	bne.n	8002064 <HAL_SD_InitCard+0x17c>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800201e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002020:	2b03      	cmp	r3, #3
 8002022:	d12e      	bne.n	8002082 <HAL_SD_InitCard+0x19a>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002024:	2104      	movs	r1, #4
 8002026:	6820      	ldr	r0, [r4, #0]
 8002028:	f000 fee9 	bl	8002dfe <SDIO_GetResponse>
 800202c:	0d00      	lsrs	r0, r0, #20
 800202e:	64e0      	str	r0, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 8002030:	a90d      	add	r1, sp, #52	; 0x34
 8002032:	4620      	mov	r0, r4
 8002034:	f7ff fe79 	bl	8001d2a <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002038:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800203a:	6820      	ldr	r0, [r4, #0]
 800203c:	0412      	lsls	r2, r2, #16
 800203e:	2300      	movs	r3, #0
 8002040:	f001 f81e 	bl	8003080 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002044:	4605      	mov	r5, r0
 8002046:	b9a8      	cbnz	r0, 8002074 <HAL_SD_InitCard+0x18c>
  SDIO_Init(hsd->Instance, hsd->Init);
 8002048:	f104 0310 	add.w	r3, r4, #16
 800204c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002050:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002054:	1d23      	adds	r3, r4, #4
 8002056:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002058:	6820      	ldr	r0, [r4, #0]
 800205a:	f000 fe91 	bl	8002d80 <SDIO_Init>
  return HAL_OK;
 800205e:	4628      	mov	r0, r5
}
 8002060:	b019      	add	sp, #100	; 0x64
 8002062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002064:	f10d 0116 	add.w	r1, sp, #22
 8002068:	6820      	ldr	r0, [r4, #0]
 800206a:	f001 f8f5 	bl	8003258 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800206e:	4605      	mov	r5, r0
 8002070:	2800      	cmp	r0, #0
 8002072:	d0d4      	beq.n	800201e <HAL_SD_InitCard+0x136>
    hsd->State = HAL_SD_STATE_READY;
 8002074:	2001      	movs	r0, #1
 8002076:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800207a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800207c:	431d      	orrs	r5, r3
 800207e:	63a5      	str	r5, [r4, #56]	; 0x38
 8002080:	e7ee      	b.n	8002060 <HAL_SD_InitCard+0x178>
    hsd->SdCard.RelCardAdd = sd_rca;
 8002082:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8002086:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002088:	6820      	ldr	r0, [r4, #0]
 800208a:	0409      	lsls	r1, r1, #16
 800208c:	f001 f8ce 	bl	800322c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002090:	4605      	mov	r5, r0
 8002092:	2800      	cmp	r0, #0
 8002094:	d1ee      	bne.n	8002074 <HAL_SD_InitCard+0x18c>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002096:	4601      	mov	r1, r0
 8002098:	6820      	ldr	r0, [r4, #0]
 800209a:	f000 feb0 	bl	8002dfe <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800209e:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80020a0:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80020a2:	6820      	ldr	r0, [r4, #0]
 80020a4:	f000 feab 	bl	8002dfe <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80020a8:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80020aa:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80020ac:	6820      	ldr	r0, [r4, #0]
 80020ae:	f000 fea6 	bl	8002dfe <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80020b2:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80020b4:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80020b6:	6820      	ldr	r0, [r4, #0]
 80020b8:	f000 fea1 	bl	8002dfe <SDIO_GetResponse>
 80020bc:	6720      	str	r0, [r4, #112]	; 0x70
 80020be:	e7b1      	b.n	8002024 <HAL_SD_InitCard+0x13c>
 80020c0:	422580a0 	.word	0x422580a0

080020c4 <HAL_SD_Init>:
{
 80020c4:	b510      	push	{r4, lr}
  if(hsd == NULL)
 80020c6:	4604      	mov	r4, r0
 80020c8:	b1a0      	cbz	r0, 80020f4 <HAL_SD_Init+0x30>
  if(hsd->State == HAL_SD_STATE_RESET)
 80020ca:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80020ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020d2:	b913      	cbnz	r3, 80020da <HAL_SD_Init+0x16>
    hsd->Lock = HAL_UNLOCKED;
 80020d4:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80020d6:	f003 faf1 	bl	80056bc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80020da:	2303      	movs	r3, #3
 80020dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff ff01 	bl	8001ee8 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e6:	2000      	movs	r0, #0
  hsd->State = HAL_SD_STATE_READY;
 80020e8:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ea:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80020ec:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80020ee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80020f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020f4:	2001      	movs	r0, #1
}
 80020f6:	bd10      	pop	{r4, pc}

080020f8 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80020f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80020fa:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80020fc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80020fe:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002100:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002102:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002104:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002106:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002108:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800210a:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800210c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800210e:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002110:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8002112:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002114:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002116:	61cb      	str	r3, [r1, #28]
}
 8002118:	2000      	movs	r0, #0
 800211a:	4770      	bx	lr

0800211c <HAL_SD_ConfigWideBusOperation>:
{
 800211c:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800211e:	2303      	movs	r3, #3
 8002120:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8002124:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002126:	2b03      	cmp	r3, #3
{
 8002128:	b08a      	sub	sp, #40	; 0x28
 800212a:	4604      	mov	r4, r0
 800212c:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800212e:	d002      	beq.n	8002136 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002130:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002134:	d103      	bne.n	800213e <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002136:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	e056      	b.n	80021ec <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800213e:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002142:	d12d      	bne.n	80021a0 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0U, 0U};
 8002144:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002146:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002148:	9104      	str	r1, [sp, #16]
 800214a:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800214c:	f000 fe57 	bl	8002dfe <SDIO_GetResponse>
 8002150:	0180      	lsls	r0, r0, #6
 8002152:	d420      	bmi.n	8002196 <HAL_SD_ConfigWideBusOperation+0x7a>
  errorstate = SD_FindSCR(hsd, scr);
 8002154:	a904      	add	r1, sp, #16
 8002156:	4620      	mov	r0, r4
 8002158:	f7ff fbec 	bl	8001934 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800215c:	b960      	cbnz	r0, 8002178 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800215e:	9b05      	ldr	r3, [sp, #20]
 8002160:	0359      	lsls	r1, r3, #13
 8002162:	d51a      	bpl.n	800219a <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002164:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002166:	6820      	ldr	r0, [r4, #0]
 8002168:	0409      	lsls	r1, r1, #16
 800216a:	f001 f801 	bl	8003170 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800216e:	b918      	cbnz	r0, 8002178 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002170:	2102      	movs	r1, #2
 8002172:	6820      	ldr	r0, [r4, #0]
 8002174:	f001 f8f4 	bl	8003360 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002178:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800217a:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 800217c:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800217e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002180:	2d00      	cmp	r5, #0
 8002182:	d035      	beq.n	80021f0 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002184:	6823      	ldr	r3, [r4, #0]
 8002186:	f240 52ff 	movw	r2, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 800218a:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800218c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800218e:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002192:	b00a      	add	sp, #40	; 0x28
 8002194:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002196:	4630      	mov	r0, r6
 8002198:	e7ee      	b.n	8002178 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800219a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800219e:	e7eb      	b.n	8002178 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80021a0:	bb09      	cbnz	r1, 80021e6 <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80021a2:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 80021a4:	9104      	str	r1, [sp, #16]
 80021a6:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80021a8:	f000 fe29 	bl	8002dfe <SDIO_GetResponse>
 80021ac:	0182      	lsls	r2, r0, #6
 80021ae:	d414      	bmi.n	80021da <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80021b0:	a904      	add	r1, sp, #16
 80021b2:	4620      	mov	r0, r4
 80021b4:	f7ff fbbe 	bl	8001934 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80021b8:	b960      	cbnz	r0, 80021d4 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80021ba:	9b05      	ldr	r3, [sp, #20]
 80021bc:	03db      	lsls	r3, r3, #15
 80021be:	d50f      	bpl.n	80021e0 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80021c0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80021c2:	6820      	ldr	r0, [r4, #0]
 80021c4:	0409      	lsls	r1, r1, #16
 80021c6:	f000 ffd3 	bl	8003170 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80021ca:	b918      	cbnz	r0, 80021d4 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80021cc:	4601      	mov	r1, r0
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	f001 f8c6 	bl	8003360 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80021d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80021d6:	4308      	orrs	r0, r1
 80021d8:	e7d0      	b.n	800217c <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80021da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80021de:	e7f9      	b.n	80021d4 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80021e0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80021e4:	e7f6      	b.n	80021d4 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80021e6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80021e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80021ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80021ee:	e7c6      	b.n	800217e <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80021f0:	6863      	ldr	r3, [r4, #4]
 80021f2:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80021f4:	68a3      	ldr	r3, [r4, #8]
 80021f6:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80021f8:	68e3      	ldr	r3, [r4, #12]
 80021fa:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80021fc:	6963      	ldr	r3, [r4, #20]
 80021fe:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002200:	69a3      	ldr	r3, [r4, #24]
 8002202:	9309      	str	r3, [sp, #36]	; 0x24
    Init.BusWide             = WideMode;
 8002204:	9607      	str	r6, [sp, #28]
    SDIO_Init(hsd->Instance, Init);
 8002206:	ab0a      	add	r3, sp, #40	; 0x28
 8002208:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800220c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8002210:	ab04      	add	r3, sp, #16
 8002212:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002214:	6820      	ldr	r0, [r4, #0]
 8002216:	f000 fdb3 	bl	8002d80 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 800221a:	2301      	movs	r3, #1
 800221c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002220:	4628      	mov	r0, r5
 8002222:	e7b6      	b.n	8002192 <HAL_SD_ConfigWideBusOperation+0x76>

08002224 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002224:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 8002226:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002228:	0409      	lsls	r1, r1, #16
{
 800222a:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800222c:	6800      	ldr	r0, [r0, #0]
 800222e:	f001 f867 	bl	8003300 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8002232:	4601      	mov	r1, r0
 8002234:	b928      	cbnz	r0, 8002242 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002236:	6820      	ldr	r0, [r4, #0]
 8002238:	f000 fde1 	bl	8002dfe <SDIO_GetResponse>
  return cardstate;
 800223c:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002240:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8002242:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002244:	4319      	orrs	r1, r3
 8002246:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8002248:	2000      	movs	r0, #0
 800224a:	e7f7      	b.n	800223c <HAL_SD_GetCardState+0x18>

0800224c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800224c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800224e:	4604      	mov	r4, r0
 8002250:	2800      	cmp	r0, #0
 8002252:	d036      	beq.n	80022c2 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002258:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800225c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002260:	b91b      	cbnz	r3, 800226a <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002262:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002266:	f003 fa69 	bl	800573c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800226a:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800226c:	68a0      	ldr	r0, [r4, #8]
 800226e:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002270:	2302      	movs	r3, #2
 8002272:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002276:	680b      	ldr	r3, [r1, #0]
 8002278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800227c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800227e:	6863      	ldr	r3, [r4, #4]
 8002280:	4303      	orrs	r3, r0
 8002282:	68e0      	ldr	r0, [r4, #12]
 8002284:	4303      	orrs	r3, r0
 8002286:	6920      	ldr	r0, [r4, #16]
 8002288:	4303      	orrs	r3, r0
 800228a:	6960      	ldr	r0, [r4, #20]
 800228c:	4303      	orrs	r3, r0
 800228e:	69e0      	ldr	r0, [r4, #28]
 8002290:	4303      	orrs	r3, r0
 8002292:	6a20      	ldr	r0, [r4, #32]
 8002294:	4303      	orrs	r3, r0
 8002296:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002298:	4303      	orrs	r3, r0
 800229a:	f402 7000 	and.w	r0, r2, #512	; 0x200
 800229e:	4303      	orrs	r3, r0
 80022a0:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80022a2:	0c12      	lsrs	r2, r2, #16
 80022a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022a6:	f002 0204 	and.w	r2, r2, #4
 80022aa:	431a      	orrs	r2, r3
 80022ac:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ae:	69cb      	ldr	r3, [r1, #28]
 80022b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022b4:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022b6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80022b8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ba:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022bc:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80022c0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022c2:	2001      	movs	r0, #1
}
 80022c4:	bd10      	pop	{r4, pc}
	...

080022c8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022c8:	6a03      	ldr	r3, [r0, #32]
 80022ca:	f023 0301 	bic.w	r3, r3, #1
 80022ce:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022d0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80022d2:	6842      	ldr	r2, [r0, #4]
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022d6:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022d8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022da:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80022de:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022e0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80022e2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80022e6:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80022e8:	4c0c      	ldr	r4, [pc, #48]	; (800231c <TIM_OC1_SetConfig+0x54>)
 80022ea:	42a0      	cmp	r0, r4
 80022ec:	d009      	beq.n	8002302 <TIM_OC1_SetConfig+0x3a>
 80022ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80022f2:	42a0      	cmp	r0, r4
 80022f4:	d005      	beq.n	8002302 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022f6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022f8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022fa:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80022fc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80022fe:	6203      	str	r3, [r0, #32]
} 
 8002300:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8002302:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8002304:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002306:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800230a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800230c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800230e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002312:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002314:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002318:	4322      	orrs	r2, r4
 800231a:	e7ec      	b.n	80022f6 <TIM_OC1_SetConfig+0x2e>
 800231c:	40010000 	.word	0x40010000

08002320 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002320:	6a03      	ldr	r3, [r0, #32]
 8002322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002326:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002328:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800232a:	6842      	ldr	r2, [r0, #4]
{
 800232c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800232e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002330:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002332:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002336:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002338:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800233a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800233e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002342:	4c0e      	ldr	r4, [pc, #56]	; (800237c <TIM_OC3_SetConfig+0x5c>)
 8002344:	42a0      	cmp	r0, r4
 8002346:	d009      	beq.n	800235c <TIM_OC3_SetConfig+0x3c>
 8002348:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800234c:	42a0      	cmp	r0, r4
 800234e:	d005      	beq.n	800235c <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002350:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002352:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002354:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002356:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002358:	6203      	str	r3, [r0, #32]
}
 800235a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800235c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800235e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002360:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002364:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002368:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800236a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800236e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002370:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002374:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002378:	e7ea      	b.n	8002350 <TIM_OC3_SetConfig+0x30>
 800237a:	bf00      	nop
 800237c:	40010000 	.word	0x40010000

08002380 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002380:	6a03      	ldr	r3, [r0, #32]
 8002382:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002386:	6203      	str	r3, [r0, #32]
{
 8002388:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800238a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800238c:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800238e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002390:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002392:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002396:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800239a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800239c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023a0:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80023a4:	4d09      	ldr	r5, [pc, #36]	; (80023cc <TIM_OC4_SetConfig+0x4c>)
 80023a6:	42a8      	cmp	r0, r5
 80023a8:	d009      	beq.n	80023be <TIM_OC4_SetConfig+0x3e>
 80023aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023ae:	42a8      	cmp	r0, r5
 80023b0:	d005      	beq.n	80023be <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023b2:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80023b4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80023b6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80023b8:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ba:	6204      	str	r4, [r0, #32]
}
 80023bc:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023be:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80023c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80023c4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80023c8:	e7f3      	b.n	80023b2 <TIM_OC4_SetConfig+0x32>
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000

080023d0 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d0:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80023d2:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80023d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 80023da:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80023dc:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80023de:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 80023e0:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80023e4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80023e6:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80023e8:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 80023ea:	d021      	beq.n	8002430 <TIM_SlaveTimer_SetConfig+0x60>
 80023ec:	d802      	bhi.n	80023f4 <TIM_SlaveTimer_SetConfig+0x24>
 80023ee:	2840      	cmp	r0, #64	; 0x40
 80023f0:	d010      	beq.n	8002414 <TIM_SlaveTimer_SetConfig+0x44>
 80023f2:	bd30      	pop	{r4, r5, pc}
 80023f4:	2860      	cmp	r0, #96	; 0x60
 80023f6:	d02d      	beq.n	8002454 <TIM_SlaveTimer_SetConfig+0x84>
 80023f8:	2870      	cmp	r0, #112	; 0x70
 80023fa:	d13d      	bne.n	8002478 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80023fc:	68ca      	ldr	r2, [r1, #12]
 80023fe:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8002400:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002402:	6909      	ldr	r1, [r1, #16]
 8002404:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002406:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800240a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800240e:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8002414:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002416:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002418:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800241a:	f022 0201 	bic.w	r2, r2, #1
 800241e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8002420:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002422:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002426:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800242a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800242c:	6218      	str	r0, [r3, #32]
    break;
 800242e:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002430:	6888      	ldr	r0, [r1, #8]
 8002432:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8002434:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002436:	6a1c      	ldr	r4, [r3, #32]
 8002438:	f024 0401 	bic.w	r4, r4, #1
 800243c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800243e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002440:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002444:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002448:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800244c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800244e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002450:	6219      	str	r1, [r3, #32]
 8002452:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002454:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002456:	688c      	ldr	r4, [r1, #8]
 8002458:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800245a:	f020 0010 	bic.w	r0, r0, #16
 800245e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002460:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002462:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002464:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002468:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800246c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8002470:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002474:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002476:	621a      	str	r2, [r3, #32]
 8002478:	bd30      	pop	{r4, r5, pc}

0800247a <HAL_TIM_OC_MspInit>:
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_IC_MspInit>:
 800247c:	4770      	bx	lr

0800247e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800247e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002482:	2b01      	cmp	r3, #1
{
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800248a:	d01c      	beq.n	80024c6 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8002490:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002492:	2201      	movs	r2, #1
 8002494:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8002498:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800249a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800249e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80024a2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80024a4:	680a      	ldr	r2, [r1, #0]
 80024a6:	2a40      	cmp	r2, #64	; 0x40
 80024a8:	d079      	beq.n	800259e <HAL_TIM_ConfigClockSource+0x120>
 80024aa:	d819      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x62>
 80024ac:	2a10      	cmp	r2, #16
 80024ae:	f000 8093 	beq.w	80025d8 <HAL_TIM_ConfigClockSource+0x15a>
 80024b2:	d80a      	bhi.n	80024ca <HAL_TIM_ConfigClockSource+0x4c>
 80024b4:	2a00      	cmp	r2, #0
 80024b6:	f000 8089 	beq.w	80025cc <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80024c0:	2300      	movs	r3, #0
 80024c2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80024c6:	4618      	mov	r0, r3
}
 80024c8:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80024ca:	2a20      	cmp	r2, #32
 80024cc:	f000 808a 	beq.w	80025e4 <HAL_TIM_ConfigClockSource+0x166>
 80024d0:	2a30      	cmp	r2, #48	; 0x30
 80024d2:	d1f2      	bne.n	80024ba <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 80024d4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80024d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80024da:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80024de:	e036      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80024e0:	2a70      	cmp	r2, #112	; 0x70
 80024e2:	d036      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0xd4>
 80024e4:	d81b      	bhi.n	800251e <HAL_TIM_ConfigClockSource+0xa0>
 80024e6:	2a50      	cmp	r2, #80	; 0x50
 80024e8:	d042      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0xf2>
 80024ea:	2a60      	cmp	r2, #96	; 0x60
 80024ec:	d1e5      	bne.n	80024ba <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024ee:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80024f0:	684d      	ldr	r5, [r1, #4]
 80024f2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024f4:	f024 0410 	bic.w	r4, r4, #16
 80024f8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024fa:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80024fc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024fe:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002502:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002506:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800250a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800250e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002510:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002512:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002514:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002518:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800251c:	e017      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800251e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002522:	d011      	beq.n	8002548 <HAL_TIM_ConfigClockSource+0xca>
 8002524:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002528:	d1c7      	bne.n	80024ba <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800252a:	688a      	ldr	r2, [r1, #8]
 800252c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800252e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002530:	68c9      	ldr	r1, [r1, #12]
 8002532:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002534:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002538:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800253c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800253e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002546:	e002      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	e7b3      	b.n	80024ba <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002552:	688a      	ldr	r2, [r1, #8]
 8002554:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002556:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002558:	68c9      	ldr	r1, [r1, #12]
 800255a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800255c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002560:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002564:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002566:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002568:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800256a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800256e:	e7ee      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002570:	684c      	ldr	r4, [r1, #4]
 8002572:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002574:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002576:	6a1d      	ldr	r5, [r3, #32]
 8002578:	f025 0501 	bic.w	r5, r5, #1
 800257c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800257e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002580:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002584:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002588:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800258c:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800258e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002590:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002592:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002594:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002598:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 800259c:	e7d7      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800259e:	684c      	ldr	r4, [r1, #4]
 80025a0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80025a2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a4:	6a1d      	ldr	r5, [r3, #32]
 80025a6:	f025 0501 	bic.w	r5, r5, #1
 80025aa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80025ac:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ae:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80025ba:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80025bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025be:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80025c0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025c6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80025ca:	e7c0      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80025cc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025d2:	f042 0207 	orr.w	r2, r2, #7
 80025d6:	e7ba      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80025d8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025de:	f042 0217 	orr.w	r2, r2, #23
 80025e2:	e7b4      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80025e4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80025e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80025ea:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80025ee:	e7ae      	b.n	800254e <HAL_TIM_ConfigClockSource+0xd0>

080025f0 <HAL_TIM_SlaveConfigSynchronization>:
{
 80025f0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80025f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025f6:	2b01      	cmp	r3, #1
{
 80025f8:	4604      	mov	r4, r0
 80025fa:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80025fe:	d015      	beq.n	800262c <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8002600:	2501      	movs	r5, #1
 8002602:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002606:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800260a:	f7ff fee1 	bl	80023d0 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800260e:	6823      	ldr	r3, [r4, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002616:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002618:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 800261a:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800261c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002620:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002622:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8002626:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 800262a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 800262c:	4618      	mov	r0, r3
} 
 800262e:	bd38      	pop	{r3, r4, r5, pc}

08002630 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002630:	4a2e      	ldr	r2, [pc, #184]	; (80026ec <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002632:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002634:	4290      	cmp	r0, r2
 8002636:	d012      	beq.n	800265e <TIM_Base_SetConfig+0x2e>
 8002638:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800263c:	d00f      	beq.n	800265e <TIM_Base_SetConfig+0x2e>
 800263e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002642:	4290      	cmp	r0, r2
 8002644:	d00b      	beq.n	800265e <TIM_Base_SetConfig+0x2e>
 8002646:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800264a:	4290      	cmp	r0, r2
 800264c:	d007      	beq.n	800265e <TIM_Base_SetConfig+0x2e>
 800264e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002652:	4290      	cmp	r0, r2
 8002654:	d003      	beq.n	800265e <TIM_Base_SetConfig+0x2e>
 8002656:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800265a:	4290      	cmp	r0, r2
 800265c:	d11d      	bne.n	800269a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800265e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002664:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002666:	4a21      	ldr	r2, [pc, #132]	; (80026ec <TIM_Base_SetConfig+0xbc>)
 8002668:	4290      	cmp	r0, r2
 800266a:	d104      	bne.n	8002676 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800266e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002672:	4313      	orrs	r3, r2
 8002674:	e028      	b.n	80026c8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002676:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800267a:	d0f7      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 800267c:	4a1c      	ldr	r2, [pc, #112]	; (80026f0 <TIM_Base_SetConfig+0xc0>)
 800267e:	4290      	cmp	r0, r2
 8002680:	d0f4      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 8002682:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002686:	4290      	cmp	r0, r2
 8002688:	d0f0      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 800268a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800268e:	4290      	cmp	r0, r2
 8002690:	d0ec      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 8002692:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002696:	4290      	cmp	r0, r2
 8002698:	d0e8      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 800269a:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <TIM_Base_SetConfig+0xc4>)
 800269c:	4290      	cmp	r0, r2
 800269e:	d0e5      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 80026a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026a4:	4290      	cmp	r0, r2
 80026a6:	d0e1      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 80026a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026ac:	4290      	cmp	r0, r2
 80026ae:	d0dd      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 80026b0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80026b4:	4290      	cmp	r0, r2
 80026b6:	d0d9      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 80026b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026bc:	4290      	cmp	r0, r2
 80026be:	d0d5      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
 80026c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026c4:	4290      	cmp	r0, r2
 80026c6:	d0d1      	beq.n	800266c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80026c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026ca:	688b      	ldr	r3, [r1, #8]
 80026cc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80026ce:	680b      	ldr	r3, [r1, #0]
 80026d0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <TIM_Base_SetConfig+0xbc>)
 80026d4:	4298      	cmp	r0, r3
 80026d6:	d006      	beq.n	80026e6 <TIM_Base_SetConfig+0xb6>
 80026d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026dc:	4298      	cmp	r0, r3
 80026de:	d002      	beq.n	80026e6 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80026e0:	2301      	movs	r3, #1
 80026e2:	6143      	str	r3, [r0, #20]
}
 80026e4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80026e6:	690b      	ldr	r3, [r1, #16]
 80026e8:	6303      	str	r3, [r0, #48]	; 0x30
 80026ea:	e7f9      	b.n	80026e0 <TIM_Base_SetConfig+0xb0>
 80026ec:	40010000 	.word	0x40010000
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40014000 	.word	0x40014000

080026f8 <HAL_TIM_Base_Init>:
{ 
 80026f8:	b510      	push	{r4, lr}
  if(htim == NULL)
 80026fa:	4604      	mov	r4, r0
 80026fc:	b1a0      	cbz	r0, 8002728 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80026fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002702:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002706:	b91b      	cbnz	r3, 8002710 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002708:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800270c:	f003 f84a 	bl	80057a4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002710:	2302      	movs	r3, #2
 8002712:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002716:	6820      	ldr	r0, [r4, #0]
 8002718:	1d21      	adds	r1, r4, #4
 800271a:	f7ff ff89 	bl	8002630 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800271e:	2301      	movs	r3, #1
 8002720:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002724:	2000      	movs	r0, #0
 8002726:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002728:	2001      	movs	r0, #1
}
 800272a:	bd10      	pop	{r4, pc}

0800272c <HAL_TIM_OC_Init>:
{
 800272c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800272e:	4604      	mov	r4, r0
 8002730:	b1a0      	cbz	r0, 800275c <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002732:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002736:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800273a:	b91b      	cbnz	r3, 8002744 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800273c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8002740:	f7ff fe9b 	bl	800247a <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002744:	2302      	movs	r3, #2
 8002746:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	1d21      	adds	r1, r4, #4
 800274e:	f7ff ff6f 	bl	8002630 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002752:	2301      	movs	r3, #1
 8002754:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002758:	2000      	movs	r0, #0
 800275a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800275c:	2001      	movs	r0, #1
}
 800275e:	bd10      	pop	{r4, pc}

08002760 <HAL_TIM_IC_Init>:
{
 8002760:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002762:	4604      	mov	r4, r0
 8002764:	b1a0      	cbz	r0, 8002790 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002766:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800276a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800276e:	b91b      	cbnz	r3, 8002778 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002770:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8002774:	f7ff fe82 	bl	800247c <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 8002778:	2302      	movs	r3, #2
 800277a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	1d21      	adds	r1, r4, #4
 8002782:	f7ff ff55 	bl	8002630 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002786:	2301      	movs	r3, #1
 8002788:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800278c:	2000      	movs	r0, #0
 800278e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002790:	2001      	movs	r0, #1
}
 8002792:	bd10      	pop	{r4, pc}

08002794 <TIM_TI1_SetConfig>:
{
 8002794:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002796:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002798:	4e1a      	ldr	r6, [pc, #104]	; (8002804 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800279a:	f024 0401 	bic.w	r4, r4, #1
 800279e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80027a2:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80027a4:	42b0      	cmp	r0, r6
 80027a6:	f024 0403 	bic.w	r4, r4, #3
 80027aa:	d01a      	beq.n	80027e2 <TIM_TI1_SetConfig+0x4e>
 80027ac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80027b0:	d017      	beq.n	80027e2 <TIM_TI1_SetConfig+0x4e>
 80027b2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80027b6:	42b0      	cmp	r0, r6
 80027b8:	d013      	beq.n	80027e2 <TIM_TI1_SetConfig+0x4e>
 80027ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027be:	42b0      	cmp	r0, r6
 80027c0:	d00f      	beq.n	80027e2 <TIM_TI1_SetConfig+0x4e>
 80027c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80027c6:	42b0      	cmp	r0, r6
 80027c8:	d00b      	beq.n	80027e2 <TIM_TI1_SetConfig+0x4e>
 80027ca:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80027ce:	42b0      	cmp	r0, r6
 80027d0:	d007      	beq.n	80027e2 <TIM_TI1_SetConfig+0x4e>
 80027d2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80027d6:	42b0      	cmp	r0, r6
 80027d8:	d003      	beq.n	80027e2 <TIM_TI1_SetConfig+0x4e>
 80027da:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80027de:	42b0      	cmp	r0, r6
 80027e0:	d10d      	bne.n	80027fe <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 80027e2:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027e4:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027e6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027ea:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027ec:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027f0:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80027f4:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80027f6:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 80027f8:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80027fa:	6201      	str	r1, [r0, #32]
}
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80027fe:	f044 0201 	orr.w	r2, r4, #1
 8002802:	e7ef      	b.n	80027e4 <TIM_TI1_SetConfig+0x50>
 8002804:	40010000 	.word	0x40010000

08002808 <HAL_TIM_IC_ConfigChannel>:
{
 8002808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800280a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800280e:	2b01      	cmp	r3, #1
{
 8002810:	4604      	mov	r4, r0
 8002812:	460d      	mov	r5, r1
 8002814:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002818:	d019      	beq.n	800284e <HAL_TIM_IC_ConfigChannel+0x46>
 800281a:	2301      	movs	r3, #1
 800281c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002820:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8002824:	b9a2      	cbnz	r2, 8002850 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8002826:	68cb      	ldr	r3, [r1, #12]
 8002828:	6820      	ldr	r0, [r4, #0]
 800282a:	c906      	ldmia	r1, {r1, r2}
 800282c:	f7ff ffb2 	bl	8002794 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002830:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002832:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002834:	699a      	ldr	r2, [r3, #24]
 8002836:	f022 020c 	bic.w	r2, r2, #12
 800283a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	430a      	orrs	r2, r1
 8002840:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002842:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002844:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002846:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800284a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800284e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002850:	2a04      	cmp	r2, #4
 8002852:	688e      	ldr	r6, [r1, #8]
 8002854:	6823      	ldr	r3, [r4, #0]
 8002856:	68e8      	ldr	r0, [r5, #12]
 8002858:	c982      	ldmia	r1, {r1, r7}
 800285a:	d11f      	bne.n	800289c <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800285c:	6a1a      	ldr	r2, [r3, #32]
 800285e:	f022 0210 	bic.w	r2, r2, #16
 8002862:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002864:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002866:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002868:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800286c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002870:	0300      	lsls	r0, r0, #12
 8002872:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002874:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002878:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800287a:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800287c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002880:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002884:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8002886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002888:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002890:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002892:	699a      	ldr	r2, [r3, #24]
 8002894:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002898:	619e      	str	r6, [r3, #24]
 800289a:	e7d2      	b.n	8002842 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 800289c:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800289e:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80028a0:	d11c      	bne.n	80028dc <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028a8:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80028aa:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80028ac:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 80028b0:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80028b2:	0100      	lsls	r0, r0, #4
 80028b4:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80028b6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80028ba:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80028bc:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80028be:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80028c2:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80028c6:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 80028c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80028ca:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	f022 020c 	bic.w	r2, r2, #12
 80028d2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028d8:	61de      	str	r6, [r3, #28]
 80028da:	e7b2      	b.n	8002842 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028dc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80028e2:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80028e4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80028e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80028ea:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80028ee:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80028f0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80028f4:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80028f6:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80028f8:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80028fa:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80028fe:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002902:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002904:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002906:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800290e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002916:	e7df      	b.n	80028d8 <HAL_TIM_IC_ConfigChannel+0xd0>

08002918 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002918:	6a03      	ldr	r3, [r0, #32]
 800291a:	f023 0310 	bic.w	r3, r3, #16
 800291e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002920:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002922:	6842      	ldr	r2, [r0, #4]
{
 8002924:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002926:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002928:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800292a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800292e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002932:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002934:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002938:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800293c:	4c0d      	ldr	r4, [pc, #52]	; (8002974 <TIM_OC2_SetConfig+0x5c>)
 800293e:	42a0      	cmp	r0, r4
 8002940:	d009      	beq.n	8002956 <TIM_OC2_SetConfig+0x3e>
 8002942:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002946:	42a0      	cmp	r0, r4
 8002948:	d005      	beq.n	8002956 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800294a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800294c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800294e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002950:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002952:	6203      	str	r3, [r0, #32]
}
 8002954:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002956:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002958:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800295a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800295e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002962:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002964:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002968:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800296a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800296e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8002972:	e7ea      	b.n	800294a <TIM_OC2_SetConfig+0x32>
 8002974:	40010000 	.word	0x40010000

08002978 <HAL_TIM_OC_ConfigChannel>:
{
 8002978:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 800297a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800297e:	2b01      	cmp	r3, #1
{
 8002980:	4604      	mov	r4, r0
 8002982:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8002986:	d018      	beq.n	80029ba <HAL_TIM_OC_ConfigChannel+0x42>
 8002988:	2301      	movs	r3, #1
 800298a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800298e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8002992:	461d      	mov	r5, r3
  switch (Channel)
 8002994:	2a0c      	cmp	r2, #12
 8002996:	d80b      	bhi.n	80029b0 <HAL_TIM_OC_ConfigChannel+0x38>
 8002998:	e8df f002 	tbb	[pc, r2]
 800299c:	0a0a0a07 	.word	0x0a0a0a07
 80029a0:	0a0a0a10 	.word	0x0a0a0a10
 80029a4:	0a0a0a14 	.word	0x0a0a0a14
 80029a8:	18          	.byte	0x18
 80029a9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029aa:	6820      	ldr	r0, [r4, #0]
 80029ac:	f7ff fc8c 	bl	80022c8 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 80029b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80029b2:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 80029b6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80029ba:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029bc:	6820      	ldr	r0, [r4, #0]
 80029be:	f7ff ffab 	bl	8002918 <TIM_OC2_SetConfig>
    break;
 80029c2:	e7f5      	b.n	80029b0 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029c4:	6820      	ldr	r0, [r4, #0]
 80029c6:	f7ff fcab 	bl	8002320 <TIM_OC3_SetConfig>
    break;
 80029ca:	e7f1      	b.n	80029b0 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029cc:	6820      	ldr	r0, [r4, #0]
 80029ce:	f7ff fcd7 	bl	8002380 <TIM_OC4_SetConfig>
    break;
 80029d2:	e7ed      	b.n	80029b0 <HAL_TIM_OC_ConfigChannel+0x38>

080029d4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 80029d4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029d8:	2b01      	cmp	r3, #1
{
 80029da:	b510      	push	{r4, lr}
 80029dc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80029e0:	d018      	beq.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80029e2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80029e6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80029e8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80029ea:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80029ec:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80029ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029f2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	4322      	orrs	r2, r4
 80029f8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a00:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002a14:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8002a16:	bd10      	pop	{r4, pc}

08002a18 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002a18:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d01f      	beq.n	8002a60 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a20:	68cb      	ldr	r3, [r1, #12]
 8002a22:	688a      	ldr	r2, [r1, #8]
 8002a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a2a:	684a      	ldr	r2, [r1, #4]
 8002a2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a32:	680a      	ldr	r2, [r1, #0]
 8002a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a3a:	690a      	ldr	r2, [r1, #16]
 8002a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a42:	694a      	ldr	r2, [r1, #20]
 8002a44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a4a:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002a50:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a52:	6802      	ldr	r2, [r0, #0]
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8002a56:	2300      	movs	r3, #0
 8002a58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002a60:	2002      	movs	r0, #2
}
 8002a62:	4770      	bx	lr

08002a64 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002a68:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002a6a:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002a6c:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a6e:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002a70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002a74:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002a76:	6133      	str	r3, [r6, #16]
{
 8002a78:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a7a:	6883      	ldr	r3, [r0, #8]
 8002a7c:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8002a7e:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a80:	4303      	orrs	r3, r0
 8002a82:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002a84:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a88:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002a8a:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002a92:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002a94:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002a96:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002a9c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a9e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002aa2:	6173      	str	r3, [r6, #20]
 8002aa4:	4b7a      	ldr	r3, [pc, #488]	; (8002c90 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aa6:	d17c      	bne.n	8002ba2 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002aa8:	429e      	cmp	r6, r3
 8002aaa:	d003      	beq.n	8002ab4 <UART_SetConfig+0x50>
 8002aac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ab0:	429e      	cmp	r6, r3
 8002ab2:	d144      	bne.n	8002b3e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002ab4:	f7fe fb44 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8002ab8:	2519      	movs	r5, #25
 8002aba:	fb05 f300 	mul.w	r3, r5, r0
 8002abe:	6860      	ldr	r0, [r4, #4]
 8002ac0:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002ac4:	0040      	lsls	r0, r0, #1
 8002ac6:	fbb3 f3f0 	udiv	r3, r3, r0
 8002aca:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ace:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ad2:	f7fe fb35 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8002ad6:	6863      	ldr	r3, [r4, #4]
 8002ad8:	4368      	muls	r0, r5
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	fbb0 f7f3 	udiv	r7, r0, r3
 8002ae0:	f7fe fb2e 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8002ae4:	6863      	ldr	r3, [r4, #4]
 8002ae6:	4368      	muls	r0, r5
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aee:	fbb3 f3f9 	udiv	r3, r3, r9
 8002af2:	fb09 7313 	mls	r3, r9, r3, r7
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	3332      	adds	r3, #50	; 0x32
 8002afa:	fbb3 f3f9 	udiv	r3, r3, r9
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002b04:	f7fe fb1c 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8002b08:	6862      	ldr	r2, [r4, #4]
 8002b0a:	4368      	muls	r0, r5
 8002b0c:	0052      	lsls	r2, r2, #1
 8002b0e:	fbb0 faf2 	udiv	sl, r0, r2
 8002b12:	f7fe fb15 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b16:	6863      	ldr	r3, [r4, #4]
 8002b18:	4368      	muls	r0, r5
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b20:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b24:	fb09 a313 	mls	r3, r9, r3, sl
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	3332      	adds	r3, #50	; 0x32
 8002b2c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b36:	443b      	add	r3, r7
 8002b38:	60b3      	str	r3, [r6, #8]
 8002b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b3e:	f7fe faef 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002b42:	2519      	movs	r5, #25
 8002b44:	fb05 f300 	mul.w	r3, r5, r0
 8002b48:	6860      	ldr	r0, [r4, #4]
 8002b4a:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b4e:	0040      	lsls	r0, r0, #1
 8002b50:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b54:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b58:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b5c:	f7fe fae0 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002b60:	6863      	ldr	r3, [r4, #4]
 8002b62:	4368      	muls	r0, r5
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fbb0 f7f3 	udiv	r7, r0, r3
 8002b6a:	f7fe fad9 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002b6e:	6863      	ldr	r3, [r4, #4]
 8002b70:	4368      	muls	r0, r5
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b78:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b7c:	fb09 7313 	mls	r3, r9, r3, r7
 8002b80:	00db      	lsls	r3, r3, #3
 8002b82:	3332      	adds	r3, #50	; 0x32
 8002b84:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002b8e:	f7fe fac7 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002b92:	6862      	ldr	r2, [r4, #4]
 8002b94:	4368      	muls	r0, r5
 8002b96:	0052      	lsls	r2, r2, #1
 8002b98:	fbb0 faf2 	udiv	sl, r0, r2
 8002b9c:	f7fe fac0 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	e7b9      	b.n	8002b16 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ba2:	429e      	cmp	r6, r3
 8002ba4:	d002      	beq.n	8002bac <UART_SetConfig+0x148>
 8002ba6:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <UART_SetConfig+0x230>)
 8002ba8:	429e      	cmp	r6, r3
 8002baa:	d140      	bne.n	8002c2e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002bac:	f7fe fac8 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8002bb0:	6867      	ldr	r7, [r4, #4]
 8002bb2:	2519      	movs	r5, #25
 8002bb4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002bb8:	fb05 f300 	mul.w	r3, r5, r0
 8002bbc:	00bf      	lsls	r7, r7, #2
 8002bbe:	fbb3 f3f7 	udiv	r3, r3, r7
 8002bc2:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bc6:	011f      	lsls	r7, r3, #4
 8002bc8:	f7fe faba 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8002bcc:	6863      	ldr	r3, [r4, #4]
 8002bce:	4368      	muls	r0, r5
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	fbb0 f8f3 	udiv	r8, r0, r3
 8002bd6:	f7fe fab3 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8002bda:	6863      	ldr	r3, [r4, #4]
 8002bdc:	4368      	muls	r0, r5
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002be4:	fbb3 f3f9 	udiv	r3, r3, r9
 8002be8:	fb09 8313 	mls	r3, r9, r3, r8
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	3332      	adds	r3, #50	; 0x32
 8002bf0:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bf4:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002bf8:	f7fe faa2 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
 8002bfc:	6862      	ldr	r2, [r4, #4]
 8002bfe:	4368      	muls	r0, r5
 8002c00:	0092      	lsls	r2, r2, #2
 8002c02:	fbb0 faf2 	udiv	sl, r0, r2
 8002c06:	f7fe fa9b 	bl	8001140 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002c0a:	6863      	ldr	r3, [r4, #4]
 8002c0c:	4368      	muls	r0, r5
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c14:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c18:	fb09 a313 	mls	r3, r9, r3, sl
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	3332      	adds	r3, #50	; 0x32
 8002c20:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	ea43 0308 	orr.w	r3, r3, r8
 8002c2c:	e783      	b.n	8002b36 <UART_SetConfig+0xd2>
 8002c2e:	f7fe fa77 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002c32:	6867      	ldr	r7, [r4, #4]
 8002c34:	2519      	movs	r5, #25
 8002c36:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002c3a:	fb05 f300 	mul.w	r3, r5, r0
 8002c3e:	00bf      	lsls	r7, r7, #2
 8002c40:	fbb3 f3f7 	udiv	r3, r3, r7
 8002c44:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c48:	011f      	lsls	r7, r3, #4
 8002c4a:	f7fe fa69 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002c4e:	6863      	ldr	r3, [r4, #4]
 8002c50:	4368      	muls	r0, r5
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	fbb0 f8f3 	udiv	r8, r0, r3
 8002c58:	f7fe fa62 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002c5c:	6863      	ldr	r3, [r4, #4]
 8002c5e:	4368      	muls	r0, r5
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c66:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c6a:	fb09 8313 	mls	r3, r9, r3, r8
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	3332      	adds	r3, #50	; 0x32
 8002c72:	fbb3 f3f9 	udiv	r3, r3, r9
 8002c76:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002c7a:	f7fe fa51 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002c7e:	6862      	ldr	r2, [r4, #4]
 8002c80:	4368      	muls	r0, r5
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	fbb0 faf2 	udiv	sl, r0, r2
 8002c88:	f7fe fa4a 	bl	8001120 <HAL_RCC_GetPCLK1Freq>
 8002c8c:	e7bd      	b.n	8002c0a <UART_SetConfig+0x1a6>
 8002c8e:	bf00      	nop
 8002c90:	40011000 	.word	0x40011000
 8002c94:	40011400 	.word	0x40011400

08002c98 <HAL_UART_Init>:
{
 8002c98:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002c9a:	4604      	mov	r4, r0
 8002c9c:	b340      	cbz	r0, 8002cf0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c9e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ca2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002ca6:	b91b      	cbnz	r3, 8002cb0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002ca8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002cac:	f002 fe6c 	bl	8005988 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002cb0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002cb2:	2324      	movs	r3, #36	; 0x24
 8002cb4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002cb8:	68d3      	ldr	r3, [r2, #12]
 8002cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cbe:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f7ff fecf 	bl	8002a64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cde:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002ce2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002ce6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002cea:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002cee:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cf0:	2001      	movs	r0, #1
}
 8002cf2:	bd10      	pop	{r4, pc}

08002cf4 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <SDMMC_GetCmdResp2+0x48>)
 8002cf6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d00:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d04:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002d06:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002d0a:	d314      	bcc.n	8002d36 <SDMMC_GetCmdResp2+0x42>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002d0c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002d0e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002d12:	d0f8      	beq.n	8002d06 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002d14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d16:	075b      	lsls	r3, r3, #29
 8002d18:	d503      	bpl.n	8002d22 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002d1a:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002d1c:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002d22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d24:	f013 0301 	ands.w	r3, r3, #1
 8002d28:	d001      	beq.n	8002d2e <SDMMC_GetCmdResp2+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e7f6      	b.n	8002d1c <SDMMC_GetCmdResp2+0x28>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002d2e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002d32:	6382      	str	r2, [r0, #56]	; 0x38
 8002d34:	e7f3      	b.n	8002d1e <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8002d36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d3a:	e7f0      	b.n	8002d1e <SDMMC_GetCmdResp2+0x2a>
 8002d3c:	2000000c 	.word	0x2000000c

08002d40 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <SDMMC_GetCmdResp3+0x3c>)
 8002d42:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d50:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002d52:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8002d56:	d30e      	bcc.n	8002d76 <SDMMC_GetCmdResp3+0x36>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002d58:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002d5a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002d5e:	d0f8      	beq.n	8002d52 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002d60:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002d62:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002d66:	bf15      	itete	ne
 8002d68:	2304      	movne	r3, #4
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002d6a:	f240 52ff 	movweq	r2, #1535	; 0x5ff
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002d6e:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002d70:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002d72:	4618      	mov	r0, r3
 8002d74:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002d76:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002d7a:	4770      	bx	lr
 8002d7c:	2000000c 	.word	0x2000000c

08002d80 <SDIO_Init>:
{
 8002d80:	b084      	sub	sp, #16
 8002d82:	b510      	push	{r4, lr}
 8002d84:	ac03      	add	r4, sp, #12
 8002d86:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002d8a:	9904      	ldr	r1, [sp, #16]
 8002d8c:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002d8e:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8002d90:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 8002d92:	9905      	ldr	r1, [sp, #20]
 8002d94:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8002d96:	9906      	ldr	r1, [sp, #24]
 8002d98:	430b      	orrs	r3, r1
             Init.BusWide             |\
 8002d9a:	9907      	ldr	r1, [sp, #28]
 8002d9c:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 8002d9e:	9908      	ldr	r1, [sp, #32]
}
 8002da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002da4:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.HardwareFlowControl |\
 8002da8:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002daa:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002dae:	4313      	orrs	r3, r2
 8002db0:	6043      	str	r3, [r0, #4]
}
 8002db2:	b004      	add	sp, #16
 8002db4:	2000      	movs	r0, #0
 8002db6:	4770      	bx	lr

08002db8 <SDIO_ReadFIFO>:
 8002db8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002dbc:	4770      	bx	lr

08002dbe <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8002dbe:	680b      	ldr	r3, [r1, #0]
 8002dc0:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	4770      	bx	lr

08002dc8 <SDIO_PowerState_ON>:
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	6003      	str	r3, [r0, #0]
}
 8002dcc:	2000      	movs	r0, #0
 8002dce:	4770      	bx	lr

08002dd0 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002dd0:	6800      	ldr	r0, [r0, #0]
}
 8002dd2:	f000 0003 	and.w	r0, r0, #3
 8002dd6:	4770      	bx	lr

08002dd8 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8002dd8:	680b      	ldr	r3, [r1, #0]
{
 8002dda:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 8002ddc:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002dde:	688c      	ldr	r4, [r1, #8]
 8002de0:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002de2:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002de4:	4323      	orrs	r3, r4
                       Command->Response         |\
 8002de6:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 8002de8:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 8002dea:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002dec:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 8002df0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8002df2:	f022 020f 	bic.w	r2, r2, #15
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60c3      	str	r3, [r0, #12]
}
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	bd10      	pop	{r4, pc}

08002dfe <SDIO_GetResponse>:
{
 8002dfe:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8002e00:	3014      	adds	r0, #20
 8002e02:	4401      	add	r1, r0
  __IO uint32_t tmp = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDIOx->RESP1) + Response;
 8002e08:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8002e0a:	9b01      	ldr	r3, [sp, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
}  
 8002e0e:	b002      	add	sp, #8
 8002e10:	4770      	bx	lr
	...

08002e14 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e14:	4b45      	ldr	r3, [pc, #276]	; (8002f2c <SDMMC_GetCmdResp1+0x118>)
{
 8002e16:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8002e1e:	fbb3 f3f4 	udiv	r3, r3, r4
 8002e22:	435a      	muls	r2, r3
    if (count-- == 0U)
 8002e24:	2a00      	cmp	r2, #0
 8002e26:	d04a      	beq.n	8002ebe <SDMMC_GetCmdResp1+0xaa>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8002e28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e2a:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002e2e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8002e32:	d0f7      	beq.n	8002e24 <SDMMC_GetCmdResp1+0x10>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e34:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e36:	075c      	lsls	r4, r3, #29
 8002e38:	d503      	bpl.n	8002e42 <SDMMC_GetCmdResp1+0x2e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e3a:	2304      	movs	r3, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e3c:	6383      	str	r3, [r0, #56]	; 0x38
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e42:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e44:	f013 0301 	ands.w	r3, r3, #1
 8002e48:	d001      	beq.n	8002e4e <SDMMC_GetCmdResp1+0x3a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e7f6      	b.n	8002e3c <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDIOx->RESPCMD);
 8002e4e:	6902      	ldr	r2, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	4291      	cmp	r1, r2
 8002e54:	d136      	bne.n	8002ec4 <SDMMC_GetCmdResp1+0xb0>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002e56:	f240 52ff 	movw	r2, #1535	; 0x5ff
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002e5a:	4619      	mov	r1, r3
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 8002e5c:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002e5e:	f7ff ffce 	bl	8002dfe <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <SDMMC_GetCmdResp1+0x11c>)
 8002e64:	4003      	ands	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0e9      	beq.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	db2c      	blt.n	8002ec8 <SDMMC_GetCmdResp1+0xb4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002e6e:	0042      	lsls	r2, r0, #1
 8002e70:	d42d      	bmi.n	8002ece <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002e72:	0084      	lsls	r4, r0, #2
 8002e74:	d42d      	bmi.n	8002ed2 <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002e76:	00c1      	lsls	r1, r0, #3
 8002e78:	d42d      	bmi.n	8002ed6 <SDMMC_GetCmdResp1+0xc2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002e7a:	0102      	lsls	r2, r0, #4
 8002e7c:	d42e      	bmi.n	8002edc <SDMMC_GetCmdResp1+0xc8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002e7e:	0144      	lsls	r4, r0, #5
 8002e80:	d42f      	bmi.n	8002ee2 <SDMMC_GetCmdResp1+0xce>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002e82:	01c1      	lsls	r1, r0, #7
 8002e84:	d430      	bmi.n	8002ee8 <SDMMC_GetCmdResp1+0xd4>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002e86:	0202      	lsls	r2, r0, #8
 8002e88:	d431      	bmi.n	8002eee <SDMMC_GetCmdResp1+0xda>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002e8a:	0244      	lsls	r4, r0, #9
 8002e8c:	d432      	bmi.n	8002ef4 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002e8e:	0281      	lsls	r1, r0, #10
 8002e90:	d433      	bmi.n	8002efa <SDMMC_GetCmdResp1+0xe6>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002e92:	02c2      	lsls	r2, r0, #11
 8002e94:	d434      	bmi.n	8002f00 <SDMMC_GetCmdResp1+0xec>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002e96:	0344      	lsls	r4, r0, #13
 8002e98:	d435      	bmi.n	8002f06 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002e9a:	0381      	lsls	r1, r0, #14
 8002e9c:	d436      	bmi.n	8002f0c <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002e9e:	03c2      	lsls	r2, r0, #15
 8002ea0:	d437      	bmi.n	8002f12 <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002ea2:	0404      	lsls	r4, r0, #16
 8002ea4:	d438      	bmi.n	8002f18 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002ea6:	0441      	lsls	r1, r0, #17
 8002ea8:	d439      	bmi.n	8002f1e <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002eaa:	0482      	lsls	r2, r0, #18
 8002eac:	d43a      	bmi.n	8002f24 <SDMMC_GetCmdResp1+0x110>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002eae:	f010 0f08 	tst.w	r0, #8
 8002eb2:	bf14      	ite	ne
 8002eb4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8002eb8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8002ebc:	e7bf      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8002ebe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ec2:	e7bc      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e7ba      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ecc:	e7b7      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002ece:	2340      	movs	r3, #64	; 0x40
 8002ed0:	e7b5      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002ed2:	2380      	movs	r3, #128	; 0x80
 8002ed4:	e7b3      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eda:	e7b0      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ee0:	e7ad      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee6:	e7aa      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002eec:	e7a7      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002eee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef2:	e7a4      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ef8:	e7a1      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002efa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002efe:	e79e      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8002f00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f04:	e79b      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002f06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f0a:	e798      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002f0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f10:	e795      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002f12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002f16:	e792      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002f18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f1c:	e78f      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002f1e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f22:	e78c      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8002f24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f28:	e789      	b.n	8002e3e <SDMMC_GetCmdResp1+0x2a>
 8002f2a:	bf00      	nop
 8002f2c:	2000000c 	.word	0x2000000c
 8002f30:	fdffe008 	.word	0xfdffe008

08002f34 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8002f34:	680b      	ldr	r3, [r1, #0]
{
 8002f36:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 8002f38:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8002f3a:	684b      	ldr	r3, [r1, #4]
 8002f3c:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002f3e:	68cc      	ldr	r4, [r1, #12]
 8002f40:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002f42:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002f44:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 8002f46:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 8002f48:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 8002f4a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 8002f4c:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002f4e:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8002f52:	4313      	orrs	r3, r2
 8002f54:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8002f56:	2000      	movs	r0, #0
 8002f58:	bd10      	pop	{r4, pc}

08002f5a <SDMMC_CmdBlockLength>:
{
 8002f5a:	b530      	push	{r4, r5, lr}
 8002f5c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f5e:	2340      	movs	r3, #64	; 0x40
 8002f60:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f62:	2300      	movs	r3, #0
{
 8002f64:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8002f66:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002f68:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f6a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f6c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f72:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002f74:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f76:	f7ff ff2f 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7e:	4621      	mov	r1, r4
 8002f80:	4628      	mov	r0, r5
 8002f82:	f7ff ff47 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 8002f86:	b007      	add	sp, #28
 8002f88:	bd30      	pop	{r4, r5, pc}

08002f8a <SDMMC_CmdReadSingleBlock>:
{
 8002f8a:	b530      	push	{r4, r5, lr}
 8002f8c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002f8e:	2340      	movs	r3, #64	; 0x40
 8002f90:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f92:	2300      	movs	r3, #0
{
 8002f94:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002f96:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002f98:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002f9a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002f9c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002fa4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fa6:	f7ff ff17 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fae:	4621      	mov	r1, r4
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	f7ff ff2f 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 8002fb6:	b007      	add	sp, #28
 8002fb8:	bd30      	pop	{r4, r5, pc}

08002fba <SDMMC_CmdReadMultiBlock>:
{
 8002fba:	b530      	push	{r4, r5, lr}
 8002fbc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002fbe:	2340      	movs	r3, #64	; 0x40
 8002fc0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fc2:	2300      	movs	r3, #0
{
 8002fc4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002fc6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002fc8:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002fca:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fcc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fd2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002fd4:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002fd6:	f7ff feff 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4621      	mov	r1, r4
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	f7ff ff17 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 8002fe6:	b007      	add	sp, #28
 8002fe8:	bd30      	pop	{r4, r5, pc}

08002fea <SDMMC_CmdWriteSingleBlock>:
{
 8002fea:	b530      	push	{r4, r5, lr}
 8002fec:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002fee:	2340      	movs	r3, #64	; 0x40
 8002ff0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ff2:	2300      	movs	r3, #0
{
 8002ff4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002ff6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002ff8:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ffa:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ffc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003002:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8003004:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003006:	f7ff fee7 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800300a:	f241 3288 	movw	r2, #5000	; 0x1388
 800300e:	4621      	mov	r1, r4
 8003010:	4628      	mov	r0, r5
 8003012:	f7ff feff 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 8003016:	b007      	add	sp, #28
 8003018:	bd30      	pop	{r4, r5, pc}

0800301a <SDMMC_CmdWriteMultiBlock>:
{
 800301a:	b530      	push	{r4, r5, lr}
 800301c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800301e:	2340      	movs	r3, #64	; 0x40
 8003020:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003022:	2300      	movs	r3, #0
{
 8003024:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8003026:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003028:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800302a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800302c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800302e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003032:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8003034:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003036:	f7ff fecf 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800303a:	f241 3288 	movw	r2, #5000	; 0x1388
 800303e:	4621      	mov	r1, r4
 8003040:	4628      	mov	r0, r5
 8003042:	f7ff fee7 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 8003046:	b007      	add	sp, #28
 8003048:	bd30      	pop	{r4, r5, pc}
	...

0800304c <SDMMC_CmdStopTransfer>:
{
 800304c:	b530      	push	{r4, r5, lr}
 800304e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8003050:	2300      	movs	r3, #0
{
 8003052:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8003054:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003056:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003058:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800305a:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800305c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800305e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003062:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003064:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8003066:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003068:	f7ff feb6 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, 100000000U);
 800306c:	4a03      	ldr	r2, [pc, #12]	; (800307c <SDMMC_CmdStopTransfer+0x30>)
 800306e:	4621      	mov	r1, r4
 8003070:	4628      	mov	r0, r5
 8003072:	f7ff fecf 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 8003076:	b007      	add	sp, #28
 8003078:	bd30      	pop	{r4, r5, pc}
 800307a:	bf00      	nop
 800307c:	05f5e100 	.word	0x05f5e100

08003080 <SDMMC_CmdSelDesel>:
{
 8003080:	b530      	push	{r4, r5, lr}
 8003082:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003084:	2340      	movs	r3, #64	; 0x40
 8003086:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003088:	2300      	movs	r3, #0
{
 800308a:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800308c:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800308e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003090:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003092:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8003096:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003098:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800309a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800309c:	f7ff fe9c 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80030a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a4:	4621      	mov	r1, r4
 80030a6:	4628      	mov	r0, r5
 80030a8:	f7ff feb4 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 80030ac:	b007      	add	sp, #28
 80030ae:	bd30      	pop	{r4, r5, pc}

080030b0 <SDMMC_CmdGoIdleState>:
{
 80030b0:	b510      	push	{r4, lr}
 80030b2:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80030b8:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80030ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80030bc:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030be:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80030c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c4:	9305      	str	r3, [sp, #20]
{
 80030c6:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80030c8:	f7ff fe86 	bl	8002dd8 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80030cc:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <SDMMC_CmdGoIdleState+0x4c>)
 80030ce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80030d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80030dc:	4353      	muls	r3, r2
    if (count-- == 0U)
 80030de:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 80030e2:	d308      	bcc.n	80030f6 <SDMMC_CmdGoIdleState+0x46>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80030e4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80030e6:	0612      	lsls	r2, r2, #24
 80030e8:	d5f9      	bpl.n	80030de <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80030ea:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80030ee:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80030f0:	2000      	movs	r0, #0
}
 80030f2:	b006      	add	sp, #24
 80030f4:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80030f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80030fa:	e7fa      	b.n	80030f2 <SDMMC_CmdGoIdleState+0x42>
 80030fc:	2000000c 	.word	0x2000000c

08003100 <SDMMC_CmdOperCond>:
{
 8003100:	b510      	push	{r4, lr}
 8003102:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8003104:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8003108:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800310a:	2308      	movs	r3, #8
 800310c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800310e:	2340      	movs	r3, #64	; 0x40
 8003110:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003112:	2300      	movs	r3, #0
 8003114:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003116:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003118:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800311c:	9305      	str	r3, [sp, #20]
{
 800311e:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003120:	f7ff fe5a 	bl	8002dd8 <SDIO_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <SDMMC_CmdOperCond+0x6c>)
 8003126:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003130:	f241 3388 	movw	r3, #5000	; 0x1388
 8003134:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8003136:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 800313a:	d314      	bcc.n	8003166 <SDMMC_CmdOperCond+0x66>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 800313c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800313e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003142:	d0f8      	beq.n	8003136 <SDMMC_CmdOperCond+0x36>

  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8003144:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003146:	f012 0204 	ands.w	r2, r2, #4
 800314a:	d004      	beq.n	8003156 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800314c:	2340      	movs	r3, #64	; 0x40
 800314e:	63a3      	str	r3, [r4, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8003150:	2004      	movs	r0, #4
}
 8003152:	b006      	add	sp, #24
 8003154:	bd10      	pop	{r4, pc}
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003156:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003158:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800315c:	d0f9      	beq.n	8003152 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800315e:	2340      	movs	r3, #64	; 0x40
 8003160:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8003162:	4610      	mov	r0, r2
 8003164:	e7f5      	b.n	8003152 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8003166:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800316a:	e7f2      	b.n	8003152 <SDMMC_CmdOperCond+0x52>
 800316c:	2000000c 	.word	0x2000000c

08003170 <SDMMC_CmdAppCommand>:
{
 8003170:	b530      	push	{r4, r5, lr}
 8003172:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003174:	2340      	movs	r3, #64	; 0x40
 8003176:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003178:	2300      	movs	r3, #0
{
 800317a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800317c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800317e:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003180:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003182:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003188:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800318a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800318c:	f7ff fe24 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4621      	mov	r1, r4
 8003196:	4628      	mov	r0, r5
 8003198:	f7ff fe3c 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 800319c:	b007      	add	sp, #28
 800319e:	bd30      	pop	{r4, r5, pc}

080031a0 <SDMMC_CmdAppOperCommand>:
{
 80031a0:	b510      	push	{r4, lr}
 80031a2:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80031a4:	2329      	movs	r3, #41	; 0x29
 80031a6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80031a8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031ac:	2340      	movs	r3, #64	; 0x40
 80031ae:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80031b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031b4:	2300      	movs	r3, #0
{
 80031b6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 80031b8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031ba:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031bc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031c2:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031c4:	f7ff fe08 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80031c8:	4620      	mov	r0, r4
 80031ca:	f7ff fdb9 	bl	8002d40 <SDMMC_GetCmdResp3>
}
 80031ce:	b006      	add	sp, #24
 80031d0:	bd10      	pop	{r4, pc}

080031d2 <SDMMC_CmdSendSCR>:
{
 80031d2:	b530      	push	{r4, r5, lr}
 80031d4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 80031d6:	2300      	movs	r3, #0
{
 80031d8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 80031da:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80031dc:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031de:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80031e0:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031e2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80031e8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80031ea:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80031ec:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80031ee:	f7ff fdf3 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4621      	mov	r1, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	f7ff fe0b 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 80031fe:	b007      	add	sp, #28
 8003200:	bd30      	pop	{r4, r5, pc}

08003202 <SDMMC_CmdSendCID>:
{
 8003202:	b510      	push	{r4, lr}
 8003204:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8003206:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8003208:	2202      	movs	r2, #2
{
 800320a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800320c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800320e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003210:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003212:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003214:	f44f 6380 	mov.w	r3, #1024	; 0x400
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003218:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800321a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800321c:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800321e:	f7ff fddb 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8003222:	4620      	mov	r0, r4
 8003224:	f7ff fd66 	bl	8002cf4 <SDMMC_GetCmdResp2>
}
 8003228:	b006      	add	sp, #24
 800322a:	bd10      	pop	{r4, pc}

0800322c <SDMMC_CmdSendCSD>:
{
 800322c:	b510      	push	{r4, lr}
 800322e:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8003230:	2309      	movs	r3, #9
 8003232:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8003234:	23c0      	movs	r3, #192	; 0xc0
 8003236:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003238:	2300      	movs	r3, #0
{
 800323a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800323c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800323e:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003240:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003246:	9305      	str	r3, [sp, #20]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003248:	f7ff fdc6 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800324c:	4620      	mov	r0, r4
 800324e:	f7ff fd51 	bl	8002cf4 <SDMMC_GetCmdResp2>
}
 8003252:	b006      	add	sp, #24
 8003254:	bd10      	pop	{r4, pc}
	...

08003258 <SDMMC_CmdSetRelAdd>:
{
 8003258:	b530      	push	{r4, r5, lr}
 800325a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 800325c:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800325e:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0U;
 8003260:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8003262:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003264:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003266:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003268:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 800326c:	460d      	mov	r5, r1
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800326e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003270:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003272:	9305      	str	r3, [sp, #20]
{
 8003274:	4604      	mov	r4, r0
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003276:	f7ff fdaf 	bl	8002dd8 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <SDMMC_CmdSetRelAdd+0xa4>)
 800327c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	fbb3 f2f2 	udiv	r2, r3, r2
 8003286:	f241 3388 	movw	r3, #5000	; 0x1388
 800328a:	4353      	muls	r3, r2
    if (count-- == 0U)
 800328c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
 8003290:	d32b      	bcc.n	80032ea <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT));
 8003292:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003294:	f012 0f45 	tst.w	r2, #69	; 0x45
 8003298:	d0f8      	beq.n	800328c <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800329a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800329c:	075a      	lsls	r2, r3, #29
 800329e:	d503      	bpl.n	80032a8 <SDMMC_CmdSetRelAdd+0x50>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80032a0:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032a2:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80032a4:	b007      	add	sp, #28
 80032a6:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80032a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032aa:	f011 0101 	ands.w	r1, r1, #1
 80032ae:	d001      	beq.n	80032b4 <SDMMC_CmdSetRelAdd+0x5c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80032b0:	2001      	movs	r0, #1
 80032b2:	e7f6      	b.n	80032a2 <SDMMC_CmdSetRelAdd+0x4a>
  return (uint8_t)(SDIOx->RESPCMD);
 80032b4:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d119      	bne.n	80032f0 <SDMMC_CmdSetRelAdd+0x98>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_FLAGS);
 80032bc:	f240 53ff 	movw	r3, #1535	; 0x5ff
 80032c0:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7ff fd9b 	bl	8002dfe <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80032c8:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 80032cc:	d103      	bne.n	80032d6 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80032ce:	0c00      	lsrs	r0, r0, #16
 80032d0:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 80032d2:	4618      	mov	r0, r3
 80032d4:	e7e6      	b.n	80032a4 <SDMMC_CmdSetRelAdd+0x4c>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80032d6:	0443      	lsls	r3, r0, #17
 80032d8:	d40c      	bmi.n	80032f4 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80032da:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80032de:	bf14      	ite	ne
 80032e0:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80032e4:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80032e8:	e7dc      	b.n	80032a4 <SDMMC_CmdSetRelAdd+0x4c>
      return SDMMC_ERROR_TIMEOUT;
 80032ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80032ee:	e7d9      	b.n	80032a4 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80032f0:	2001      	movs	r0, #1
 80032f2:	e7d7      	b.n	80032a4 <SDMMC_CmdSetRelAdd+0x4c>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80032f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80032f8:	e7d4      	b.n	80032a4 <SDMMC_CmdSetRelAdd+0x4c>
 80032fa:	bf00      	nop
 80032fc:	2000000c 	.word	0x2000000c

08003300 <SDMMC_CmdSendStatus>:
{
 8003300:	b530      	push	{r4, r5, lr}
 8003302:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003304:	2340      	movs	r3, #64	; 0x40
 8003306:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003308:	2300      	movs	r3, #0
{
 800330a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800330c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800330e:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003310:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003312:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003318:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800331a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800331c:	f7ff fd5c 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8003320:	f241 3288 	movw	r2, #5000	; 0x1388
 8003324:	4621      	mov	r1, r4
 8003326:	4628      	mov	r0, r5
 8003328:	f7ff fd74 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 800332c:	b007      	add	sp, #28
 800332e:	bd30      	pop	{r4, r5, pc}

08003330 <SDMMC_CmdSwitch>:
{
 8003330:	b530      	push	{r4, r5, lr}
 8003332:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8003334:	2340      	movs	r3, #64	; 0x40
 8003336:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003338:	2300      	movs	r3, #0
{
 800333a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800333c:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800333e:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8003340:	9304      	str	r3, [sp, #16]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8003342:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8003344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003348:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800334a:	9402      	str	r4, [sp, #8]
  SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800334c:	f7ff fd44 	bl	8002dd8 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8003350:	f241 3288 	movw	r2, #5000	; 0x1388
 8003354:	4621      	mov	r1, r4
 8003356:	4628      	mov	r0, r5
 8003358:	f7ff fd5c 	bl	8002e14 <SDMMC_GetCmdResp1>
}
 800335c:	b007      	add	sp, #28
 800335e:	bd30      	pop	{r4, r5, pc}

08003360 <SDMMC_CmdBusWidth>:
 8003360:	f7ff bfe6 	b.w	8003330 <SDMMC_CmdSwitch>

08003364 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <disk_status+0x10>)
 8003366:	181a      	adds	r2, r3, r0
 8003368:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800336c:	7a10      	ldrb	r0, [r2, #8]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4718      	bx	r3
 8003374:	20000054 	.word	0x20000054

08003378 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <disk_initialize+0x1c>)
 800337a:	5c1a      	ldrb	r2, [r3, r0]
 800337c:	b942      	cbnz	r2, 8003390 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800337e:	2201      	movs	r2, #1
 8003380:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003382:	181a      	adds	r2, r3, r0
 8003384:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003388:	7a10      	ldrb	r0, [r2, #8]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4718      	bx	r3
  }
  return stat;
}
 8003390:	2000      	movs	r0, #0
 8003392:	4770      	bx	lr
 8003394:	20000054 	.word	0x20000054

08003398 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003398:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800339a:	4c05      	ldr	r4, [pc, #20]	; (80033b0 <disk_read+0x18>)
 800339c:	1825      	adds	r5, r4, r0
 800339e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80033a2:	6860      	ldr	r0, [r4, #4]
 80033a4:	6884      	ldr	r4, [r0, #8]
 80033a6:	7a28      	ldrb	r0, [r5, #8]
 80033a8:	46a4      	mov	ip, r4
  return res;
}
 80033aa:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80033ac:	4760      	bx	ip
 80033ae:	bf00      	nop
 80033b0:	20000054 	.word	0x20000054

080033b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80033b4:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80033b6:	4c05      	ldr	r4, [pc, #20]	; (80033cc <disk_write+0x18>)
 80033b8:	1825      	adds	r5, r4, r0
 80033ba:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80033be:	6860      	ldr	r0, [r4, #4]
 80033c0:	68c4      	ldr	r4, [r0, #12]
 80033c2:	7a28      	ldrb	r0, [r5, #8]
 80033c4:	46a4      	mov	ip, r4
  return res;
}
 80033c6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80033c8:	4760      	bx	ip
 80033ca:	bf00      	nop
 80033cc:	20000054 	.word	0x20000054

080033d0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <disk_ioctl+0x18>)
{
 80033d2:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80033d4:	181c      	adds	r4, r3, r0
 80033d6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80033da:	7a20      	ldrb	r0, [r4, #8]
 80033dc:	685b      	ldr	r3, [r3, #4]
  return res;
}
 80033de:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	4718      	bx	r3
 80033e6:	bf00      	nop
 80033e8:	20000054 	.word	0x20000054

080033ec <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80033ec:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80033ee:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80033f0:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80033f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80033f6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80033fa:	4770      	bx	lr

080033fc <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80033fc:	0a0b      	lsrs	r3, r1, #8
 80033fe:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003400:	7043      	strb	r3, [r0, #1]
 8003402:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8003404:	0e09      	lsrs	r1, r1, #24
 8003406:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8003408:	70c1      	strb	r1, [r0, #3]
 800340a:	4770      	bx	lr

0800340c <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800340c:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800340e:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 8003412:	4290      	cmp	r0, r2
 8003414:	d1fb      	bne.n	800340e <mem_set+0x2>
}
 8003416:	4770      	bx	lr

08003418 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003418:	4b15      	ldr	r3, [pc, #84]	; (8003470 <chk_lock+0x58>)
 800341a:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800341c:	2500      	movs	r5, #0
 800341e:	462a      	mov	r2, r5
 8003420:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 8003422:	681e      	ldr	r6, [r3, #0]
 8003424:	b1a6      	cbz	r6, 8003450 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003426:	6807      	ldr	r7, [r0, #0]
 8003428:	42be      	cmp	r6, r7
 800342a:	d112      	bne.n	8003452 <chk_lock+0x3a>
 800342c:	685f      	ldr	r7, [r3, #4]
 800342e:	6886      	ldr	r6, [r0, #8]
 8003430:	42b7      	cmp	r7, r6
 8003432:	d10e      	bne.n	8003452 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 8003434:	689f      	ldr	r7, [r3, #8]
 8003436:	6946      	ldr	r6, [r0, #20]
 8003438:	42b7      	cmp	r7, r6
 800343a:	d10a      	bne.n	8003452 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800343c:	b9b1      	cbnz	r1, 800346c <chk_lock+0x54>
 800343e:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8003442:	8993      	ldrh	r3, [r2, #12]
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	bf14      	ite	ne
 800344a:	2000      	movne	r0, #0
 800344c:	2010      	moveq	r0, #16
 800344e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8003450:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003452:	3201      	adds	r2, #1
 8003454:	2a02      	cmp	r2, #2
 8003456:	f103 0310 	add.w	r3, r3, #16
 800345a:	d1e2      	bne.n	8003422 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800345c:	b10d      	cbz	r5, 8003462 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800345e:	2000      	movs	r0, #0
 8003460:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003462:	2902      	cmp	r1, #2
 8003464:	bf0c      	ite	eq
 8003466:	2000      	moveq	r0, #0
 8003468:	2012      	movne	r0, #18
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800346c:	2010      	movs	r0, #16
 800346e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003470:	20000030 	.word	0x20000030

08003474 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003474:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <inc_lock+0x74>)
 8003476:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8003478:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800347a:	2300      	movs	r3, #0
 800347c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 800347e:	6814      	ldr	r4, [r2, #0]
 8003480:	42ac      	cmp	r4, r5
 8003482:	d107      	bne.n	8003494 <inc_lock+0x20>
 8003484:	6857      	ldr	r7, [r2, #4]
 8003486:	6884      	ldr	r4, [r0, #8]
 8003488:	42a7      	cmp	r7, r4
 800348a:	d103      	bne.n	8003494 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 800348c:	6897      	ldr	r7, [r2, #8]
 800348e:	6944      	ldr	r4, [r0, #20]
 8003490:	42a7      	cmp	r7, r4
 8003492:	d01d      	beq.n	80034d0 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003494:	3301      	adds	r3, #1
 8003496:	2b02      	cmp	r3, #2
 8003498:	f102 0210 	add.w	r2, r2, #16
 800349c:	d1ef      	bne.n	800347e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800349e:	6833      	ldr	r3, [r6, #0]
 80034a0:	b113      	cbz	r3, 80034a8 <inc_lock+0x34>
 80034a2:	6933      	ldr	r3, [r6, #16]
 80034a4:	b9eb      	cbnz	r3, 80034e2 <inc_lock+0x6e>
 80034a6:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 80034a8:	011c      	lsls	r4, r3, #4
 80034aa:	1932      	adds	r2, r6, r4
 80034ac:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 80034ae:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 80034b0:	6940      	ldr	r0, [r0, #20]
 80034b2:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 80034b4:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 80034b6:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 80034b8:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80034ba:	b979      	cbnz	r1, 80034dc <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80034bc:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 80034c0:	8992      	ldrh	r2, [r2, #12]
 80034c2:	3201      	adds	r2, #1
 80034c4:	b292      	uxth	r2, r2
 80034c6:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 80034ca:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80034cc:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 80034ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80034d0:	2900      	cmp	r1, #0
 80034d2:	d0f3      	beq.n	80034bc <inc_lock+0x48>
 80034d4:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 80034d8:	8992      	ldrh	r2, [r2, #12]
 80034da:	b912      	cbnz	r2, 80034e2 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80034dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034e0:	e7f1      	b.n	80034c6 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80034e2:	2000      	movs	r0, #0
 80034e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000030 	.word	0x20000030

080034ec <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80034ec:	3801      	subs	r0, #1
 80034ee:	2801      	cmp	r0, #1
 80034f0:	d80e      	bhi.n	8003510 <dec_lock+0x24>
		n = Files[i].ctr;
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <dec_lock+0x2c>)
 80034f4:	0103      	lsls	r3, r0, #4
 80034f6:	18d1      	adds	r1, r2, r3
 80034f8:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80034fa:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80034fe:	b280      	uxth	r0, r0
 8003500:	b108      	cbz	r0, 8003506 <dec_lock+0x1a>
 8003502:	1e48      	subs	r0, r1, #1
 8003504:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 8003506:	18d1      	adds	r1, r2, r3
 8003508:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800350a:	b918      	cbnz	r0, 8003514 <dec_lock+0x28>
 800350c:	50d0      	str	r0, [r2, r3]
 800350e:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003510:	2002      	movs	r0, #2
 8003512:	4770      	bx	lr
		res = FR_OK;
 8003514:	2000      	movs	r0, #0
	}
	return res;
}
 8003516:	4770      	bx	lr
 8003518:	20000030 	.word	0x20000030

0800351c <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800351c:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 800351e:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003520:	3b02      	subs	r3, #2
 8003522:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 8003524:	bf3d      	ittte	cc
 8003526:	8943      	ldrhcc	r3, [r0, #10]
 8003528:	6a80      	ldrcc	r0, [r0, #40]	; 0x28
 800352a:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800352e:	2000      	movcs	r0, #0
}
 8003530:	4770      	bx	lr

08003532 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003532:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003534:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8003536:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8003538:	0a49      	lsrs	r1, r1, #9
 800353a:	8952      	ldrh	r2, [r2, #10]
 800353c:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8003540:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8003542:	b130      	cbz	r0, 8003552 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8003544:	4281      	cmp	r1, r0
 8003546:	d302      	bcc.n	800354e <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 8003548:	1a09      	subs	r1, r1, r0
 800354a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800354c:	e7f8      	b.n	8003540 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 800354e:	6858      	ldr	r0, [r3, #4]
 8003550:	4408      	add	r0, r1
}
 8003552:	4770      	bx	lr

08003554 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8003554:	6802      	ldr	r2, [r0, #0]
{
 8003556:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8003558:	b152      	cbz	r2, 8003570 <get_ldnumber+0x1c>
 800355a:	4611      	mov	r1, r2
 800355c:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800355e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003562:	2c20      	cmp	r4, #32
 8003564:	d90c      	bls.n	8003580 <get_ldnumber+0x2c>
 8003566:	2c3a      	cmp	r4, #58	; 0x3a
 8003568:	d1f8      	bne.n	800355c <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800356a:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800356c:	428b      	cmp	r3, r1
 800356e:	d002      	beq.n	8003576 <get_ldnumber+0x22>
	int vol = -1;
 8003570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8003574:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	2a30      	cmp	r2, #48	; 0x30
 800357a:	d1f9      	bne.n	8003570 <get_ldnumber+0x1c>
					*path = ++tt;
 800357c:	3301      	adds	r3, #1
 800357e:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8003580:	2000      	movs	r0, #0
 8003582:	bd10      	pop	{r4, pc}

08003584 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8003588:	4604      	mov	r4, r0
 800358a:	b918      	cbnz	r0, 8003594 <validate+0x10>
		*fs = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8003590:	2009      	movs	r0, #9
 8003592:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8003594:	6803      	ldr	r3, [r0, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f8      	beq.n	800358c <validate+0x8>
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	2a00      	cmp	r2, #0
 800359e:	d0f5      	beq.n	800358c <validate+0x8>
 80035a0:	88d9      	ldrh	r1, [r3, #6]
 80035a2:	8882      	ldrh	r2, [r0, #4]
 80035a4:	4291      	cmp	r1, r2
 80035a6:	d1f1      	bne.n	800358c <validate+0x8>
 80035a8:	7858      	ldrb	r0, [r3, #1]
 80035aa:	f7ff fedb 	bl	8003364 <disk_status>
 80035ae:	f010 0001 	ands.w	r0, r0, #1
 80035b2:	d1eb      	bne.n	800358c <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 80035b8:	bd38      	pop	{r3, r4, r5, pc}

080035ba <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80035ba:	3801      	subs	r0, #1
 80035bc:	440a      	add	r2, r1
			*d++ = *s++;
 80035be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035c2:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80035c6:	4291      	cmp	r1, r2
 80035c8:	d1f9      	bne.n	80035be <mem_cpy.part.0+0x4>
}
 80035ca:	4770      	bx	lr

080035cc <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 80035cc:	7eca      	ldrb	r2, [r1, #27]
 80035ce:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 80035d0:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80035d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 80035d6:	bf01      	itttt	eq
 80035d8:	7d48      	ldrbeq	r0, [r1, #21]
 80035da:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80035dc:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80035e0:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	4770      	bx	lr

080035e8 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 80035e8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80035ec:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 80035ee:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 80035f0:	7803      	ldrb	r3, [r0, #0]
 80035f2:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80035f4:	bf01      	itttt	eq
 80035f6:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80035f8:	750a      	strbeq	r2, [r1, #20]
 80035fa:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 80035fc:	754a      	strbeq	r2, [r1, #21]
 80035fe:	4770      	bx	lr

08003600 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8003602:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003604:	f100 0730 	add.w	r7, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8003608:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800360a:	2301      	movs	r3, #1
 800360c:	462a      	mov	r2, r5
 800360e:	4639      	mov	r1, r7
 8003610:	7840      	ldrb	r0, [r0, #1]
 8003612:	f7ff fecf 	bl	80033b4 <disk_write>
 8003616:	b9a0      	cbnz	r0, 8003642 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003618:	6a23      	ldr	r3, [r4, #32]
 800361a:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 800361c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800361e:	1aeb      	subs	r3, r5, r3
 8003620:	4293      	cmp	r3, r2
 8003622:	d301      	bcc.n	8003628 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8003624:	2000      	movs	r0, #0
 8003626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003628:	78a6      	ldrb	r6, [r4, #2]
 800362a:	2e01      	cmp	r6, #1
 800362c:	d9fa      	bls.n	8003624 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 800362e:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003630:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8003632:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8003634:	462a      	mov	r2, r5
 8003636:	2301      	movs	r3, #1
 8003638:	4639      	mov	r1, r7
 800363a:	f7ff febb 	bl	80033b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800363e:	3e01      	subs	r6, #1
 8003640:	e7f3      	b.n	800362a <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8003642:	2001      	movs	r0, #1
}
 8003644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003646 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003646:	78c3      	ldrb	r3, [r0, #3]
 8003648:	b10b      	cbz	r3, 800364e <sync_window+0x8>
 800364a:	f7ff bfd9 	b.w	8003600 <sync_window.part.4>
}
 800364e:	4618      	mov	r0, r3
 8003650:	4770      	bx	lr

08003652 <sync_fs>:
{
 8003652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003654:	4604      	mov	r4, r0
	res = sync_window(fs);
 8003656:	f7ff fff6 	bl	8003646 <sync_window>
 800365a:	4605      	mov	r5, r0
	if (res == FR_OK) {
 800365c:	2800      	cmp	r0, #0
 800365e:	d142      	bne.n	80036e6 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003660:	7823      	ldrb	r3, [r4, #0]
 8003662:	2b03      	cmp	r3, #3
 8003664:	d137      	bne.n	80036d6 <sync_fs+0x84>
 8003666:	7927      	ldrb	r7, [r4, #4]
 8003668:	2f01      	cmp	r7, #1
 800366a:	d134      	bne.n	80036d6 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 800366c:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8003670:	4601      	mov	r1, r0
 8003672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003676:	4630      	mov	r0, r6
 8003678:	f7ff fec8 	bl	800340c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800367c:	2355      	movs	r3, #85	; 0x55
 800367e:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 8003682:	23aa      	movs	r3, #170	; 0xaa
 8003684:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8003688:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 800368a:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 800368c:	2172      	movs	r1, #114	; 0x72
 800368e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8003692:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8003696:	2361      	movs	r3, #97	; 0x61
 8003698:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 800369c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 80036a0:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
	*ptr++ = (BYTE)val;
 80036a4:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
	*ptr++ = (BYTE)val; val >>= 8;
 80036a8:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 80036ac:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80036b0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80036b4:	6921      	ldr	r1, [r4, #16]
 80036b6:	f7ff fea1 	bl	80033fc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80036ba:	68e1      	ldr	r1, [r4, #12]
 80036bc:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80036c0:	f7ff fe9c 	bl	80033fc <st_dword>
			fs->winsect = fs->volbase + 1;
 80036c4:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80036c6:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 80036c8:	3201      	adds	r2, #1
 80036ca:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80036cc:	463b      	mov	r3, r7
 80036ce:	4631      	mov	r1, r6
 80036d0:	f7ff fe70 	bl	80033b4 <disk_write>
			fs->fsi_flag = 0;
 80036d4:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80036d6:	2200      	movs	r2, #0
 80036d8:	4611      	mov	r1, r2
 80036da:	7860      	ldrb	r0, [r4, #1]
 80036dc:	f7ff fe78 	bl	80033d0 <disk_ioctl>
 80036e0:	3000      	adds	r0, #0
 80036e2:	bf18      	it	ne
 80036e4:	2001      	movne	r0, #1
}
 80036e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080036e8 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 80036e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036ea:	428b      	cmp	r3, r1
{
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	4606      	mov	r6, r0
 80036f0:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80036f2:	d012      	beq.n	800371a <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80036f4:	f7ff ffa7 	bl	8003646 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80036f8:	4604      	mov	r4, r0
 80036fa:	b960      	cbnz	r0, 8003716 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80036fc:	462a      	mov	r2, r5
 80036fe:	2301      	movs	r3, #1
 8003700:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8003704:	7870      	ldrb	r0, [r6, #1]
 8003706:	f7ff fe47 	bl	8003398 <disk_read>
 800370a:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 800370c:	bf1c      	itt	ne
 800370e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8003712:	2401      	movne	r4, #1
			fs->winsect = sector;
 8003714:	62f5      	str	r5, [r6, #44]	; 0x2c
}
 8003716:	4620      	mov	r0, r4
 8003718:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 800371a:	2400      	movs	r4, #0
 800371c:	e7fb      	b.n	8003716 <move_window+0x2e>
	...

08003720 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003720:	2300      	movs	r3, #0
{
 8003722:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8003724:	70c3      	strb	r3, [r0, #3]
 8003726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800372a:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 800372c:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800372e:	f7ff ffdb 	bl	80036e8 <move_window>
 8003732:	bb30      	cbnz	r0, 8003782 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8003734:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8003738:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
 800373c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003740:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003744:	4293      	cmp	r3, r2
 8003746:	d11e      	bne.n	8003786 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8003748:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800374c:	2be9      	cmp	r3, #233	; 0xe9
 800374e:	d005      	beq.n	800375c <check_fs+0x3c>
 8003750:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003752:	4a10      	ldr	r2, [pc, #64]	; (8003794 <check_fs+0x74>)
 8003754:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8003758:	4293      	cmp	r3, r2
 800375a:	d116      	bne.n	800378a <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800375c:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8003760:	f7ff fe44 	bl	80033ec <ld_dword>
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <check_fs+0x78>)
 8003766:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800376a:	4298      	cmp	r0, r3
 800376c:	d00f      	beq.n	800378e <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800376e:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8003772:	f7ff fe3b 	bl	80033ec <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <check_fs+0x7c>)
 8003778:	4298      	cmp	r0, r3
 800377a:	bf14      	ite	ne
 800377c:	2002      	movne	r0, #2
 800377e:	2000      	moveq	r0, #0
 8003780:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8003782:	2004      	movs	r0, #4
 8003784:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8003786:	2003      	movs	r0, #3
 8003788:	bd10      	pop	{r4, pc}
	return 2;
 800378a:	2002      	movs	r0, #2
 800378c:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800378e:	2000      	movs	r0, #0
}
 8003790:	bd10      	pop	{r4, pc}
 8003792:	bf00      	nop
 8003794:	009000eb 	.word	0x009000eb
 8003798:	00544146 	.word	0x00544146
 800379c:	33544146 	.word	0x33544146

080037a0 <find_volume>:
{
 80037a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*rfs = 0;
 80037a4:	2300      	movs	r3, #0
{
 80037a6:	b085      	sub	sp, #20
	*rfs = 0;
 80037a8:	600b      	str	r3, [r1, #0]
{
 80037aa:	460f      	mov	r7, r1
 80037ac:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80037ae:	f7ff fed1 	bl	8003554 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80037b2:	1e06      	subs	r6, r0, #0
 80037b4:	f2c0 8140 	blt.w	8003a38 <find_volume+0x298>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80037b8:	4ba3      	ldr	r3, [pc, #652]	; (8003a48 <find_volume+0x2a8>)
 80037ba:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80037be:	2c00      	cmp	r4, #0
 80037c0:	f000 813c 	beq.w	8003a3c <find_volume+0x29c>
	*rfs = fs;							/* Return pointer to the file system object */
 80037c4:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80037c6:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80037c8:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80037cc:	b173      	cbz	r3, 80037ec <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80037ce:	7860      	ldrb	r0, [r4, #1]
 80037d0:	f7ff fdc8 	bl	8003364 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80037d4:	07c1      	lsls	r1, r0, #31
 80037d6:	d409      	bmi.n	80037ec <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80037d8:	2d00      	cmp	r5, #0
 80037da:	f000 8131 	beq.w	8003a40 <find_volume+0x2a0>
 80037de:	f010 0004 	ands.w	r0, r0, #4
 80037e2:	d000      	beq.n	80037e6 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 80037e4:	200a      	movs	r0, #10
}
 80037e6:	b005      	add	sp, #20
 80037e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80037ec:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80037ee:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 80037f0:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80037f2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80037f4:	f7ff fdc0 	bl	8003378 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80037f8:	07c2      	lsls	r2, r0, #31
 80037fa:	f100 8123 	bmi.w	8003a44 <find_volume+0x2a4>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80037fe:	b10d      	cbz	r5, 8003804 <find_volume+0x64>
 8003800:	0743      	lsls	r3, r0, #29
 8003802:	d4ef      	bmi.n	80037e4 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8003804:	2100      	movs	r1, #0
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff ff8a 	bl	8003720 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800380c:	2802      	cmp	r0, #2
 800380e:	f040 80f7 	bne.w	8003a00 <find_volume+0x260>
 8003812:	f504 75fb 	add.w	r5, r4, #502	; 0x1f6
 8003816:	2100      	movs	r1, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8003818:	f815 0c04 	ldrb.w	r0, [r5, #-4]
 800381c:	b110      	cbz	r0, 8003824 <find_volume+0x84>
 800381e:	4628      	mov	r0, r5
 8003820:	f7ff fde4 	bl	80033ec <ld_dword>
 8003824:	f84d 0021 	str.w	r0, [sp, r1, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8003828:	3101      	adds	r1, #1
 800382a:	2904      	cmp	r1, #4
 800382c:	f105 0510 	add.w	r5, r5, #16
 8003830:	d1f2      	bne.n	8003818 <find_volume+0x78>
 8003832:	2500      	movs	r5, #0
			bsect = br[i];
 8003834:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8003838:	2e00      	cmp	r6, #0
 800383a:	f000 80d8 	beq.w	80039ee <find_volume+0x24e>
 800383e:	4631      	mov	r1, r6
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff ff6d 	bl	8003720 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8003846:	2801      	cmp	r0, #1
 8003848:	f200 80d2 	bhi.w	80039f0 <find_volume+0x250>
	rv = rv << 8 | ptr[0];
 800384c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8003850:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 8003854:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385c:	f040 80d4 	bne.w	8003a08 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 8003860:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8003864:	f894 5046 	ldrb.w	r5, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8003868:	ea55 2503 	orrs.w	r5, r5, r3, lsl #8
 800386c:	d104      	bne.n	8003878 <find_volume+0xd8>
 800386e:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8003872:	f7ff fdbb 	bl	80033ec <ld_dword>
 8003876:	4605      	mov	r5, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003878:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
		fs->fsize = fasize;
 800387c:	61a5      	str	r5, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800387e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8003882:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8003884:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8003888:	f200 80be 	bhi.w	8003a08 <find_volume+0x268>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800388c:	f894 703d 	ldrb.w	r7, [r4, #61]	; 0x3d
 8003890:	b2bb      	uxth	r3, r7
 8003892:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80b7 	beq.w	8003a08 <find_volume+0x268>
 800389a:	1e7b      	subs	r3, r7, #1
 800389c:	423b      	tst	r3, r7
 800389e:	f040 80b3 	bne.w	8003a08 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 80038a2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80038a6:	f894 8041 	ldrb.w	r8, [r4, #65]	; 0x41
 80038aa:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80038ae:	f018 0f0f 	tst.w	r8, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80038b2:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80038b6:	f040 80a7 	bne.w	8003a08 <find_volume+0x268>
	rv = rv << 8 | ptr[0];
 80038ba:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 80038be:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80038c2:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 80038c6:	d103      	bne.n	80038d0 <find_volume+0x130>
 80038c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038cc:	f7ff fd8e 	bl	80033ec <ld_dword>
	rv = rv << 8 | ptr[0];
 80038d0:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80038d4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80038d8:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 80038dc:	f000 8094 	beq.w	8003a08 <find_volume+0x268>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80038e0:	fb05 f309 	mul.w	r3, r5, r9
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80038e4:	eb02 1e18 	add.w	lr, r2, r8, lsr #4
 80038e8:	449e      	add	lr, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80038ea:	4570      	cmp	r0, lr
 80038ec:	f0c0 808c 	bcc.w	8003a08 <find_volume+0x268>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80038f0:	eba0 010e 	sub.w	r1, r0, lr
 80038f4:	fbb1 f1f7 	udiv	r1, r1, r7
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80038f8:	2900      	cmp	r1, #0
 80038fa:	f000 8085 	beq.w	8003a08 <find_volume+0x268>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80038fe:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8003902:	4281      	cmp	r1, r0
 8003904:	f200 8084 	bhi.w	8003a10 <find_volume+0x270>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8003908:	f640 77f5 	movw	r7, #4085	; 0xff5
 800390c:	42b9      	cmp	r1, r7
 800390e:	bf8c      	ite	hi
 8003910:	2702      	movhi	r7, #2
 8003912:	2701      	movls	r7, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8003914:	3102      	adds	r1, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003916:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8003918:	eb06 000e 	add.w	r0, r6, lr
		if (fmt == FS_FAT32) {
 800391c:	2f03      	cmp	r7, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800391e:	6161      	str	r1, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8003920:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8003922:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8003924:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8003926:	d175      	bne.n	8003a14 <find_volume+0x274>
	rv = rv << 8 | ptr[0];
 8003928:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 800392c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8003930:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8003934:	d168      	bne.n	8003a08 <find_volume+0x268>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8003936:	f1b8 0f00 	cmp.w	r8, #0
 800393a:	d165      	bne.n	8003a08 <find_volume+0x268>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800393c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003940:	f7ff fd54 	bl	80033ec <ld_dword>
 8003944:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8003946:	0089      	lsls	r1, r1, #2
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8003948:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 800394c:	ebb5 2f51 	cmp.w	r5, r1, lsr #9
 8003950:	d35a      	bcc.n	8003a08 <find_volume+0x268>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8003952:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	60e3      	str	r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800395a:	2f03      	cmp	r7, #3
		fs->fsi_flag = 0x80;
 800395c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003960:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8003962:	d12f      	bne.n	80039c4 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 8003964:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8003968:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800396c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d127      	bne.n	80039c4 <find_volume+0x224>
			&& move_window(fs, bsect + 1) == FR_OK)
 8003974:	1c71      	adds	r1, r6, #1
 8003976:	4620      	mov	r0, r4
 8003978:	f7ff feb6 	bl	80036e8 <move_window>
 800397c:	bb10      	cbnz	r0, 80039c4 <find_volume+0x224>
	rv = rv << 8 | ptr[0];
 800397e:	f894 222f 	ldrb.w	r2, [r4, #559]	; 0x22f
 8003982:	f894 322e 	ldrb.w	r3, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 8003986:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8003988:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800398c:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8003990:	4293      	cmp	r3, r2
 8003992:	d117      	bne.n	80039c4 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8003994:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003998:	f7ff fd28 	bl	80033ec <ld_dword>
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <find_volume+0x2ac>)
 800399e:	4298      	cmp	r0, r3
 80039a0:	d110      	bne.n	80039c4 <find_volume+0x224>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80039a2:	f504 7005 	add.w	r0, r4, #532	; 0x214
 80039a6:	f7ff fd21 	bl	80033ec <ld_dword>
 80039aa:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <find_volume+0x2b0>)
 80039ac:	4298      	cmp	r0, r3
 80039ae:	d109      	bne.n	80039c4 <find_volume+0x224>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80039b0:	f504 7006 	add.w	r0, r4, #536	; 0x218
 80039b4:	f7ff fd1a 	bl	80033ec <ld_dword>
 80039b8:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80039ba:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 80039be:	f7ff fd15 	bl	80033ec <ld_dword>
 80039c2:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 80039c4:	4a23      	ldr	r2, [pc, #140]	; (8003a54 <find_volume+0x2b4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80039c6:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80039c8:	8813      	ldrh	r3, [r2, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	8013      	strh	r3, [r2, #0]
 80039d0:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80039d2:	4b21      	ldr	r3, [pc, #132]	; (8003a58 <find_volume+0x2b8>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4294      	cmp	r4, r2
 80039d8:	bf04      	itt	eq
 80039da:	2200      	moveq	r2, #0
 80039dc:	601a      	streq	r2, [r3, #0]
 80039de:	691a      	ldr	r2, [r3, #16]
 80039e0:	4294      	cmp	r4, r2
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f47f aefe 	bne.w	80037e6 <find_volume+0x46>
 80039ea:	6118      	str	r0, [r3, #16]
 80039ec:	e6fb      	b.n	80037e6 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80039ee:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80039f0:	3501      	adds	r5, #1
 80039f2:	2d04      	cmp	r5, #4
 80039f4:	f47f af1e 	bne.w	8003834 <find_volume+0x94>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80039f8:	2804      	cmp	r0, #4
 80039fa:	d105      	bne.n	8003a08 <find_volume+0x268>
 80039fc:	2001      	movs	r0, #1
 80039fe:	e6f2      	b.n	80037e6 <find_volume+0x46>
 8003a00:	2804      	cmp	r0, #4
 8003a02:	d0fb      	beq.n	80039fc <find_volume+0x25c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8003a04:	2801      	cmp	r0, #1
 8003a06:	d901      	bls.n	8003a0c <find_volume+0x26c>
 8003a08:	200d      	movs	r0, #13
 8003a0a:	e6ec      	b.n	80037e6 <find_volume+0x46>
	bsect = 0;
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	e71d      	b.n	800384c <find_volume+0xac>
		fmt = FS_FAT32;
 8003a10:	2703      	movs	r7, #3
 8003a12:	e77f      	b.n	8003914 <find_volume+0x174>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8003a14:	f1b8 0f00 	cmp.w	r8, #0
 8003a18:	d0f6      	beq.n	8003a08 <find_volume+0x268>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003a1a:	2f02      	cmp	r7, #2
 8003a1c:	ea4f 0041 	mov.w	r0, r1, lsl #1
 8003a20:	bf18      	it	ne
 8003a22:	1840      	addne	r0, r0, r1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003a24:	4413      	add	r3, r2
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003a26:	bf18      	it	ne
 8003a28:	f001 0101 	andne.w	r1, r1, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8003a2c:	6263      	str	r3, [r4, #36]	; 0x24
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003a2e:	bf0c      	ite	eq
 8003a30:	4601      	moveq	r1, r0
 8003a32:	eb01 0150 	addne.w	r1, r1, r0, lsr #1
 8003a36:	e787      	b.n	8003948 <find_volume+0x1a8>
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a38:	200b      	movs	r0, #11
 8003a3a:	e6d4      	b.n	80037e6 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003a3c:	200c      	movs	r0, #12
 8003a3e:	e6d2      	b.n	80037e6 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8003a40:	4628      	mov	r0, r5
 8003a42:	e6d0      	b.n	80037e6 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003a44:	2003      	movs	r0, #3
 8003a46:	e6ce      	b.n	80037e6 <find_volume+0x46>
 8003a48:	2000002c 	.word	0x2000002c
 8003a4c:	41615252 	.word	0x41615252
 8003a50:	61417272 	.word	0x61417272
 8003a54:	20000050 	.word	0x20000050
 8003a58:	20000030 	.word	0x20000030

08003a5c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003a5c:	2901      	cmp	r1, #1
{
 8003a5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a62:	4605      	mov	r5, r0
 8003a64:	460c      	mov	r4, r1
 8003a66:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003a68:	d972      	bls.n	8003b50 <put_fat+0xf4>
 8003a6a:	6943      	ldr	r3, [r0, #20]
 8003a6c:	4299      	cmp	r1, r3
 8003a6e:	d26f      	bcs.n	8003b50 <put_fat+0xf4>
		switch (fs->fs_type) {
 8003a70:	7803      	ldrb	r3, [r0, #0]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d03f      	beq.n	8003af6 <put_fat+0x9a>
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d050      	beq.n	8003b1c <put_fat+0xc0>
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d168      	bne.n	8003b50 <put_fat+0xf4>
			bc = (UINT)clst; bc += bc / 2;
 8003a7e:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003a82:	6a01      	ldr	r1, [r0, #32]
 8003a84:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8003a88:	f7ff fe2e 	bl	80036e8 <move_window>
 8003a8c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8003a8e:	bb38      	cbnz	r0, 8003ae0 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8003a90:	f105 0930 	add.w	r9, r5, #48	; 0x30
 8003a94:	f108 0a01 	add.w	sl, r8, #1
 8003a98:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003a9c:	f014 0401 	ands.w	r4, r4, #1
 8003aa0:	bf1f      	itttt	ne
 8003aa2:	f819 3008 	ldrbne.w	r3, [r9, r8]
 8003aa6:	f003 020f 	andne.w	r2, r3, #15
 8003aaa:	013b      	lslne	r3, r7, #4
 8003aac:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8003ab0:	bf14      	ite	ne
 8003ab2:	4313      	orrne	r3, r2
 8003ab4:	b2fb      	uxtbeq	r3, r7
 8003ab6:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003aba:	6a29      	ldr	r1, [r5, #32]
			fs->wflag = 1;
 8003abc:	2301      	movs	r3, #1
 8003abe:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003ac0:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	f7ff fe0f 	bl	80036e8 <move_window>
			if (res != FR_OK) break;
 8003aca:	4606      	mov	r6, r0
 8003acc:	b940      	cbnz	r0, 8003ae0 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8003ace:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003ad2:	b144      	cbz	r4, 8003ae6 <put_fat+0x8a>
 8003ad4:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8003ad8:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8003adc:	2301      	movs	r3, #1
 8003ade:	70eb      	strb	r3, [r5, #3]
}
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003ae6:	f819 300a 	ldrb.w	r3, [r9, sl]
 8003aea:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8003aee:	f023 030f 	bic.w	r3, r3, #15
 8003af2:	431f      	orrs	r7, r3
 8003af4:	e7f0      	b.n	8003ad8 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003af6:	6a01      	ldr	r1, [r0, #32]
 8003af8:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003afc:	f7ff fdf4 	bl	80036e8 <move_window>
			if (res != FR_OK) break;
 8003b00:	4606      	mov	r6, r0
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d1ec      	bne.n	8003ae0 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003b06:	0064      	lsls	r4, r4, #1
 8003b08:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003b0c:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003b10:	191a      	adds	r2, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8003b12:	551f      	strb	r7, [r3, r4]
 8003b14:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8003b18:	7057      	strb	r7, [r2, #1]
 8003b1a:	e7df      	b.n	8003adc <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003b1c:	6a01      	ldr	r1, [r0, #32]
 8003b1e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003b22:	f7ff fde1 	bl	80036e8 <move_window>
			if (res != FR_OK) break;
 8003b26:	4606      	mov	r6, r0
 8003b28:	2800      	cmp	r0, #0
 8003b2a:	d1d9      	bne.n	8003ae0 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003b2c:	00a4      	lsls	r4, r4, #2
 8003b2e:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8003b32:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003b36:	441c      	add	r4, r3
 8003b38:	4620      	mov	r0, r4
 8003b3a:	f7ff fc57 	bl	80033ec <ld_dword>
 8003b3e:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8003b42:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003b46:	4339      	orrs	r1, r7
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7ff fc57 	bl	80033fc <st_dword>
 8003b4e:	e7c5      	b.n	8003adc <put_fat+0x80>
	FRESULT res = FR_INT_ERR;
 8003b50:	2602      	movs	r6, #2
 8003b52:	e7c5      	b.n	8003ae0 <put_fat+0x84>

08003b54 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b54:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8003b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b58:	4605      	mov	r5, r0
 8003b5a:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b5c:	d952      	bls.n	8003c04 <get_fat.isra.8+0xb0>
 8003b5e:	6943      	ldr	r3, [r0, #20]
 8003b60:	4299      	cmp	r1, r3
 8003b62:	d24f      	bcs.n	8003c04 <get_fat.isra.8+0xb0>
		switch (fs->fs_type) {
 8003b64:	7803      	ldrb	r3, [r0, #0]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d029      	beq.n	8003bbe <get_fat.isra.8+0x6a>
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d038      	beq.n	8003be0 <get_fat.isra.8+0x8c>
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d148      	bne.n	8003c04 <get_fat.isra.8+0xb0>
			bc = (UINT)clst; bc += bc / 2;
 8003b72:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b76:	6a01      	ldr	r1, [r0, #32]
 8003b78:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 8003b7c:	f7ff fdb4 	bl	80036e8 <move_window>
 8003b80:	b110      	cbz	r0, 8003b88 <get_fat.isra.8+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8003b88:	1c77      	adds	r7, r6, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b8a:	6a29      	ldr	r1, [r5, #32]
			wc = fs->win[bc++ % SS(fs)];
 8003b8c:	f3c6 0608 	ubfx	r6, r6, #0, #9
 8003b90:	442e      	add	r6, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b92:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8003b96:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 8003b98:	f896 6030 	ldrb.w	r6, [r6, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003b9c:	f7ff fda4 	bl	80036e8 <move_window>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d1ee      	bne.n	8003b82 <get_fat.isra.8+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003ba4:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8003ba8:	443d      	add	r5, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003baa:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8003bac:	f895 0030 	ldrb.w	r0, [r5, #48]	; 0x30
 8003bb0:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003bb4:	bf4c      	ite	mi
 8003bb6:	0900      	lsrmi	r0, r0, #4
 8003bb8:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8003bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003bbe:	6a01      	ldr	r1, [r0, #32]
 8003bc0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8003bc4:	f7ff fd90 	bl	80036e8 <move_window>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d1da      	bne.n	8003b82 <get_fat.isra.8+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003bcc:	0064      	lsls	r4, r4, #1
 8003bce:	3530      	adds	r5, #48	; 0x30
 8003bd0:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8003bd4:	192b      	adds	r3, r5, r4
	rv = rv << 8 | ptr[0];
 8003bd6:	5d28      	ldrb	r0, [r5, r4]
 8003bd8:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003bda:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8003bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003be0:	6a01      	ldr	r1, [r0, #32]
 8003be2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8003be6:	f7ff fd7f 	bl	80036e8 <move_window>
 8003bea:	2800      	cmp	r0, #0
 8003bec:	d1c9      	bne.n	8003b82 <get_fat.isra.8+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003bee:	00a4      	lsls	r4, r4, #2
 8003bf0:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8003bf4:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8003bf8:	4420      	add	r0, r4
 8003bfa:	f7ff fbf7 	bl	80033ec <ld_dword>
 8003bfe:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8003c02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8003c04:	2001      	movs	r0, #1
}
 8003c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c08 <create_chain>:
{
 8003c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c0c:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8003c0e:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8003c10:	460f      	mov	r7, r1
 8003c12:	b971      	cbnz	r1, 8003c32 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003c14:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003c16:	b1f6      	cbz	r6, 8003c56 <create_chain+0x4e>
 8003c18:	696b      	ldr	r3, [r5, #20]
 8003c1a:	429e      	cmp	r6, r3
 8003c1c:	bf28      	it	cs
 8003c1e:	2601      	movcs	r6, #1
 8003c20:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003c22:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 8003c24:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003c26:	429c      	cmp	r4, r3
 8003c28:	d318      	bcc.n	8003c5c <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8003c2a:	2e01      	cmp	r6, #1
 8003c2c:	d815      	bhi.n	8003c5a <create_chain+0x52>
 8003c2e:	2400      	movs	r4, #0
 8003c30:	e009      	b.n	8003c46 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003c32:	4628      	mov	r0, r5
 8003c34:	f7ff ff8e 	bl	8003b54 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003c38:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003c3a:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003c3c:	d937      	bls.n	8003cae <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d104      	bne.n	8003c4c <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003c42:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8003c46:	4620      	mov	r0, r4
 8003c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003c4c:	696b      	ldr	r3, [r5, #20]
 8003c4e:	4298      	cmp	r0, r3
 8003c50:	d3f9      	bcc.n	8003c46 <create_chain+0x3e>
 8003c52:	463e      	mov	r6, r7
 8003c54:	e7e4      	b.n	8003c20 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003c56:	2601      	movs	r6, #1
 8003c58:	e7e2      	b.n	8003c20 <create_chain+0x18>
				ncl = 2;
 8003c5a:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	f8d8 0000 	ldr.w	r0, [r8]
 8003c62:	f7ff ff77 	bl	8003b54 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 8003c66:	b130      	cbz	r0, 8003c76 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8003c68:	2801      	cmp	r0, #1
 8003c6a:	d020      	beq.n	8003cae <create_chain+0xa6>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d0e8      	beq.n	8003c42 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8003c70:	42b4      	cmp	r4, r6
 8003c72:	d1d6      	bne.n	8003c22 <create_chain+0x1a>
 8003c74:	e7db      	b.n	8003c2e <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c7a:	4621      	mov	r1, r4
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	f7ff feed 	bl	8003a5c <put_fat>
		if (res == FR_OK && clst != 0) {
 8003c82:	b990      	cbnz	r0, 8003caa <create_chain+0xa2>
 8003c84:	b957      	cbnz	r7, 8003c9c <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003c86:	696a      	ldr	r2, [r5, #20]
 8003c88:	692b      	ldr	r3, [r5, #16]
		fs->last_clst = ncl;
 8003c8a:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003c8c:	3a02      	subs	r2, #2
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d90f      	bls.n	8003cb2 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8003c92:	792b      	ldrb	r3, [r5, #4]
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	712b      	strb	r3, [r5, #4]
 8003c9a:	e7d4      	b.n	8003c46 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	4639      	mov	r1, r7
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	f7ff fedb 	bl	8003a5c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8003ca6:	2800      	cmp	r0, #0
 8003ca8:	d0ed      	beq.n	8003c86 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8003caa:	2801      	cmp	r0, #1
 8003cac:	d0c9      	beq.n	8003c42 <create_chain+0x3a>
 8003cae:	2401      	movs	r4, #1
 8003cb0:	e7c9      	b.n	8003c46 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	612b      	str	r3, [r5, #16]
 8003cb6:	e7ec      	b.n	8003c92 <create_chain+0x8a>

08003cb8 <remove_chain>:
{
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003cbc:	2d01      	cmp	r5, #1
{
 8003cbe:	4607      	mov	r7, r0
 8003cc0:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003cc2:	d801      	bhi.n	8003cc8 <remove_chain+0x10>
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8003cc8:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003cca:	6963      	ldr	r3, [r4, #20]
 8003ccc:	429d      	cmp	r5, r3
 8003cce:	d2f9      	bcs.n	8003cc4 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003cd0:	b12a      	cbz	r2, 8003cde <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003cd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	f7ff fec0 	bl	8003a5c <put_fat>
		if (res != FR_OK) return res;
 8003cdc:	bb08      	cbnz	r0, 8003d22 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003cde:	4629      	mov	r1, r5
 8003ce0:	6838      	ldr	r0, [r7, #0]
 8003ce2:	f7ff ff37 	bl	8003b54 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8003ce6:	4606      	mov	r6, r0
 8003ce8:	b908      	cbnz	r0, 8003cee <remove_chain+0x36>
	return FR_OK;
 8003cea:	2000      	movs	r0, #0
 8003cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003cee:	2801      	cmp	r0, #1
 8003cf0:	d0e8      	beq.n	8003cc4 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003cf2:	1c43      	adds	r3, r0, #1
 8003cf4:	d014      	beq.n	8003d20 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f7ff feae 	bl	8003a5c <put_fat>
			if (res != FR_OK) return res;
 8003d00:	b978      	cbnz	r0, 8003d22 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003d02:	6962      	ldr	r2, [r4, #20]
 8003d04:	6923      	ldr	r3, [r4, #16]
 8003d06:	1e91      	subs	r1, r2, #2
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	d205      	bcs.n	8003d18 <remove_chain+0x60>
			fs->free_clst++;
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
 8003d10:	7923      	ldrb	r3, [r4, #4]
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003d18:	4296      	cmp	r6, r2
 8003d1a:	4635      	mov	r5, r6
 8003d1c:	d3df      	bcc.n	8003cde <remove_chain+0x26>
 8003d1e:	e7e4      	b.n	8003cea <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003d20:	2001      	movs	r0, #1
}
 8003d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d24 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8003d24:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003d26:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8003d28:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8003d2a:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8003d2c:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8003d2e:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003d30:	b992      	cbnz	r2, 8003d58 <dir_sdi.constprop.11+0x34>
 8003d32:	7823      	ldrb	r3, [r4, #0]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8003d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8003d3a:	b973      	cbnz	r3, 8003d5a <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8003d3c:	8923      	ldrh	r3, [r4, #8]
 8003d3e:	b90b      	cbnz	r3, 8003d44 <dir_sdi.constprop.11+0x20>
 8003d40:	2002      	movs	r0, #2
 8003d42:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8003d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d46:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8003d48:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8003d4a:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f7      	beq.n	8003d40 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8003d50:	3430      	adds	r4, #48	; 0x30
 8003d52:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003d54:	2000      	movs	r0, #0
 8003d56:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8003d58:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8003d5a:	8961      	ldrh	r1, [r4, #10]
 8003d5c:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8003d5e:	b961      	cbnz	r1, 8003d7a <dir_sdi.constprop.11+0x56>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003d60:	4611      	mov	r1, r2
 8003d62:	6828      	ldr	r0, [r5, #0]
 8003d64:	f7ff fef6 	bl	8003b54 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003d68:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8003d6a:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003d6c:	d00b      	beq.n	8003d86 <dir_sdi.constprop.11+0x62>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8003d6e:	2801      	cmp	r0, #1
 8003d70:	d9e6      	bls.n	8003d40 <dir_sdi.constprop.11+0x1c>
 8003d72:	6963      	ldr	r3, [r4, #20]
 8003d74:	4298      	cmp	r0, r3
 8003d76:	d3f3      	bcc.n	8003d60 <dir_sdi.constprop.11+0x3c>
 8003d78:	e7e2      	b.n	8003d40 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	4620      	mov	r0, r4
 8003d7e:	f7ff fbcd 	bl	800351c <clust2sect>
 8003d82:	61e8      	str	r0, [r5, #28]
 8003d84:	e7e0      	b.n	8003d48 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003d86:	2001      	movs	r0, #1
}
 8003d88:	bd38      	pop	{r3, r4, r5, pc}

08003d8a <dir_next>:
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003d8a:	69c3      	ldr	r3, [r0, #28]
{
 8003d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d90:	4605      	mov	r5, r0
 8003d92:	460f      	mov	r7, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003d94:	b1ab      	cbz	r3, 8003dc2 <dir_next+0x38>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8003d96:	6942      	ldr	r2, [r0, #20]
 8003d98:	f102 0820 	add.w	r8, r2, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003d9c:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8003da0:	d20f      	bcs.n	8003dc2 <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003da2:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8003da6:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8003da8:	f1b9 0f00 	cmp.w	r9, #0
 8003dac:	d14f      	bne.n	8003e4e <dir_next+0xc4>
		if (!dp->clust) {		/* Static table */
 8003dae:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8003db0:	3301      	adds	r3, #1
 8003db2:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8003db4:	b941      	cbnz	r1, 8003dc8 <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8003db6:	8923      	ldrh	r3, [r4, #8]
 8003db8:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8003dbc:	d847      	bhi.n	8003e4e <dir_next+0xc4>
				dp->sect = 0; return FR_NO_FILE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8003dc2:	2004      	movs	r0, #4
 8003dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8003dc8:	8963      	ldrh	r3, [r4, #10]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	ea13 2358 	ands.w	r3, r3, r8, lsr #9
 8003dd0:	d13d      	bne.n	8003e4e <dir_next+0xc4>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f7ff febe 	bl	8003b54 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003dd8:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8003dda:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8003ddc:	d802      	bhi.n	8003de4 <dir_next+0x5a>
 8003dde:	2002      	movs	r0, #2
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8003de4:	1c42      	adds	r2, r0, #1
 8003de6:	d102      	bne.n	8003dee <dir_next+0x64>
 8003de8:	2001      	movs	r0, #1
 8003dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8003dee:	6963      	ldr	r3, [r4, #20]
 8003df0:	4298      	cmp	r0, r3
 8003df2:	d326      	bcc.n	8003e42 <dir_next+0xb8>
					if (!stretch) {								/* If no stretch, report EOT */
 8003df4:	2f00      	cmp	r7, #0
 8003df6:	d0e2      	beq.n	8003dbe <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8003df8:	69a9      	ldr	r1, [r5, #24]
 8003dfa:	4628      	mov	r0, r5
 8003dfc:	f7ff ff04 	bl	8003c08 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003e00:	4606      	mov	r6, r0
 8003e02:	2800      	cmp	r0, #0
 8003e04:	d037      	beq.n	8003e76 <dir_next+0xec>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8003e06:	2801      	cmp	r0, #1
 8003e08:	d0e9      	beq.n	8003dde <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d0ec      	beq.n	8003de8 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff fc19 	bl	8003646 <sync_window>
 8003e14:	4607      	mov	r7, r0
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d1e6      	bne.n	8003de8 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e20:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003e24:	f7ff faf2 	bl	800340c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e28:	4631      	mov	r1, r6
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7ff fb76 	bl	800351c <clust2sect>
						fs->wflag = 1;
 8003e30:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e34:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003e36:	8963      	ldrh	r3, [r4, #10]
 8003e38:	429f      	cmp	r7, r3
 8003e3a:	d310      	bcc.n	8003e5e <dir_next+0xd4>
					fs->winsect -= n;							/* Restore window offset */
 8003e3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e3e:	1bdf      	subs	r7, r3, r7
 8003e40:	62e7      	str	r7, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8003e42:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8003e44:	4631      	mov	r1, r6
 8003e46:	4620      	mov	r0, r4
 8003e48:	f7ff fb68 	bl	800351c <clust2sect>
 8003e4c:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003e4e:	3430      	adds	r4, #48	; 0x30
 8003e50:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8003e52:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8003e56:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8003e58:	2000      	movs	r0, #0
 8003e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						fs->wflag = 1;
 8003e5e:	f884 a003 	strb.w	sl, [r4, #3]
 8003e62:	4620      	mov	r0, r4
 8003e64:	f7ff fbcc 	bl	8003600 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d1bd      	bne.n	8003de8 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8003e6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003e6e:	3301      	adds	r3, #1
 8003e70:	3701      	adds	r7, #1
 8003e72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e74:	e7df      	b.n	8003e36 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003e76:	2007      	movs	r0, #7
}
 8003e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003e7c <follow_path>:
{
 8003e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8003e80:	6807      	ldr	r7, [r0, #0]
{
 8003e82:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8003e84:	780b      	ldrb	r3, [r1, #0]
 8003e86:	2b2f      	cmp	r3, #47	; 0x2f
 8003e88:	460d      	mov	r5, r1
 8003e8a:	f101 0101 	add.w	r1, r1, #1
 8003e8e:	d0f9      	beq.n	8003e84 <follow_path+0x8>
 8003e90:	2b5c      	cmp	r3, #92	; 0x5c
 8003e92:	d0f7      	beq.n	8003e84 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8003e94:	2300      	movs	r3, #0
 8003e96:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003e98:	782b      	ldrb	r3, [r5, #0]
 8003e9a:	2b1f      	cmp	r3, #31
 8003e9c:	d959      	bls.n	8003f52 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003e9e:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8003ffc <follow_path+0x180>
	p = *path; sfn = dp->fn;
 8003ea2:	f104 0624 	add.w	r6, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8003ea6:	220b      	movs	r2, #11
 8003ea8:	2120      	movs	r1, #32
 8003eaa:	4630      	mov	r0, r6
 8003eac:	f7ff faae 	bl	800340c <mem_set>
	si = i = 0; ni = 8;
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8003eba:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003ebe:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8003ec0:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8003ec4:	d90b      	bls.n	8003ede <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003ec6:	2b2f      	cmp	r3, #47	; 0x2f
 8003ec8:	d14b      	bne.n	8003f62 <follow_path+0xe6>
 8003eca:	1868      	adds	r0, r5, r1
 8003ecc:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8003ece:	f810 eb01 	ldrb.w	lr, [r0], #1
 8003ed2:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8003ed6:	d0f9      	beq.n	8003ecc <follow_path+0x50>
 8003ed8:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8003edc:	d0f6      	beq.n	8003ecc <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8003ede:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8003ee0:	2a00      	cmp	r2, #0
 8003ee2:	d054      	beq.n	8003f8e <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003ee4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8003ee8:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8003eec:	2ae5      	cmp	r2, #229	; 0xe5
 8003eee:	bf04      	itt	eq
 8003ef0:	2205      	moveq	r2, #5
 8003ef2:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8003ef6:	2b21      	cmp	r3, #33	; 0x21
 8003ef8:	bf34      	ite	cc
 8003efa:	2304      	movcc	r3, #4
 8003efc:	2300      	movcs	r3, #0
 8003efe:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003f02:	4620      	mov	r0, r4
 8003f04:	f7ff ff0e 	bl	8003d24 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8003f08:	2800      	cmp	r0, #0
 8003f0a:	d145      	bne.n	8003f98 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8003f0c:	69e1      	ldr	r1, [r4, #28]
 8003f0e:	4648      	mov	r0, r9
 8003f10:	f7ff fbea 	bl	80036e8 <move_window>
		if (res != FR_OK) break;
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d13f      	bne.n	8003f98 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8003f18:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003f1a:	781a      	ldrb	r2, [r3, #0]
 8003f1c:	2a00      	cmp	r2, #0
 8003f1e:	d046      	beq.n	8003fae <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8003f20:	7ada      	ldrb	r2, [r3, #11]
 8003f22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003f26:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003f28:	7ada      	ldrb	r2, [r3, #11]
 8003f2a:	0711      	lsls	r1, r2, #28
 8003f2c:	d40c      	bmi.n	8003f48 <follow_path+0xcc>
 8003f2e:	f103 0e0b 	add.w	lr, r3, #11
 8003f32:	4631      	mov	r1, r6
		r = *d++ - *s++;
 8003f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f38:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8003f3c:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8003f3e:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 8003f42:	d027      	beq.n	8003f94 <follow_path+0x118>
 8003f44:	2a00      	cmp	r2, #0
 8003f46:	d0f5      	beq.n	8003f34 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f7ff ff1d 	bl	8003d8a <dir_next>
 8003f50:	e7da      	b.n	8003f08 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8003f58:	4620      	mov	r0, r4
}
 8003f5a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8003f5e:	f7ff bee1 	b.w	8003d24 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8003f62:	2b5c      	cmp	r3, #92	; 0x5c
 8003f64:	d0b1      	beq.n	8003eca <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8003f66:	2b2e      	cmp	r3, #46	; 0x2e
 8003f68:	d036      	beq.n	8003fd8 <follow_path+0x15c>
 8003f6a:	4290      	cmp	r0, r2
 8003f6c:	d90f      	bls.n	8003f8e <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8003f6e:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8003f72:	bf18      	it	ne
 8003f74:	3b80      	subne	r3, #128	; 0x80
 8003f76:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004000 <follow_path+0x184>
 8003f7a:	bf18      	it	ne
 8003f7c:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 8003f80:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 8003f84:	f1bc 0f00 	cmp.w	ip, #0
 8003f88:	d02b      	beq.n	8003fe2 <follow_path+0x166>
 8003f8a:	4563      	cmp	r3, ip
 8003f8c:	d1f8      	bne.n	8003f80 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003f8e:	2006      	movs	r0, #6
	return res;
 8003f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d1d7      	bne.n	8003f48 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8003f98:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8003f9c:	b148      	cbz	r0, 8003fb2 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003f9e:	2804      	cmp	r0, #4
 8003fa0:	d129      	bne.n	8003ff6 <follow_path+0x17a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003fa2:	f013 0f04 	tst.w	r3, #4
 8003fa6:	bf08      	it	eq
 8003fa8:	2005      	moveq	r0, #5
 8003faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003fae:	2004      	movs	r0, #4
 8003fb0:	e7f2      	b.n	8003f98 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003fb2:	075a      	lsls	r2, r3, #29
 8003fb4:	d41f      	bmi.n	8003ff6 <follow_path+0x17a>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8003fb6:	79a3      	ldrb	r3, [r4, #6]
 8003fb8:	06db      	lsls	r3, r3, #27
 8003fba:	d50a      	bpl.n	8003fd2 <follow_path+0x156>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8003fbc:	6963      	ldr	r3, [r4, #20]
 8003fbe:	7838      	ldrb	r0, [r7, #0]
 8003fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003fc8:	4419      	add	r1, r3
 8003fca:	f7ff faff 	bl	80035cc <ld_clust.isra.1>
 8003fce:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003fd0:	e767      	b.n	8003ea2 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8003fd2:	2005      	movs	r0, #5
 8003fd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8003fd8:	280b      	cmp	r0, #11
 8003fda:	d0d8      	beq.n	8003f8e <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8003fdc:	2208      	movs	r2, #8
 8003fde:	200b      	movs	r0, #11
 8003fe0:	e76b      	b.n	8003eba <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8003fe2:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8003fe6:	f1bc 0f19 	cmp.w	ip, #25
 8003fea:	d801      	bhi.n	8003ff0 <follow_path+0x174>
 8003fec:	3b20      	subs	r3, #32
 8003fee:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8003ff0:	54b3      	strb	r3, [r6, r2]
 8003ff2:	3201      	adds	r2, #1
 8003ff4:	e761      	b.n	8003eba <follow_path+0x3e>
}
 8003ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ffa:	bf00      	nop
 8003ffc:	08005b90 	.word	0x08005b90
 8004000:	08005c5f 	.word	0x08005c5f

08004004 <dir_register>:
{
 8004004:	b570      	push	{r4, r5, r6, lr}
 8004006:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8004008:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800400a:	f7ff fe8b 	bl	8003d24 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 800400e:	4604      	mov	r4, r0
 8004010:	bb28      	cbnz	r0, 800405e <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8004012:	69e9      	ldr	r1, [r5, #28]
 8004014:	4630      	mov	r0, r6
 8004016:	f7ff fb67 	bl	80036e8 <move_window>
			if (res != FR_OK) break;
 800401a:	4604      	mov	r4, r0
 800401c:	b9f8      	cbnz	r0, 800405e <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800401e:	6a2b      	ldr	r3, [r5, #32]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2be5      	cmp	r3, #229	; 0xe5
 8004024:	d114      	bne.n	8004050 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8004026:	69e9      	ldr	r1, [r5, #28]
 8004028:	4630      	mov	r0, r6
 800402a:	f7ff fb5d 	bl	80036e8 <move_window>
		if (res == FR_OK) {
 800402e:	4604      	mov	r4, r0
 8004030:	b960      	cbnz	r0, 800404c <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004032:	4601      	mov	r1, r0
 8004034:	2220      	movs	r2, #32
 8004036:	6a28      	ldr	r0, [r5, #32]
 8004038:	f7ff f9e8 	bl	800340c <mem_set>
 800403c:	220b      	movs	r2, #11
 800403e:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8004042:	6a28      	ldr	r0, [r5, #32]
 8004044:	f7ff fab9 	bl	80035ba <mem_cpy.part.0>
			fs->wflag = 1;
 8004048:	2301      	movs	r3, #1
 800404a:	70f3      	strb	r3, [r6, #3]
}
 800404c:	4620      	mov	r0, r4
 800404e:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0e8      	beq.n	8004026 <dir_register+0x22>
			res = dir_next(dp, 1);
 8004054:	2101      	movs	r1, #1
 8004056:	4628      	mov	r0, r5
 8004058:	f7ff fe97 	bl	8003d8a <dir_next>
 800405c:	e7d7      	b.n	800400e <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800405e:	2c04      	cmp	r4, #4
 8004060:	bf08      	it	eq
 8004062:	2407      	moveq	r4, #7
 8004064:	e7f2      	b.n	800404c <dir_register+0x48>
	...

08004068 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004068:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800406a:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800406c:	a804      	add	r0, sp, #16
{
 800406e:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 8004070:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 8004074:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004076:	f7ff fa6d 	bl	8003554 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800407a:	1e05      	subs	r5, r0, #0
 800407c:	db1f      	blt.n	80040be <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800407e:	4912      	ldr	r1, [pc, #72]	; (80040c8 <f_mount+0x60>)
 8004080:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 8004084:	b15c      	cbz	r4, 800409e <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <f_mount+0x64>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	4294      	cmp	r4, r2
 800408c:	bf04      	itt	eq
 800408e:	2200      	moveq	r2, #0
 8004090:	601a      	streq	r2, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	2000      	movs	r0, #0
 8004096:	4294      	cmp	r4, r2
 8004098:	bf08      	it	eq
 800409a:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800409c:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 800409e:	9801      	ldr	r0, [sp, #4]
 80040a0:	b108      	cbz	r0, 80040a6 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 80040a2:	2300      	movs	r3, #0
 80040a4:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80040a6:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80040aa:	b130      	cbz	r0, 80040ba <f_mount+0x52>
 80040ac:	2e01      	cmp	r6, #1
 80040ae:	d108      	bne.n	80040c2 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80040b0:	2200      	movs	r2, #0
 80040b2:	a901      	add	r1, sp, #4
 80040b4:	4668      	mov	r0, sp
 80040b6:	f7ff fb73 	bl	80037a0 <find_volume>
	LEAVE_FF(fs, res);
}
 80040ba:	b004      	add	sp, #16
 80040bc:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80040be:	200b      	movs	r0, #11
 80040c0:	e7fb      	b.n	80040ba <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80040c2:	2000      	movs	r0, #0
 80040c4:	e7f9      	b.n	80040ba <f_mount+0x52>
 80040c6:	bf00      	nop
 80040c8:	2000002c 	.word	0x2000002c
 80040cc:	20000030 	.word	0x20000030

080040d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80040d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d4:	b090      	sub	sp, #64	; 0x40
 80040d6:	4690      	mov	r8, r2
 80040d8:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80040da:	4604      	mov	r4, r0
 80040dc:	2800      	cmp	r0, #0
 80040de:	f000 80ce 	beq.w	800427e <f_open+0x1ae>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80040e2:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 80040e6:	462a      	mov	r2, r5
 80040e8:	a903      	add	r1, sp, #12
 80040ea:	a801      	add	r0, sp, #4
 80040ec:	f7ff fb58 	bl	80037a0 <find_volume>
	if (res == FR_OK) {
 80040f0:	4607      	mov	r7, r0
 80040f2:	bb38      	cbnz	r0, 8004144 <f_open+0x74>
		dj.obj.fs = fs;
 80040f4:	ae10      	add	r6, sp, #64	; 0x40
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80040fc:	9901      	ldr	r1, [sp, #4]
 80040fe:	4630      	mov	r0, r6
 8004100:	f7ff febc 	bl	8003e7c <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004104:	b958      	cbnz	r0, 800411e <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004106:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800410a:	2b00      	cmp	r3, #0
 800410c:	db1e      	blt.n	800414c <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800410e:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8004112:	bf14      	ite	ne
 8004114:	2101      	movne	r1, #1
 8004116:	2100      	moveq	r1, #0
 8004118:	4630      	mov	r0, r6
 800411a:	f7ff f97d 	bl	8003418 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800411e:	f018 0f1c 	tst.w	r8, #28
 8004122:	d073      	beq.n	800420c <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8004124:	b1a0      	cbz	r0, 8004150 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004126:	2804      	cmp	r0, #4
 8004128:	d109      	bne.n	800413e <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800412a:	4b71      	ldr	r3, [pc, #452]	; (80042f0 <f_open+0x220>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	2a00      	cmp	r2, #0
 8004130:	f000 80da 	beq.w	80042e8 <f_open+0x218>
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	f000 80d6 	beq.w	80042e8 <f_open+0x218>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800413c:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800413e:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004142:	b170      	cbz	r0, 8004162 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8004144:	2300      	movs	r3, #0
 8004146:	6023      	str	r3, [r4, #0]
 8004148:	4607      	mov	r7, r0
 800414a:	e092      	b.n	8004272 <f_open+0x1a2>
				res = FR_INVALID_NAME;
 800414c:	2006      	movs	r0, #6
 800414e:	e7e6      	b.n	800411e <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004150:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004154:	f013 0f11 	tst.w	r3, #17
 8004158:	d163      	bne.n	8004222 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800415a:	f018 0f04 	tst.w	r8, #4
 800415e:	f040 80bd 	bne.w	80042dc <f_open+0x20c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004162:	0728      	lsls	r0, r5, #28
 8004164:	d53c      	bpl.n	80041e0 <f_open+0x110>
				dw = GET_FATTIME();
 8004166:	f000 fd99 	bl	8004c9c <get_fattime>
 800416a:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800416c:	4601      	mov	r1, r0
 800416e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004170:	300e      	adds	r0, #14
 8004172:	f7ff f943 	bl	80033fc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004176:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004178:	4611      	mov	r1, r2
 800417a:	3016      	adds	r0, #22
 800417c:	f7ff f93e 	bl	80033fc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004180:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004182:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004186:	2220      	movs	r2, #32
 8004188:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800418a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800418e:	f899 0000 	ldrb.w	r0, [r9]
 8004192:	4651      	mov	r1, sl
 8004194:	f7ff fa1a 	bl	80035cc <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004198:	2200      	movs	r2, #0
 800419a:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800419c:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800419e:	4648      	mov	r0, r9
 80041a0:	f7ff fa22 	bl	80035e8 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 80041a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80041a6:	2200      	movs	r2, #0
 80041a8:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80041aa:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80041ac:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80041ae:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80041b0:	9b03      	ldr	r3, [sp, #12]
 80041b2:	2101      	movs	r1, #1
 80041b4:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80041b6:	f1b8 0f00 	cmp.w	r8, #0
 80041ba:	d011      	beq.n	80041e0 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 80041bc:	4641      	mov	r1, r8
 80041be:	4630      	mov	r0, r6
						dw = fs->winsect;
 80041c0:	f8d3 902c 	ldr.w	r9, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 80041c4:	f7ff fd78 	bl	8003cb8 <remove_chain>
						if (res == FR_OK) {
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d1bb      	bne.n	8004144 <f_open+0x74>
							res = move_window(fs, dw);
 80041cc:	4649      	mov	r1, r9
 80041ce:	9803      	ldr	r0, [sp, #12]
 80041d0:	f7ff fa8a 	bl	80036e8 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80041d4:	9a03      	ldr	r2, [sp, #12]
 80041d6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 80041da:	60d3      	str	r3, [r2, #12]
		if (res == FR_OK) {
 80041dc:	2800      	cmp	r0, #0
 80041de:	d1b1      	bne.n	8004144 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80041e0:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80041e2:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80041e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e6:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 80041e8:	bf48      	it	mi
 80041ea:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80041ee:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 80041f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80041f4:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80041f6:	bf14      	ite	ne
 80041f8:	2101      	movne	r1, #1
 80041fa:	2100      	moveq	r1, #0
 80041fc:	4630      	mov	r0, r6
 80041fe:	f7ff f939 	bl	8003474 <inc_lock>
 8004202:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8004204:	2800      	cmp	r0, #0
 8004206:	d13c      	bne.n	8004282 <f_open+0x1b2>
 8004208:	2002      	movs	r0, #2
 800420a:	e79b      	b.n	8004144 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 800420c:	2800      	cmp	r0, #0
 800420e:	d199      	bne.n	8004144 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8004210:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8004214:	06da      	lsls	r2, r3, #27
 8004216:	d463      	bmi.n	80042e0 <f_open+0x210>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8004218:	f018 0f02 	tst.w	r8, #2
 800421c:	d0e0      	beq.n	80041e0 <f_open+0x110>
 800421e:	07db      	lsls	r3, r3, #31
 8004220:	d5de      	bpl.n	80041e0 <f_open+0x110>
					res = FR_DENIED;
 8004222:	2007      	movs	r0, #7
 8004224:	e78e      	b.n	8004144 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	f7ff fc94 	bl	8003b54 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 800422c:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800422e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8004230:	d923      	bls.n	800427a <f_open+0x1aa>
 8004232:	1c42      	adds	r2, r0, #1
 8004234:	4250      	negs	r0, r2
 8004236:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8004238:	eba5 0508 	sub.w	r5, r5, r8
 800423c:	2800      	cmp	r0, #0
 800423e:	d049      	beq.n	80042d4 <f_open+0x204>
				fp->clust = clst;
 8004240:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8004242:	2800      	cmp	r0, #0
 8004244:	f47f af7e 	bne.w	8004144 <f_open+0x74>
 8004248:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800424c:	b18b      	cbz	r3, 8004272 <f_open+0x1a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800424e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004252:	4640      	mov	r0, r8
 8004254:	f7ff f962 	bl	800351c <clust2sect>
 8004258:	2800      	cmp	r0, #0
 800425a:	d0d5      	beq.n	8004208 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800425c:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 8004260:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8004262:	2301      	movs	r3, #1
 8004264:	4631      	mov	r1, r6
 8004266:	f898 0001 	ldrb.w	r0, [r8, #1]
 800426a:	f7ff f895 	bl	8003398 <disk_read>
 800426e:	2800      	cmp	r0, #0
 8004270:	d138      	bne.n	80042e4 <f_open+0x214>

	LEAVE_FF(fs, res);
}
 8004272:	4638      	mov	r0, r7
 8004274:	b010      	add	sp, #64	; 0x40
 8004276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 800427a:	2002      	movs	r0, #2
 800427c:	e7dc      	b.n	8004238 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 800427e:	2709      	movs	r7, #9
 8004280:	e7f7      	b.n	8004272 <f_open+0x1a2>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8004282:	9e03      	ldr	r6, [sp, #12]
 8004284:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8004288:	7830      	ldrb	r0, [r6, #0]
 800428a:	4641      	mov	r1, r8
 800428c:	f7ff f99e 	bl	80035cc <ld_clust.isra.1>
 8004290:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8004292:	f108 001c 	add.w	r0, r8, #28
 8004296:	f7ff f8a9 	bl	80033ec <ld_dword>
			fp->obj.id = fs->id;
 800429a:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 800429c:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800429e:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80042a0:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80042a4:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 80042a6:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80042a8:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 80042aa:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 80042ac:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80042ae:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80042b0:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80042b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7ff f8a8 	bl	800340c <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80042bc:	06ab      	lsls	r3, r5, #26
 80042be:	d5d8      	bpl.n	8004272 <f_open+0x1a2>
 80042c0:	68e5      	ldr	r5, [r4, #12]
 80042c2:	2d00      	cmp	r5, #0
 80042c4:	d0d5      	beq.n	8004272 <f_open+0x1a2>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80042c6:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80042c8:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80042ca:	f8b3 800a 	ldrh.w	r8, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80042ce:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80042d0:	ea4f 2848 	mov.w	r8, r8, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80042d4:	45a8      	cmp	r8, r5
 80042d6:	d3a6      	bcc.n	8004226 <f_open+0x156>
 80042d8:	2000      	movs	r0, #0
 80042da:	e7b1      	b.n	8004240 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80042dc:	2008      	movs	r0, #8
 80042de:	e731      	b.n	8004144 <f_open+0x74>
					res = FR_NO_FILE;
 80042e0:	2004      	movs	r0, #4
 80042e2:	e72f      	b.n	8004144 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80042e4:	2001      	movs	r0, #1
 80042e6:	e72d      	b.n	8004144 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80042e8:	4630      	mov	r0, r6
 80042ea:	f7ff fe8b 	bl	8004004 <dir_register>
 80042ee:	e726      	b.n	800413e <f_open+0x6e>
 80042f0:	20000030 	.word	0x20000030

080042f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80042f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f8:	469b      	mov	fp, r3
 80042fa:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 80042fc:	2300      	movs	r3, #0
{
 80042fe:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8004300:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8004304:	a903      	add	r1, sp, #12
{
 8004306:	4604      	mov	r4, r0
 8004308:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800430a:	f7ff f93b 	bl	8003584 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800430e:	4606      	mov	r6, r0
 8004310:	bb58      	cbnz	r0, 800436a <f_write+0x76>
 8004312:	7d66      	ldrb	r6, [r4, #21]
 8004314:	bb4e      	cbnz	r6, 800436a <f_write+0x76>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8004316:	7d23      	ldrb	r3, [r4, #20]
 8004318:	079a      	lsls	r2, r3, #30
 800431a:	f140 80ae 	bpl.w	800447a <f_write+0x186>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800431e:	69a3      	ldr	r3, [r4, #24]
 8004320:	42fb      	cmn	r3, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8004322:	bf28      	it	cs
 8004324:	43df      	mvncs	r7, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8004326:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 800432a:	b1d7      	cbz	r7, 8004362 <f_write+0x6e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800432c:	69a1      	ldr	r1, [r4, #24]
 800432e:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8004332:	2b00      	cmp	r3, #0
 8004334:	f040 808f 	bne.w	8004456 <f_write+0x162>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	895b      	ldrh	r3, [r3, #10]
 800433c:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800433e:	ea13 2351 	ands.w	r3, r3, r1, lsr #9
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	d124      	bne.n	8004390 <f_write+0x9c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004346:	b931      	cbnz	r1, 8004356 <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8004348:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800434a:	b9a0      	cbnz	r0, 8004376 <f_write+0x82>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800434c:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800434e:	4620      	mov	r0, r4
 8004350:	f7ff fc5a 	bl	8003c08 <create_chain>
 8004354:	e004      	b.n	8004360 <f_write+0x6c>
					if (fp->cltbl) {
 8004356:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004358:	b15b      	cbz	r3, 8004372 <f_write+0x7e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800435a:	4620      	mov	r0, r4
 800435c:	f7ff f8e9 	bl	8003532 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004360:	b948      	cbnz	r0, 8004376 <f_write+0x82>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8004362:	7d23      	ldrb	r3, [r4, #20]
 8004364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004368:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 800436a:	4630      	mov	r0, r6
 800436c:	b005      	add	sp, #20
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8004372:	69e1      	ldr	r1, [r4, #28]
 8004374:	e7eb      	b.n	800434e <f_write+0x5a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8004376:	2801      	cmp	r0, #1
 8004378:	d102      	bne.n	8004380 <f_write+0x8c>
 800437a:	2602      	movs	r6, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800437c:	7566      	strb	r6, [r4, #21]
 800437e:	e7f4      	b.n	800436a <f_write+0x76>
 8004380:	1c43      	adds	r3, r0, #1
 8004382:	d101      	bne.n	8004388 <f_write+0x94>
 8004384:	2601      	movs	r6, #1
 8004386:	e7f9      	b.n	800437c <f_write+0x88>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8004388:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800438a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800438c:	b903      	cbnz	r3, 8004390 <f_write+0x9c>
 800438e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8004390:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	da0c      	bge.n	80043b2 <f_write+0xbe>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8004398:	9803      	ldr	r0, [sp, #12]
 800439a:	6a22      	ldr	r2, [r4, #32]
 800439c:	7840      	ldrb	r0, [r0, #1]
 800439e:	2301      	movs	r3, #1
 80043a0:	4651      	mov	r1, sl
 80043a2:	f7ff f807 	bl	80033b4 <disk_write>
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d1ec      	bne.n	8004384 <f_write+0x90>
				fp->flag &= (BYTE)~FA_DIRTY;
 80043aa:	7d23      	ldrb	r3, [r4, #20]
 80043ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043b0:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80043b2:	9b03      	ldr	r3, [sp, #12]
 80043b4:	69e1      	ldr	r1, [r4, #28]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff f8af 	bl	800351c <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80043be:	2800      	cmp	r0, #0
 80043c0:	d0db      	beq.n	800437a <f_write+0x86>
			sect += csect;
 80043c2:	9b01      	ldr	r3, [sp, #4]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80043c4:	0a7d      	lsrs	r5, r7, #9
			sect += csect;
 80043c6:	eb03 0800 	add.w	r8, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80043ca:	d032      	beq.n	8004432 <f_write+0x13e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80043cc:	9b00      	ldr	r3, [sp, #0]
 80043ce:	9a01      	ldr	r2, [sp, #4]
 80043d0:	895b      	ldrh	r3, [r3, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80043d2:	9800      	ldr	r0, [sp, #0]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80043d4:	442a      	add	r2, r5
 80043d6:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 80043d8:	bf88      	it	hi
 80043da:	9a01      	ldrhi	r2, [sp, #4]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80043dc:	7840      	ldrb	r0, [r0, #1]
					cc = fs->csize - csect;
 80043de:	bf88      	it	hi
 80043e0:	1a9d      	subhi	r5, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80043e2:	462b      	mov	r3, r5
 80043e4:	4642      	mov	r2, r8
 80043e6:	4649      	mov	r1, r9
 80043e8:	f7fe ffe4 	bl	80033b4 <disk_write>
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d1c9      	bne.n	8004384 <f_write+0x90>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80043f0:	6a21      	ldr	r1, [r4, #32]
 80043f2:	eba1 0108 	sub.w	r1, r1, r8
 80043f6:	428d      	cmp	r5, r1
 80043f8:	d90a      	bls.n	8004410 <f_write+0x11c>
 80043fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fe:	eb09 2141 	add.w	r1, r9, r1, lsl #9
 8004402:	4650      	mov	r0, sl
 8004404:	f7ff f8d9 	bl	80035ba <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8004408:	7d23      	ldrb	r3, [r4, #20]
 800440a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440e:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8004410:	026d      	lsls	r5, r5, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8004412:	69a3      	ldr	r3, [r4, #24]
 8004414:	68e2      	ldr	r2, [r4, #12]
 8004416:	442b      	add	r3, r5
 8004418:	61a3      	str	r3, [r4, #24]
 800441a:	429a      	cmp	r2, r3
 800441c:	bf2c      	ite	cs
 800441e:	60e2      	strcs	r2, [r4, #12]
 8004420:	60e3      	strcc	r3, [r4, #12]
 8004422:	f8db 3000 	ldr.w	r3, [fp]
 8004426:	442b      	add	r3, r5
 8004428:	44a9      	add	r9, r5
 800442a:	f8cb 3000 	str.w	r3, [fp]
 800442e:	1b7f      	subs	r7, r7, r5
 8004430:	e77b      	b.n	800432a <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8004432:	6a23      	ldr	r3, [r4, #32]
 8004434:	4598      	cmp	r8, r3
 8004436:	d00c      	beq.n	8004452 <f_write+0x15e>
 8004438:	69a2      	ldr	r2, [r4, #24]
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	429a      	cmp	r2, r3
 800443e:	d208      	bcs.n	8004452 <f_write+0x15e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8004440:	9800      	ldr	r0, [sp, #0]
 8004442:	2301      	movs	r3, #1
 8004444:	4642      	mov	r2, r8
 8004446:	4651      	mov	r1, sl
 8004448:	7840      	ldrb	r0, [r0, #1]
 800444a:	f7fe ffa5 	bl	8003398 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800444e:	2800      	cmp	r0, #0
 8004450:	d198      	bne.n	8004384 <f_write+0x90>
			fp->sect = sect;
 8004452:	f8c4 8020 	str.w	r8, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8004456:	69a0      	ldr	r0, [r4, #24]
 8004458:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800445c:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
 8004460:	42bd      	cmp	r5, r7
 8004462:	bf28      	it	cs
 8004464:	463d      	movcs	r5, r7
 8004466:	462a      	mov	r2, r5
 8004468:	4649      	mov	r1, r9
 800446a:	4450      	add	r0, sl
 800446c:	f7ff f8a5 	bl	80035ba <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8004470:	7d23      	ldrb	r3, [r4, #20]
 8004472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004476:	7523      	strb	r3, [r4, #20]
 8004478:	e7cb      	b.n	8004412 <f_write+0x11e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800447a:	2607      	movs	r6, #7
 800447c:	e775      	b.n	800436a <f_write+0x76>

0800447e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800447e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004480:	a901      	add	r1, sp, #4
{
 8004482:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8004484:	f7ff f87e 	bl	8003584 <validate>
	if (res == FR_OK) {
 8004488:	4605      	mov	r5, r0
 800448a:	2800      	cmp	r0, #0
 800448c:	d13a      	bne.n	8004504 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800448e:	7d23      	ldrb	r3, [r4, #20]
 8004490:	065a      	lsls	r2, r3, #25
 8004492:	d537      	bpl.n	8004504 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8004494:	061b      	lsls	r3, r3, #24
 8004496:	d50c      	bpl.n	80044b2 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8004498:	9801      	ldr	r0, [sp, #4]
 800449a:	6a22      	ldr	r2, [r4, #32]
 800449c:	7840      	ldrb	r0, [r0, #1]
 800449e:	2301      	movs	r3, #1
 80044a0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80044a4:	f7fe ff86 	bl	80033b4 <disk_write>
 80044a8:	bb78      	cbnz	r0, 800450a <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80044aa:	7d23      	ldrb	r3, [r4, #20]
 80044ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044b0:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80044b2:	f000 fbf3 	bl	8004c9c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80044b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80044b8:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80044ba:	9801      	ldr	r0, [sp, #4]
 80044bc:	f7ff f914 	bl	80036e8 <move_window>
				if (res == FR_OK) {
 80044c0:	4605      	mov	r5, r0
 80044c2:	b9f8      	cbnz	r0, 8004504 <f_sync+0x86>
					dir = fp->dir_ptr;
 80044c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80044c6:	7af3      	ldrb	r3, [r6, #11]
 80044c8:	f043 0320 	orr.w	r3, r3, #32
 80044cc:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80044ce:	68a2      	ldr	r2, [r4, #8]
 80044d0:	6820      	ldr	r0, [r4, #0]
 80044d2:	4631      	mov	r1, r6
 80044d4:	f7ff f888 	bl	80035e8 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80044d8:	68e1      	ldr	r1, [r4, #12]
 80044da:	f106 001c 	add.w	r0, r6, #28
 80044de:	f7fe ff8d 	bl	80033fc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80044e2:	4639      	mov	r1, r7
 80044e4:	f106 0016 	add.w	r0, r6, #22
 80044e8:	f7fe ff88 	bl	80033fc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 80044ec:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 80044ee:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 80044f0:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 80044f2:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 80044f4:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80044f6:	f7ff f8ac 	bl	8003652 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80044fa:	7d23      	ldrb	r3, [r4, #20]
 80044fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8004500:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8004502:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8004504:	4628      	mov	r0, r5
 8004506:	b003      	add	sp, #12
 8004508:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800450a:	2501      	movs	r5, #1
 800450c:	e7fa      	b.n	8004504 <f_sync+0x86>

0800450e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800450e:	b513      	push	{r0, r1, r4, lr}
 8004510:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004512:	f7ff ffb4 	bl	800447e <f_sync>
	if (res == FR_OK)
 8004516:	b948      	cbnz	r0, 800452c <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8004518:	a901      	add	r1, sp, #4
 800451a:	4620      	mov	r0, r4
 800451c:	f7ff f832 	bl	8003584 <validate>
		if (res == FR_OK) {
 8004520:	b920      	cbnz	r0, 800452c <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8004522:	6920      	ldr	r0, [r4, #16]
 8004524:	f7fe ffe2 	bl	80034ec <dec_lock>
			if (res == FR_OK)
 8004528:	b900      	cbnz	r0, 800452c <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800452a:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800452c:	b002      	add	sp, #8
 800452e:	bd10      	pop	{r4, pc}

08004530 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 8004530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004534:	b08d      	sub	sp, #52	; 0x34
 8004536:	af0c      	add	r7, sp, #48	; 0x30
 8004538:	460d      	mov	r5, r1
 800453a:	f847 0d0c 	str.w	r0, [r7, #-12]!
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800453e:	4638      	mov	r0, r7
{
 8004540:	4616      	mov	r6, r2
 8004542:	461c      	mov	r4, r3
	vol = get_ldnumber(&path);					/* Get target logical drive */
 8004544:	f7ff f806 	bl	8003554 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004548:	2800      	cmp	r0, #0
 800454a:	f2c0 8293 	blt.w	8004a74 <f_mkfs+0x544>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800454e:	4bbe      	ldr	r3, [pc, #760]	; (8004848 <f_mkfs+0x318>)
 8004550:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8004554:	b10b      	cbz	r3, 800455a <f_mkfs+0x2a>
 8004556:	2200      	movs	r2, #0
 8004558:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800455a:	fa5f fa80 	uxtb.w	sl, r0
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800455e:	4650      	mov	r0, sl
 8004560:	f7fe ff0a 	bl	8003378 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8004564:	07c3      	lsls	r3, r0, #31
 8004566:	f100 8287 	bmi.w	8004a78 <f_mkfs+0x548>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800456a:	0747      	lsls	r7, r0, #29
 800456c:	f100 8286 	bmi.w	8004a7c <f_mkfs+0x54c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 8004570:	aa0a      	add	r2, sp, #40	; 0x28
 8004572:	2103      	movs	r1, #3
 8004574:	4650      	mov	r0, sl
 8004576:	f7fe ff2b 	bl	80033d0 <disk_ioctl>
 800457a:	b930      	cbnz	r0, 800458a <f_mkfs+0x5a>
 800457c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800457e:	1e53      	subs	r3, r2, #1
 8004580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004584:	d201      	bcs.n	800458a <f_mkfs+0x5a>
 8004586:	421a      	tst	r2, r3
 8004588:	d001      	beq.n	800458e <f_mkfs+0x5e>
 800458a:	2301      	movs	r3, #1
 800458c:	930a      	str	r3, [sp, #40]	; 0x28
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800458e:	b146      	cbz	r6, 80045a2 <f_mkfs+0x72>
 8004590:	4bae      	ldr	r3, [pc, #696]	; (800484c <f_mkfs+0x31c>)
 8004592:	f5a6 7200 	sub.w	r2, r6, #512	; 0x200
 8004596:	429a      	cmp	r2, r3
 8004598:	d903      	bls.n	80045a2 <f_mkfs+0x72>
 800459a:	2013      	movs	r0, #19
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
 800459c:	b00d      	add	sp, #52	; 0x34
 800459e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 80045a2:	1e73      	subs	r3, r6, #1
 80045a4:	4233      	tst	r3, r6
 80045a6:	d1f8      	bne.n	800459a <f_mkfs+0x6a>
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 80045a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80045aa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80045ae:	f023 0301 	bic.w	r3, r3, #1
 80045b2:	9303      	str	r3, [sp, #12]
	if (!szb_buf) return FR_MKFS_ABORTED;
 80045b4:	b90b      	cbnz	r3, 80045ba <f_mkfs+0x8a>
 80045b6:	200e      	movs	r0, #14
 80045b8:	e7f0      	b.n	800459c <f_mkfs+0x6c>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 80045ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80045bc:	2101      	movs	r1, #1
 80045be:	4650      	mov	r0, sl
 80045c0:	f7fe ff06 	bl	80033d0 <disk_ioctl>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f040 813c 	bne.w	8004842 <f_mkfs+0x312>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80045ca:	f015 0308 	ands.w	r3, r5, #8
 80045ce:	9302      	str	r3, [sp, #8]
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80045d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 80045d2:	bf0c      	ite	eq
 80045d4:	f04f 093f 	moveq.w	r9, #63	; 0x3f
 80045d8:	f04f 0900 	movne.w	r9, #0
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 80045dc:	4599      	cmp	r9, r3
 80045de:	d8ea      	bhi.n	80045b6 <f_mkfs+0x86>
		sz_vol -= b_vol;						/* Volume size */
 80045e0:	eba3 0309 	sub.w	r3, r3, r9
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80045e4:	2b7f      	cmp	r3, #127	; 0x7f
		sz_vol -= b_vol;						/* Volume size */
 80045e6:	930b      	str	r3, [sp, #44]	; 0x2c
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 80045e8:	d9e5      	bls.n	80045b6 <f_mkfs+0x86>
	au /= ss;	/* Cluster size in unit of sector */
 80045ea:	0a72      	lsrs	r2, r6, #9
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 80045ec:	2a80      	cmp	r2, #128	; 0x80
 80045ee:	d8d4      	bhi.n	800459a <f_mkfs+0x6a>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 80045f0:	f015 0102 	ands.w	r1, r5, #2
 80045f4:	9104      	str	r1, [sp, #16]
 80045f6:	d005      	beq.n	8004604 <f_mkfs+0xd4>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 80045f8:	f005 0107 	and.w	r1, r5, #7
 80045fc:	2902      	cmp	r1, #2
 80045fe:	d061      	beq.n	80046c4 <f_mkfs+0x194>
 8004600:	07e8      	lsls	r0, r5, #31
 8004602:	d55f      	bpl.n	80046c4 <f_mkfs+0x194>
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 8004604:	07e9      	lsls	r1, r5, #31
 8004606:	d5c8      	bpl.n	800459a <f_mkfs+0x6a>
		fmt = FS_FAT16;
 8004608:	2702      	movs	r7, #2
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800460a:	0b19      	lsrs	r1, r3, #12
 800460c:	9106      	str	r1, [sp, #24]
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800460e:	0c59      	lsrs	r1, r3, #17
 8004610:	9105      	str	r1, [sp, #20]
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004612:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004614:	1e48      	subs	r0, r1, #1
 8004616:	4249      	negs	r1, r1
 8004618:	9008      	str	r0, [sp, #32]
 800461a:	9107      	str	r1, [sp, #28]
				if (n_clst > MAX_FAT12) {
 800461c:	f640 7cf5 	movw	ip, #4085	; 0xff5
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8004620:	f64f 7ef5 	movw	lr, #65525	; 0xfff5
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 8004624:	2f03      	cmp	r7, #3
 8004626:	d153      	bne.n	80046d0 <f_mkfs+0x1a0>
				if (!pau) {	/* au auto-selection */
 8004628:	2a00      	cmp	r2, #0
 800462a:	d14f      	bne.n	80046cc <f_mkfs+0x19c>
 800462c:	4888      	ldr	r0, [pc, #544]	; (8004850 <f_mkfs+0x320>)
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800462e:	2601      	movs	r6, #1
 8004630:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 8004634:	b111      	cbz	r1, 800463c <f_mkfs+0x10c>
 8004636:	9d05      	ldr	r5, [sp, #20]
 8004638:	428d      	cmp	r5, r1
 800463a:	d245      	bcs.n	80046c8 <f_mkfs+0x198>
				n_clst = sz_vol / pau;	/* Number of clusters */
 800463c:	fbb3 f1f6 	udiv	r1, r3, r6
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004640:	4884      	ldr	r0, [pc, #528]	; (8004854 <f_mkfs+0x324>)
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004642:	008d      	lsls	r5, r1, #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004644:	f5a1 417f 	sub.w	r1, r1, #65280	; 0xff00
 8004648:	39f6      	subs	r1, #246	; 0xf6
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800464a:	f205 2507 	addw	r5, r5, #519	; 0x207
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800464e:	4281      	cmp	r1, r0
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 8004650:	ea4f 2555 	mov.w	r5, r5, lsr #9
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 8004654:	d8af      	bhi.n	80045b6 <f_mkfs+0x86>
				sz_dir = 0;		/* No static directory */
 8004656:	2100      	movs	r1, #0
 8004658:	9101      	str	r1, [sp, #4]
				sz_rsv = 32;	/* Number of reserved sectors */
 800465a:	f04f 0b20 	mov.w	fp, #32
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800465e:	eb0b 0109 	add.w	r1, fp, r9
 8004662:	9100      	str	r1, [sp, #0]
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 8004664:	9901      	ldr	r1, [sp, #4]
 8004666:	1868      	adds	r0, r5, r1
 8004668:	9900      	ldr	r1, [sp, #0]
 800466a:	eb00 0801 	add.w	r8, r0, r1
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800466e:	9908      	ldr	r1, [sp, #32]
 8004670:	9807      	ldr	r0, [sp, #28]
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 8004672:	2f03      	cmp	r7, #3
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 8004674:	4441      	add	r1, r8
 8004676:	ea01 0100 	and.w	r1, r1, r0
				sz_rsv += n; b_fat += n;
 800467a:	bf08      	it	eq
 800467c:	9800      	ldreq	r0, [sp, #0]
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800467e:	eba1 0108 	sub.w	r1, r1, r8
				sz_rsv += n; b_fat += n;
 8004682:	bf01      	itttt	eq
 8004684:	1840      	addeq	r0, r0, r1
 8004686:	448b      	addeq	fp, r1
 8004688:	4601      	moveq	r1, r0
 800468a:	9100      	streq	r1, [sp, #0]
				sz_fat += n / n_fats;
 800468c:	bf18      	it	ne
 800468e:	186d      	addne	r5, r5, r1
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 8004690:	ebc9 1106 	rsb	r1, r9, r6, lsl #4
 8004694:	eb08 0001 	add.w	r0, r8, r1
 8004698:	4283      	cmp	r3, r0
 800469a:	d38c      	bcc.n	80045b6 <f_mkfs+0x86>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800469c:	eba3 080b 	sub.w	r8, r3, fp
 80046a0:	9901      	ldr	r1, [sp, #4]
 80046a2:	eba8 0805 	sub.w	r8, r8, r5
			if (fmt == FS_FAT32) {
 80046a6:	2f03      	cmp	r7, #3
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 80046a8:	eba8 0801 	sub.w	r8, r8, r1
 80046ac:	fbb8 f8f6 	udiv	r8, r8, r6
			if (fmt == FS_FAT32) {
 80046b0:	d133      	bne.n	800471a <f_mkfs+0x1ea>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 80046b2:	45f0      	cmp	r8, lr
 80046b4:	d851      	bhi.n	800475a <f_mkfs+0x22a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 80046b6:	2a00      	cmp	r2, #0
 80046b8:	f47f af7d 	bne.w	80045b6 <f_mkfs+0x86>
 80046bc:	0876      	lsrs	r6, r6, #1
 80046be:	f43f af7a 	beq.w	80045b6 <f_mkfs+0x86>
 80046c2:	e1e3      	b.n	8004a8c <f_mkfs+0x55c>
				fmt = FS_FAT32; break;
 80046c4:	2703      	movs	r7, #3
 80046c6:	e7a0      	b.n	800460a <f_mkfs+0xda>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80046c8:	0076      	lsls	r6, r6, #1
 80046ca:	e7b1      	b.n	8004630 <f_mkfs+0x100>
 80046cc:	4616      	mov	r6, r2
 80046ce:	e7b5      	b.n	800463c <f_mkfs+0x10c>
				if (!pau) {	/* au auto-selection */
 80046d0:	bb0a      	cbnz	r2, 8004716 <f_mkfs+0x1e6>
 80046d2:	4861      	ldr	r0, [pc, #388]	; (8004858 <f_mkfs+0x328>)
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 80046d4:	2601      	movs	r6, #1
 80046d6:	f830 1f02 	ldrh.w	r1, [r0, #2]!
 80046da:	b111      	cbz	r1, 80046e2 <f_mkfs+0x1b2>
 80046dc:	9d06      	ldr	r5, [sp, #24]
 80046de:	428d      	cmp	r5, r1
 80046e0:	d217      	bcs.n	8004712 <f_mkfs+0x1e2>
				n_clst = sz_vol / pau;
 80046e2:	fbb3 f5f6 	udiv	r5, r3, r6
				if (n_clst > MAX_FAT12) {
 80046e6:	4565      	cmp	r5, ip
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80046e8:	bf9b      	ittet	ls
 80046ea:	eb05 0545 	addls.w	r5, r5, r5, lsl #1
 80046ee:	3501      	addls	r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80046f0:	3502      	addhi	r5, #2
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80046f2:	086d      	lsrls	r5, r5, #1
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 80046f4:	bf8c      	ite	hi
 80046f6:	006d      	lslhi	r5, r5, #1
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 80046f8:	3503      	addls	r5, #3
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 80046fa:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 80046fe:	f04f 0120 	mov.w	r1, #32
 8004702:	bf8c      	ite	hi
 8004704:	2702      	movhi	r7, #2
					fmt = FS_FAT12;
 8004706:	2701      	movls	r7, #1
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 8004708:	0a6d      	lsrs	r5, r5, #9
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800470a:	9101      	str	r1, [sp, #4]
				sz_rsv = 1;						/* Number of reserved sectors */
 800470c:	f04f 0b01 	mov.w	fp, #1
 8004710:	e7a5      	b.n	800465e <f_mkfs+0x12e>
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 8004712:	0076      	lsls	r6, r6, #1
 8004714:	e7df      	b.n	80046d6 <f_mkfs+0x1a6>
 8004716:	4616      	mov	r6, r2
 8004718:	e7e3      	b.n	80046e2 <f_mkfs+0x1b2>
			if (fmt == FS_FAT16) {
 800471a:	2f02      	cmp	r7, #2
 800471c:	d117      	bne.n	800474e <f_mkfs+0x21e>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800471e:	45f0      	cmp	r8, lr
 8004720:	d90b      	bls.n	800473a <f_mkfs+0x20a>
					if (!au && (pau * 2) <= 64) {
 8004722:	2a00      	cmp	r2, #0
 8004724:	f040 81ac 	bne.w	8004a80 <f_mkfs+0x550>
 8004728:	0076      	lsls	r6, r6, #1
 800472a:	2e40      	cmp	r6, #64	; 0x40
 800472c:	f240 81ae 	bls.w	8004a8c <f_mkfs+0x55c>
					if ((opt & FM_FAT32)) {
 8004730:	9904      	ldr	r1, [sp, #16]
 8004732:	2900      	cmp	r1, #0
 8004734:	f040 81a8 	bne.w	8004a88 <f_mkfs+0x558>
 8004738:	e005      	b.n	8004746 <f_mkfs+0x216>
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800473a:	45e0      	cmp	r8, ip
 800473c:	d80d      	bhi.n	800475a <f_mkfs+0x22a>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800473e:	2a00      	cmp	r2, #0
 8004740:	f47f af39 	bne.w	80045b6 <f_mkfs+0x86>
 8004744:	0076      	lsls	r6, r6, #1
 8004746:	2e80      	cmp	r6, #128	; 0x80
 8004748:	f63f af35 	bhi.w	80045b6 <f_mkfs+0x86>
 800474c:	e19e      	b.n	8004a8c <f_mkfs+0x55c>
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800474e:	f640 73f5 	movw	r3, #4085	; 0xff5
 8004752:	4598      	cmp	r8, r3
 8004754:	f63f af2f 	bhi.w	80045b6 <f_mkfs+0x86>
 8004758:	2701      	movs	r7, #1
		mem_set(buf, 0, ss);
 800475a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800475e:	2100      	movs	r1, #0
 8004760:	4620      	mov	r0, r4
 8004762:	f7fe fe53 	bl	800340c <mem_set>
 8004766:	220b      	movs	r2, #11
 8004768:	493c      	ldr	r1, [pc, #240]	; (800485c <f_mkfs+0x32c>)
 800476a:	4620      	mov	r0, r4
 800476c:	f7fe ff25 	bl	80035ba <mem_cpy.part.0>
		if (sz_vol < 0x10000) {
 8004770:	990b      	ldr	r1, [sp, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 8004772:	f884 b00e 	strb.w	fp, [r4, #14]
 8004776:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8004778:	2202      	movs	r2, #2
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800477a:	2f03      	cmp	r7, #3
	*ptr++ = (BYTE)val; val >>= 8;
 800477c:	72e3      	strb	r3, [r4, #11]
	*ptr++ = (BYTE)val;
 800477e:	7322      	strb	r2, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8004780:	f3cb 2b07 	ubfx	fp, fp, #8, #8
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8004784:	f04f 0201 	mov.w	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8004788:	7463      	strb	r3, [r4, #17]
 800478a:	bf18      	it	ne
 800478c:	2302      	movne	r3, #2
		if (sz_vol < 0x10000) {
 800478e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 8004792:	7366      	strb	r6, [r4, #13]
	*ptr++ = (BYTE)val;
 8004794:	f884 b00f 	strb.w	fp, [r4, #15]
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8004798:	7422      	strb	r2, [r4, #16]
	*ptr++ = (BYTE)val;
 800479a:	74a3      	strb	r3, [r4, #18]
		if (sz_vol < 0x10000) {
 800479c:	d262      	bcs.n	8004864 <f_mkfs+0x334>
	*ptr++ = (BYTE)val; val >>= 8;
 800479e:	74e1      	strb	r1, [r4, #19]
 80047a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
	*ptr++ = (BYTE)val;
 80047a4:	7521      	strb	r1, [r4, #20]
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 80047a6:	23f8      	movs	r3, #248	; 0xf8
 80047a8:	7563      	strb	r3, [r4, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 80047aa:	233f      	movs	r3, #63	; 0x3f
 80047ac:	7623      	strb	r3, [r4, #24]
	*ptr++ = (BYTE)val;
 80047ae:	f04f 0b00 	mov.w	fp, #0
	*ptr++ = (BYTE)val; val >>= 8;
 80047b2:	23ff      	movs	r3, #255	; 0xff
	*ptr++ = (BYTE)val;
 80047b4:	f884 b019 	strb.w	fp, [r4, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 80047b8:	76a3      	strb	r3, [r4, #26]
	*ptr++ = (BYTE)val;
 80047ba:	f884 b01b 	strb.w	fp, [r4, #27]
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80047be:	4649      	mov	r1, r9
 80047c0:	f104 001c 	add.w	r0, r4, #28
 80047c4:	f7fe fe1a 	bl	80033fc <st_dword>
		if (fmt == FS_FAT32) {
 80047c8:	2f03      	cmp	r7, #3
 80047ca:	d150      	bne.n	800486e <f_mkfs+0x33e>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80047cc:	f000 fa66 	bl	8004c9c <get_fattime>
 80047d0:	4601      	mov	r1, r0
 80047d2:	f104 0043 	add.w	r0, r4, #67	; 0x43
 80047d6:	f7fe fe11 	bl	80033fc <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80047da:	4629      	mov	r1, r5
 80047dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80047e0:	f7fe fe0c 	bl	80033fc <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 80047e4:	2302      	movs	r3, #2
 80047e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80047f0:	2306      	movs	r3, #6
 80047f2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80047fc:	4918      	ldr	r1, [pc, #96]	; (8004860 <f_mkfs+0x330>)
	*ptr++ = (BYTE)val; val >>= 8;
 80047fe:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004802:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE)val; val >>= 8;
 8004804:	f884 b02e 	strb.w	fp, [r4, #46]	; 0x2e
	*ptr++ = (BYTE)val;
 8004808:	f884 b02f 	strb.w	fp, [r4, #47]	; 0x2f
	*ptr++ = (BYTE)val;
 800480c:	f884 b031 	strb.w	fp, [r4, #49]	; 0x31
 8004810:	f884 b033 	strb.w	fp, [r4, #51]	; 0x33
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8004814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004818:	2213      	movs	r2, #19
 800481a:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800481e:	f7fe fecc 	bl	80035ba <mem_cpy.part.0>
	*ptr++ = (BYTE)val; val >>= 8;
 8004822:	f04f 0355 	mov.w	r3, #85	; 0x55
 8004826:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 800482a:	f06f 0355 	mvn.w	r3, #85	; 0x55
 800482e:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8004832:	464a      	mov	r2, r9
 8004834:	2301      	movs	r3, #1
 8004836:	4621      	mov	r1, r4
 8004838:	4650      	mov	r0, sl
 800483a:	f7fe fdbb 	bl	80033b4 <disk_write>
 800483e:	4683      	mov	fp, r0
 8004840:	b358      	cbz	r0, 800489a <f_mkfs+0x36a>
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 8004842:	2001      	movs	r0, #1
 8004844:	e6aa      	b.n	800459c <f_mkfs+0x6c>
 8004846:	bf00      	nop
 8004848:	2000002c 	.word	0x2000002c
 800484c:	00fffe00 	.word	0x00fffe00
 8004850:	08005c1c 	.word	0x08005c1c
 8004854:	0ffeffff 	.word	0x0ffeffff
 8004858:	08005c0e 	.word	0x08005c0e
 800485c:	08005c2c 	.word	0x08005c2c
 8004860:	08005c38 	.word	0x08005c38
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 8004864:	f104 0020 	add.w	r0, r4, #32
 8004868:	f7fe fdc8 	bl	80033fc <st_dword>
 800486c:	e79b      	b.n	80047a6 <f_mkfs+0x276>
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800486e:	f000 fa15 	bl	8004c9c <get_fattime>
 8004872:	4601      	mov	r1, r0
 8004874:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8004878:	f7fe fdc0 	bl	80033fc <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 800487c:	f3c5 2307 	ubfx	r3, r5, #8, #8
	*ptr++ = (BYTE)val;
 8004880:	75e3      	strb	r3, [r4, #23]
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8004882:	2380      	movs	r3, #128	; 0x80
 8004884:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 8004888:	2329      	movs	r3, #41	; 0x29
	*ptr++ = (BYTE)val; val >>= 8;
 800488a:	75a5      	strb	r5, [r4, #22]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800488c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 8004890:	2213      	movs	r2, #19
 8004892:	497f      	ldr	r1, [pc, #508]	; (8004a90 <f_mkfs+0x560>)
 8004894:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8004898:	e7c1      	b.n	800481e <f_mkfs+0x2ee>
		if (fmt == FS_FAT32) {
 800489a:	2f03      	cmp	r7, #3
 800489c:	d141      	bne.n	8004922 <f_mkfs+0x3f2>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800489e:	2301      	movs	r3, #1
 80048a0:	f109 0206 	add.w	r2, r9, #6
 80048a4:	4621      	mov	r1, r4
 80048a6:	4650      	mov	r0, sl
 80048a8:	f7fe fd84 	bl	80033b4 <disk_write>
			mem_set(buf, 0, ss);
 80048ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048b0:	4659      	mov	r1, fp
 80048b2:	4620      	mov	r0, r4
 80048b4:	f7fe fdaa 	bl	800340c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80048b8:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 80048ba:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 80048bc:	2172      	movs	r1, #114	; 0x72
 80048be:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80048c0:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 80048c2:	2361      	movs	r3, #97	; 0x61
 80048c4:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 80048c6:	70e2      	strb	r2, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 80048c8:	f884 11e4 	strb.w	r1, [r4, #484]	; 0x1e4
	*ptr++ = (BYTE)val; val >>= 8;
 80048cc:	f884 11e5 	strb.w	r1, [r4, #485]	; 0x1e5
	*ptr++ = (BYTE)val; val >>= 8;
 80048d0:	f884 21e6 	strb.w	r2, [r4, #486]	; 0x1e6
	*ptr++ = (BYTE)val;
 80048d4:	f884 31e7 	strb.w	r3, [r4, #487]	; 0x1e7
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80048d8:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80048dc:	f504 70f4 	add.w	r0, r4, #488	; 0x1e8
 80048e0:	f7fe fd8c 	bl	80033fc <st_dword>
	*ptr++ = (BYTE)val; val >>= 8;
 80048e4:	2302      	movs	r3, #2
 80048e6:	f884 31ec 	strb.w	r3, [r4, #492]	; 0x1ec
	*ptr++ = (BYTE)val; val >>= 8;
 80048ea:	f04f 0355 	mov.w	r3, #85	; 0x55
 80048ee:	f884 31fe 	strb.w	r3, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 80048f2:	f06f 0355 	mvn.w	r3, #85	; 0x55
 80048f6:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 80048fa:	f109 0207 	add.w	r2, r9, #7
 80048fe:	2301      	movs	r3, #1
 8004900:	4621      	mov	r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 8004902:	f884 b1ed 	strb.w	fp, [r4, #493]	; 0x1ed
	*ptr++ = (BYTE)val; val >>= 8;
 8004906:	f884 b1ee 	strb.w	fp, [r4, #494]	; 0x1ee
	*ptr++ = (BYTE)val;
 800490a:	f884 b1ef 	strb.w	fp, [r4, #495]	; 0x1ef
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800490e:	4650      	mov	r0, sl
 8004910:	f7fe fd50 	bl	80033b4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8004914:	2301      	movs	r3, #1
 8004916:	eb09 0203 	add.w	r2, r9, r3
 800491a:	4621      	mov	r1, r4
 800491c:	4650      	mov	r0, sl
 800491e:	f7fe fd49 	bl	80033b4 <disk_write>
		mem_set(buf, 0, (UINT)szb_buf);
 8004922:	9a03      	ldr	r2, [sp, #12]
 8004924:	2100      	movs	r1, #0
 8004926:	4620      	mov	r0, r4
 8004928:	f7fe fd70 	bl	800340c <mem_set>
			if (fmt == FS_FAT32) {
 800492c:	2f03      	cmp	r7, #3
 800492e:	d158      	bne.n	80049e2 <f_mkfs+0x4b2>
	*ptr++ = (BYTE)val; val >>= 8;
 8004930:	23f8      	movs	r3, #248	; 0xf8
 8004932:	7023      	strb	r3, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004934:	23ff      	movs	r3, #255	; 0xff
 8004936:	7063      	strb	r3, [r4, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 8004938:	70a3      	strb	r3, [r4, #2]
	*ptr++ = (BYTE)val;
 800493a:	70e3      	strb	r3, [r4, #3]
	*ptr++ = (BYTE)val; val >>= 8;
 800493c:	7123      	strb	r3, [r4, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 800493e:	7163      	strb	r3, [r4, #5]
	*ptr++ = (BYTE)val; val >>= 8;
 8004940:	71a3      	strb	r3, [r4, #6]
	*ptr++ = (BYTE)val;
 8004942:	71e3      	strb	r3, [r4, #7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004944:	7223      	strb	r3, [r4, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8004946:	7263      	strb	r3, [r4, #9]
	*ptr++ = (BYTE)val; val >>= 8;
 8004948:	72a3      	strb	r3, [r4, #10]
	*ptr++ = (BYTE)val;
 800494a:	230f      	movs	r3, #15
 800494c:	72e3      	strb	r3, [r4, #11]
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800494e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004950:	ea4f 2b53 	mov.w	fp, r3, lsr #9
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8004954:	455d      	cmp	r5, fp
 8004956:	46a8      	mov	r8, r5
 8004958:	bf28      	it	cs
 800495a:	46d8      	movcs	r8, fp
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800495c:	4621      	mov	r1, r4
 800495e:	4643      	mov	r3, r8
 8004960:	9a00      	ldr	r2, [sp, #0]
 8004962:	4650      	mov	r0, sl
 8004964:	f7fe fd26 	bl	80033b4 <disk_write>
 8004968:	4601      	mov	r1, r0
 800496a:	2800      	cmp	r0, #0
 800496c:	f47f af69 	bne.w	8004842 <f_mkfs+0x312>
				mem_set(buf, 0, ss);
 8004970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004974:	4620      	mov	r0, r4
 8004976:	f7fe fd49 	bl	800340c <mem_set>
				sect += n; nsect -= n;
 800497a:	9b00      	ldr	r3, [sp, #0]
			} while (nsect);
 800497c:	ebb5 0508 	subs.w	r5, r5, r8
				sect += n; nsect -= n;
 8004980:	4443      	add	r3, r8
 8004982:	9300      	str	r3, [sp, #0]
			} while (nsect);
 8004984:	d1e6      	bne.n	8004954 <f_mkfs+0x424>
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 8004986:	9b01      	ldr	r3, [sp, #4]
 8004988:	2f03      	cmp	r7, #3
 800498a:	bf08      	it	eq
 800498c:	4633      	moveq	r3, r6
 800498e:	9301      	str	r3, [sp, #4]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8004990:	9b01      	ldr	r3, [sp, #4]
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8004992:	9a00      	ldr	r2, [sp, #0]
			n = (nsect > sz_buf) ? sz_buf : nsect;
 8004994:	455b      	cmp	r3, fp
 8004996:	bf28      	it	cs
 8004998:	465b      	movcs	r3, fp
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800499a:	4621      	mov	r1, r4
 800499c:	4650      	mov	r0, sl
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800499e:	461d      	mov	r5, r3
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80049a0:	f7fe fd08 	bl	80033b4 <disk_write>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f47f af4c 	bne.w	8004842 <f_mkfs+0x312>
			sect += n; nsect -= n;
 80049aa:	9b00      	ldr	r3, [sp, #0]
 80049ac:	442b      	add	r3, r5
 80049ae:	9300      	str	r3, [sp, #0]
		} while (nsect);
 80049b0:	9b01      	ldr	r3, [sp, #4]
 80049b2:	1b5b      	subs	r3, r3, r5
 80049b4:	9301      	str	r3, [sp, #4]
 80049b6:	d1eb      	bne.n	8004990 <f_mkfs+0x460>
		if (fmt == FS_FAT32) {
 80049b8:	2f03      	cmp	r7, #3
 80049ba:	d01b      	beq.n	80049f4 <f_mkfs+0x4c4>
			if (sz_vol >= 0x10000) {
 80049bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c2:	d219      	bcs.n	80049f8 <f_mkfs+0x4c8>
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80049c4:	2f02      	cmp	r7, #2
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2304      	moveq	r3, #4
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80049cc:	9a02      	ldr	r2, [sp, #8]
 80049ce:	b1aa      	cbz	r2, 80049fc <f_mkfs+0x4cc>
	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80049d0:	2200      	movs	r2, #0
 80049d2:	4611      	mov	r1, r2
 80049d4:	4650      	mov	r0, sl
 80049d6:	f7fe fcfb 	bl	80033d0 <disk_ioctl>
	if (vol < 0) return FR_INVALID_DRIVE;
 80049da:	3000      	adds	r0, #0
 80049dc:	bf18      	it	ne
 80049de:	2001      	movne	r0, #1
 80049e0:	e5dc      	b.n	800459c <f_mkfs+0x6c>
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80049e2:	2f01      	cmp	r7, #1
 80049e4:	492b      	ldr	r1, [pc, #172]	; (8004a94 <f_mkfs+0x564>)
 80049e6:	4620      	mov	r0, r4
 80049e8:	bf18      	it	ne
 80049ea:	f06f 0107 	mvnne.w	r1, #7
 80049ee:	f7fe fd05 	bl	80033fc <st_dword>
 80049f2:	e7ac      	b.n	800494e <f_mkfs+0x41e>
			sys = 0x0C;		/* FAT32X */
 80049f4:	230c      	movs	r3, #12
 80049f6:	e7e9      	b.n	80049cc <f_mkfs+0x49c>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80049f8:	2306      	movs	r3, #6
 80049fa:	e7e7      	b.n	80049cc <f_mkfs+0x49c>
			mem_set(buf, 0, ss);
 80049fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a00:	9902      	ldr	r1, [sp, #8]
 8004a02:	4620      	mov	r0, r4
 8004a04:	f7fe fd02 	bl	800340c <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8004a08:	2255      	movs	r2, #85	; 0x55
 8004a0a:	f884 21fe 	strb.w	r2, [r4, #510]	; 0x1fe
	*ptr++ = (BYTE)val;
 8004a0e:	22aa      	movs	r2, #170	; 0xaa
 8004a10:	f884 21ff 	strb.w	r2, [r4, #511]	; 0x1ff
			pte[PTE_Boot] = 0;					/* Boot indicator */
 8004a14:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004a18:	f884 21be 	strb.w	r2, [r4, #446]	; 0x1be
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8004a1c:	f884 21c1 	strb.w	r2, [r4, #449]	; 0x1c1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8004a20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
			pte[PTE_System] = sys;				/* System type */
 8004a22:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8004a26:	444a      	add	r2, r9
 8004a28:	f643 63c1 	movw	r3, #16065	; 0x3ec1
 8004a2c:	fbb2 f2f3 	udiv	r2, r2, r3
			pte[PTE_EdHead] = 254;				/* End head */
 8004a30:	23fe      	movs	r3, #254	; 0xfe
 8004a32:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8004a36:	0893      	lsrs	r3, r2, #2
 8004a38:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
			pte[PTE_StHead] = 1;				/* Start head */
 8004a3c:	2501      	movs	r5, #1
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8004a3e:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8004a42:	f884 21c5 	strb.w	r2, [r4, #453]	; 0x1c5
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8004a46:	4649      	mov	r1, r9
 8004a48:	f504 70e3 	add.w	r0, r4, #454	; 0x1c6
			pte[PTE_StHead] = 1;				/* Start head */
 8004a4c:	f884 51bf 	strb.w	r5, [r4, #447]	; 0x1bf
			pte[PTE_StSec] = 1;					/* Start sector */
 8004a50:	f884 51c0 	strb.w	r5, [r4, #448]	; 0x1c0
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8004a54:	f7fe fcd2 	bl	80033fc <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8004a58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a5a:	f504 70e5 	add.w	r0, r4, #458	; 0x1ca
 8004a5e:	f7fe fccd 	bl	80033fc <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8004a62:	462b      	mov	r3, r5
 8004a64:	9a02      	ldr	r2, [sp, #8]
 8004a66:	4621      	mov	r1, r4
 8004a68:	4650      	mov	r0, sl
 8004a6a:	f7fe fca3 	bl	80033b4 <disk_write>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d0ae      	beq.n	80049d0 <f_mkfs+0x4a0>
 8004a72:	e6e6      	b.n	8004842 <f_mkfs+0x312>
	if (vol < 0) return FR_INVALID_DRIVE;
 8004a74:	200b      	movs	r0, #11
 8004a76:	e591      	b.n	800459c <f_mkfs+0x6c>
	if (stat & STA_NOINIT) return FR_NOT_READY;
 8004a78:	2003      	movs	r0, #3
 8004a7a:	e58f      	b.n	800459c <f_mkfs+0x6c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 8004a7c:	200a      	movs	r0, #10
 8004a7e:	e58d      	b.n	800459c <f_mkfs+0x6c>
					if ((opt & FM_FAT32)) {
 8004a80:	9904      	ldr	r1, [sp, #16]
 8004a82:	2900      	cmp	r1, #0
 8004a84:	f43f ad97 	beq.w	80045b6 <f_mkfs+0x86>
 8004a88:	4616      	mov	r6, r2
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 8004a8a:	2703      	movs	r7, #3
 8004a8c:	4632      	mov	r2, r6
 8004a8e:	e5c9      	b.n	8004624 <f_mkfs+0xf4>
 8004a90:	08005c4c 	.word	0x08005c4c
 8004a94:	00fffff8 	.word	0x00fffff8

08004a98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004a98:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004a9a:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <FATFS_LinkDriverEx+0x40>)
 8004a9c:	7a5d      	ldrb	r5, [r3, #9]
 8004a9e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8004aa2:	b9b5      	cbnz	r5, 8004ad2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004aa4:	7a5d      	ldrb	r5, [r3, #9]
 8004aa6:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004aa8:	7a5d      	ldrb	r5, [r3, #9]
 8004aaa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004aae:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8004ab0:	7a58      	ldrb	r0, [r3, #9]
 8004ab2:	4418      	add	r0, r3
 8004ab4:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004ab6:	7a5a      	ldrb	r2, [r3, #9]
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	1c50      	adds	r0, r2, #1
 8004abc:	b2c0      	uxtb	r0, r0
 8004abe:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8004ac0:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8004ac2:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8004ac4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8004ac6:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8004ac8:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8004aca:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8004acc:	70cc      	strb	r4, [r1, #3]
 8004ace:	4620      	mov	r0, r4
 8004ad0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8004ad2:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8004ad4:	bd30      	pop	{r4, r5, pc}
 8004ad6:	bf00      	nop
 8004ad8:	20000054 	.word	0x20000054

08004adc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8004adc:	2200      	movs	r2, #0
 8004ade:	f7ff bfdb 	b.w	8004a98 <FATFS_LinkDriverEx>
	...

08004ae4 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8004ae4:	4a0a      	ldr	r2, [pc, #40]	; (8004b10 <FATFS_UnLinkDriverEx+0x2c>)
 8004ae6:	7a53      	ldrb	r3, [r2, #9]
 8004ae8:	b17b      	cbz	r3, 8004b0a <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8004aea:	7803      	ldrb	r3, [r0, #0]
 8004aec:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004af4:	6848      	ldr	r0, [r1, #4]
 8004af6:	b140      	cbz	r0, 8004b0a <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8004af8:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8004afa:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8004afc:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8004afe:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8004b00:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	7253      	strb	r3, [r2, #9]
 8004b08:	4770      	bx	lr
  uint8_t ret = 1;
 8004b0a:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000054 	.word	0x20000054

08004b14 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8004b14:	2100      	movs	r1, #0
 8004b16:	f7ff bfe5 	b.w	8004ae4 <FATFS_UnLinkDriverEx>
	...

08004b1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8004b1c:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8004b1e:	2001      	movs	r0, #1
 8004b20:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8004b24:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004b28:	4283      	cmp	r3, r0
 8004b2a:	d10b      	bne.n	8004b44 <BSP_SD_Init+0x28>
  sd_state = HAL_SD_Init(&hsd);
 8004b2c:	4807      	ldr	r0, [pc, #28]	; (8004b4c <BSP_SD_Init+0x30>)
 8004b2e:	f7fd fac9 	bl	80020c4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8004b32:	b938      	cbnz	r0, 8004b44 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004b34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b38:	4804      	ldr	r0, [pc, #16]	; (8004b4c <BSP_SD_Init+0x30>)
 8004b3a:	f7fd faef 	bl	800211c <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8004b3e:	3000      	adds	r0, #0
 8004b40:	bf18      	it	ne
 8004b42:	2001      	movne	r0, #1
}
 8004b44:	b003      	add	sp, #12
 8004b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b4a:	bf00      	nop
 8004b4c:	20000e30 	.word	0x20000e30

08004b50 <BSP_SD_ReadBlocks>:
{
 8004b50:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004b52:	9300      	str	r3, [sp, #0]
 8004b54:	4613      	mov	r3, r2
 8004b56:	460a      	mov	r2, r1
 8004b58:	4601      	mov	r1, r0
 8004b5a:	4804      	ldr	r0, [pc, #16]	; (8004b6c <BSP_SD_ReadBlocks+0x1c>)
 8004b5c:	f7fc ff4f 	bl	80019fe <HAL_SD_ReadBlocks>
}
 8004b60:	3000      	adds	r0, #0
 8004b62:	bf18      	it	ne
 8004b64:	2001      	movne	r0, #1
 8004b66:	b003      	add	sp, #12
 8004b68:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b6c:	20000e30 	.word	0x20000e30

08004b70 <BSP_SD_WriteBlocks>:
{
 8004b70:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	4613      	mov	r3, r2
 8004b76:	460a      	mov	r2, r1
 8004b78:	4601      	mov	r1, r0
 8004b7a:	4804      	ldr	r0, [pc, #16]	; (8004b8c <BSP_SD_WriteBlocks+0x1c>)
 8004b7c:	f7fd f81c 	bl	8001bb8 <HAL_SD_WriteBlocks>
}
 8004b80:	3000      	adds	r0, #0
 8004b82:	bf18      	it	ne
 8004b84:	2001      	movne	r0, #1
 8004b86:	b003      	add	sp, #12
 8004b88:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b8c:	20000e30 	.word	0x20000e30

08004b90 <BSP_SD_GetCardState>:
{
 8004b90:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004b92:	4803      	ldr	r0, [pc, #12]	; (8004ba0 <BSP_SD_GetCardState+0x10>)
 8004b94:	f7fd fb46 	bl	8002224 <HAL_SD_GetCardState>
}
 8004b98:	3804      	subs	r0, #4
 8004b9a:	bf18      	it	ne
 8004b9c:	2001      	movne	r0, #1
 8004b9e:	bd08      	pop	{r3, pc}
 8004ba0:	20000e30 	.word	0x20000e30

08004ba4 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004ba4:	4601      	mov	r1, r0
 8004ba6:	4801      	ldr	r0, [pc, #4]	; (8004bac <BSP_SD_GetCardInfo+0x8>)
 8004ba8:	f7fd baa6 	b.w	80020f8 <HAL_SD_GetCardInfo>
 8004bac:	20000e30 	.word	0x20000e30

08004bb0 <do_something_SD>:
uint8_t message[10];

/**
  * Test function
  */
int do_something_SD() {
 8004bb0:	b570      	push	{r4, r5, r6, lr}
  uint8_t wtext[] = "Yolo, let's see if this works";    /* File write buffer */
 8004bb2:	4b29      	ldr	r3, [pc, #164]	; (8004c58 <do_something_SD+0xa8>)
int do_something_SD() {
 8004bb4:	b08a      	sub	sp, #40	; 0x28
  uint8_t wtext[] = "Yolo, let's see if this works";    /* File write buffer */
 8004bb6:	aa02      	add	r2, sp, #8
 8004bb8:	f103 0518 	add.w	r5, r3, #24
 8004bbc:	4616      	mov	r6, r2
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	4614      	mov	r4, r2
 8004bc4:	c403      	stmia	r4!, {r0, r1}
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	42ab      	cmp	r3, r5
 8004bca:	4622      	mov	r2, r4
 8004bcc:	d1f7      	bne.n	8004bbe <do_something_SD+0xe>
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	889b      	ldrh	r3, [r3, #4]
 8004bd2:	6020      	str	r0, [r4, #0]
 8004bd4:	80a3      	strh	r3, [r4, #4]

  /*##-1- Link the SD disk I/O driver ########################################*/
  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8004bd6:	4921      	ldr	r1, [pc, #132]	; (8004c5c <do_something_SD+0xac>)
 8004bd8:	4821      	ldr	r0, [pc, #132]	; (8004c60 <do_something_SD+0xb0>)
 8004bda:	f7ff ff7f 	bl	8004adc <FATFS_LinkDriver>
 8004bde:	4602      	mov	r2, r0
 8004be0:	b948      	cbnz	r0, 8004bf6 <do_something_SD+0x46>
  {
    /*##-2- Register the file system object to the FatFs module ##############*/
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) != FR_OK)
 8004be2:	491e      	ldr	r1, [pc, #120]	; (8004c5c <do_something_SD+0xac>)
 8004be4:	481f      	ldr	r0, [pc, #124]	; (8004c64 <do_something_SD+0xb4>)
 8004be6:	f7ff fa3f 	bl	8004068 <f_mount>
 8004bea:	4602      	mov	r2, r0
 8004bec:	b140      	cbz	r0, 8004c00 <do_something_SD+0x50>
    {
      /* FatFs Initialization Error */
      Error_Handler();
 8004bee:	211e      	movs	r1, #30
          res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);

          if((byteswritten == 0) || (res != FR_OK))
          {
            /* 'LOG.TXT' file Write or EOF Error */
            Error_Handler();
 8004bf0:	481d      	ldr	r0, [pc, #116]	; (8004c68 <do_something_SD+0xb8>)
 8004bf2:	f000 fbf7 	bl	80053e4 <_Error_Handler>
      }
    }
  }

  /*##-11- Unlink the SD disk I/O driver ####################################*/
  FATFS_UnLinkDriver(SDPath);
 8004bf6:	4819      	ldr	r0, [pc, #100]	; (8004c5c <do_something_SD+0xac>)
 8004bf8:	f7ff ff8c 	bl	8004b14 <FATFS_UnLinkDriver>
  return 1;
 8004bfc:	2001      	movs	r0, #1
 8004bfe:	e028      	b.n	8004c52 <do_something_SD+0xa2>
      if(f_mkfs((TCHAR const*)SDPath, FM_ANY, 0, buffer, sizeof(buffer)) != FR_OK)
 8004c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	2107      	movs	r1, #7
 8004c08:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <do_something_SD+0xbc>)
 8004c0a:	4814      	ldr	r0, [pc, #80]	; (8004c5c <do_something_SD+0xac>)
 8004c0c:	f7ff fc90 	bl	8004530 <f_mkfs>
 8004c10:	b108      	cbz	r0, 8004c16 <do_something_SD+0x66>
        Error_Handler();
 8004c12:	2125      	movs	r1, #37	; 0x25
 8004c14:	e7ec      	b.n	8004bf0 <do_something_SD+0x40>
        if(f_open(&MyFile, "LOG.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8004c16:	220a      	movs	r2, #10
 8004c18:	4915      	ldr	r1, [pc, #84]	; (8004c70 <do_something_SD+0xc0>)
 8004c1a:	4816      	ldr	r0, [pc, #88]	; (8004c74 <do_something_SD+0xc4>)
 8004c1c:	f7ff fa58 	bl	80040d0 <f_open>
 8004c20:	b108      	cbz	r0, 8004c26 <do_something_SD+0x76>
          Error_Handler();
 8004c22:	212d      	movs	r1, #45	; 0x2d
 8004c24:	e7e4      	b.n	8004bf0 <do_something_SD+0x40>
          res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8004c26:	4d14      	ldr	r5, [pc, #80]	; (8004c78 <do_something_SD+0xc8>)
 8004c28:	4812      	ldr	r0, [pc, #72]	; (8004c74 <do_something_SD+0xc4>)
 8004c2a:	462b      	mov	r3, r5
 8004c2c:	221e      	movs	r2, #30
 8004c2e:	4631      	mov	r1, r6
 8004c30:	f7ff fb60 	bl	80042f4 <f_write>
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <do_something_SD+0xcc>)
 8004c36:	7018      	strb	r0, [r3, #0]
          if((byteswritten == 0) || (res != FR_OK))
 8004c38:	682b      	ldr	r3, [r5, #0]
          res = f_write(&MyFile, wtext, sizeof(wtext), (void *)&byteswritten);
 8004c3a:	4604      	mov	r4, r0
          if((byteswritten == 0) || (res != FR_OK))
 8004c3c:	b103      	cbz	r3, 8004c40 <do_something_SD+0x90>
 8004c3e:	b108      	cbz	r0, 8004c44 <do_something_SD+0x94>
            Error_Handler();
 8004c40:	2137      	movs	r1, #55	; 0x37
 8004c42:	e7d5      	b.n	8004bf0 <do_something_SD+0x40>
            f_close(&MyFile);
 8004c44:	480b      	ldr	r0, [pc, #44]	; (8004c74 <do_something_SD+0xc4>)
 8004c46:	f7ff fc62 	bl	800450e <f_close>
            FATFS_UnLinkDriver(SDPath);
 8004c4a:	4804      	ldr	r0, [pc, #16]	; (8004c5c <do_something_SD+0xac>)
 8004c4c:	f7ff ff62 	bl	8004b14 <FATFS_UnLinkDriver>
            return 0;
 8004c50:	4620      	mov	r0, r4
}
 8004c52:	b00a      	add	sp, #40	; 0x28
 8004c54:	bd70      	pop	{r4, r5, r6, pc}
 8004c56:	bf00      	nop
 8004c58:	08005c8c 	.word	0x08005c8c
 8004c5c:	20000272 	.word	0x20000272
 8004c60:	08005cac 	.word	0x08005cac
 8004c64:	20000278 	.word	0x20000278
 8004c68:	08005c6f 	.word	0x08005c6f
 8004c6c:	20000060 	.word	0x20000060
 8004c70:	08005c84 	.word	0x08005c84
 8004c74:	200004a8 	.word	0x200004a8
 8004c78:	20000264 	.word	0x20000264
 8004c7c:	200006d8 	.word	0x200006d8

08004c80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8004c80:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004c82:	4903      	ldr	r1, [pc, #12]	; (8004c90 <MX_FATFS_Init+0x10>)
 8004c84:	4803      	ldr	r0, [pc, #12]	; (8004c94 <MX_FATFS_Init+0x14>)
 8004c86:	f7ff ff29 	bl	8004adc <FATFS_LinkDriver>
 8004c8a:	4b03      	ldr	r3, [pc, #12]	; (8004c98 <MX_FATFS_Init+0x18>)
 8004c8c:	7018      	strb	r0, [r3, #0]
 8004c8e:	bd08      	pop	{r3, pc}
 8004c90:	20000272 	.word	0x20000272
 8004c94:	08005cac 	.word	0x08005cac
 8004c98:	200006dc 	.word	0x200006dc

08004c9c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 8004c9c:	2000      	movs	r0, #0
 8004c9e:	4770      	bx	lr

08004ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ca0:	b510      	push	{r4, lr}
 8004ca2:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	4b2b      	ldr	r3, [pc, #172]	; (8004d54 <SystemClock_Config+0xb4>)
 8004ca8:	9201      	str	r2, [sp, #4]
 8004caa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004cac:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8004cb0:	6419      	str	r1, [r3, #64]	; 0x40
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004cb4:	4928      	ldr	r1, [pc, #160]	; (8004d58 <SystemClock_Config+0xb8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004cbe:	9202      	str	r2, [sp, #8]
 8004cc0:	680b      	ldr	r3, [r1, #0]
 8004cc2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cca:	600b      	str	r3, [r1, #0]
 8004ccc:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004cce:	920f      	str	r2, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004cd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004cd4:	2208      	movs	r2, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004cd6:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004cd8:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004cda:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004cdc:	2248      	movs	r2, #72	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004cde:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ce0:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ce2:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004ce4:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLN = 72;
 8004ce6:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ce8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004cea:	2203      	movs	r2, #3
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8004cec:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cee:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cf0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cf2:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8004cf4:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004cf6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cf8:	f7fc fc82 	bl	8001600 <HAL_RCC_OscConfig>
 8004cfc:	4601      	mov	r1, r0
 8004cfe:	b100      	cbz	r0, 8004d02 <SystemClock_Config+0x62>
 8004d00:	e7fe      	b.n	8004d00 <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d02:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004d04:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d06:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d08:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d0a:	9007      	str	r0, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004d0c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d0e:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004d10:	f7fc f966 	bl	8000fe0 <HAL_RCC_ClockConfig>
 8004d14:	b100      	cbz	r0, 8004d18 <SystemClock_Config+0x78>
 8004d16:	e7fe      	b.n	8004d16 <SystemClock_Config+0x76>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004d18:	f44f 7340 	mov.w	r3, #768	; 0x300
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004d1c:	902a      	str	r0, [sp, #168]	; 0xa8
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8004d1e:	9026      	str	r0, [sp, #152]	; 0x98
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d20:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004d22:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004d24:	f7fc fa1c 	bl	8001160 <HAL_RCCEx_PeriphCLKConfig>
 8004d28:	4604      	mov	r4, r0
 8004d2a:	b100      	cbz	r0, 8004d2e <SystemClock_Config+0x8e>
 8004d2c:	e7fe      	b.n	8004d2c <SystemClock_Config+0x8c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8004d2e:	f7fc f9f1 	bl	8001114 <HAL_RCC_GetHCLKFreq>
 8004d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d36:	fbb0 f0f3 	udiv	r0, r0, r3
 8004d3a:	f7fb ffe1 	bl	8000d00 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004d3e:	2004      	movs	r0, #4
 8004d40:	f7fb fff4 	bl	8000d2c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004d44:	4622      	mov	r2, r4
 8004d46:	4621      	mov	r1, r4
 8004d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d4c:	f7fb ffa4 	bl	8000c98 <HAL_NVIC_SetPriority>
}
 8004d50:	b02c      	add	sp, #176	; 0xb0
 8004d52:	bd10      	pop	{r4, pc}
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40007000 	.word	0x40007000

08004d5c <CAN_Config>:

}

/* USER CODE BEGIN 4 */
void CAN_Config(void)
{
 8004d5c:	b530      	push	{r4, r5, lr}
  CAN_FilterTypeDef  sFilterConfig;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 9;
 8004d5e:	481d      	ldr	r0, [pc, #116]	; (8004dd4 <CAN_Config+0x78>)
  hcan1.Instance = CAN1;
 8004d60:	4c1d      	ldr	r4, [pc, #116]	; (8004dd8 <CAN_Config+0x7c>)
  hcan1.Init.Prescaler = 9;
 8004d62:	2309      	movs	r3, #9
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004d64:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
  hcan1.Init.Prescaler = 9;
 8004d68:	e884 0009 	stmia.w	r4, {r0, r3}
{
 8004d6c:	b08b      	sub	sp, #44	; 0x2c
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004d6e:	2300      	movs	r3, #0
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8004d70:	6122      	str	r2, [r4, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = ENABLE;
 8004d72:	2501      	movs	r5, #1
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004d74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004d78:	4620      	mov	r0, r4
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004d7a:	60a3      	str	r3, [r4, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004d7c:	60e3      	str	r3, [r4, #12]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004d7e:	6162      	str	r2, [r4, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004d80:	7623      	strb	r3, [r4, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004d82:	7663      	strb	r3, [r4, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004d84:	76a3      	strb	r3, [r4, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8004d86:	76e5      	strb	r5, [r4, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004d88:	7723      	strb	r3, [r4, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004d8a:	7763      	strb	r3, [r4, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004d8c:	f7fb fd62 	bl	8000854 <HAL_CAN_Init>
 8004d90:	b100      	cbz	r0, 8004d94 <CAN_Config+0x38>
 8004d92:	e7fe      	b.n	8004d92 <CAN_Config+0x36>
  {
	_Error_Handler(__FILE__, __LINE__);
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 8004d94:	9005      	str	r0, [sp, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8004d96:	9006      	str	r0, [sp, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
  sFilterConfig.FilterIdHigh = 0x0000;
 8004d98:	9000      	str	r0, [sp, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8004d9a:	9001      	str	r0, [sp, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8004d9c:	9002      	str	r0, [sp, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8004d9e:	9003      	str	r0, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8004da0:	9004      	str	r0, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
  sFilterConfig.SlaveStartFilterBank = 14;
 8004da2:	230e      	movs	r3, #14

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8004da4:	4669      	mov	r1, sp
 8004da6:	4620      	mov	r0, r4
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8004da8:	9507      	str	r5, [sp, #28]
  sFilterConfig.FilterActivation = ENABLE;
 8004daa:	9508      	str	r5, [sp, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8004dac:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8004dae:	f7fb fdcd 	bl	800094c <HAL_CAN_ConfigFilter>
 8004db2:	b100      	cbz	r0, 8004db6 <CAN_Config+0x5a>
 8004db4:	e7fe      	b.n	8004db4 <CAN_Config+0x58>
    /* Filter configuration Error */
	  _Error_Handler(__FILE__, __LINE__);
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8004db6:	4620      	mov	r0, r4
 8004db8:	f7fb fe52 	bl	8000a60 <HAL_CAN_Start>
 8004dbc:	b100      	cbz	r0, 8004dc0 <CAN_Config+0x64>
 8004dbe:	e7fe      	b.n	8004dbe <CAN_Config+0x62>
//    /* Notification Error */
//	  _Error_Handler(__FILE__, __LINE__);
//  }

  /*##-5- Configure Transmission process #####################################*/
  TxHeader.StdId = 0x01;
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <CAN_Config+0x80>)
  TxHeader.ExtId = 0x01; // not needed
  TxHeader.RTR = CAN_RTR_DATA;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.DLC = 8;
 8004dc2:	2208      	movs	r2, #8
  TxHeader.StdId = 0x01;
 8004dc4:	601d      	str	r5, [r3, #0]
  TxHeader.ExtId = 0x01; // not needed
 8004dc6:	605d      	str	r5, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8004dc8:	60d8      	str	r0, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8004dca:	6098      	str	r0, [r3, #8]
  TxHeader.DLC = 8;
 8004dcc:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8004dce:	7518      	strb	r0, [r3, #20]
}
 8004dd0:	b00b      	add	sp, #44	; 0x2c
 8004dd2:	bd30      	pop	{r4, r5, pc}
 8004dd4:	40006400 	.word	0x40006400
 8004dd8:	20001004 	.word	0x20001004
 8004ddc:	2000102c 	.word	0x2000102c

08004de0 <main>:
{
 8004de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004de4:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 8004de6:	f7fb fbb9 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8004dea:	f7ff ff59 	bl	8004ca0 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dee:	4b91      	ldr	r3, [pc, #580]	; (8005034 <main+0x254>)
  hadc1.Instance = ADC1;
 8004df0:	4c91      	ldr	r4, [pc, #580]	; (8005038 <main+0x258>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004df2:	4e92      	ldr	r6, [pc, #584]	; (800503c <main+0x25c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004df4:	2200      	movs	r2, #0
 8004df6:	9201      	str	r2, [sp, #4]
 8004df8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dfa:	f041 0104 	orr.w	r1, r1, #4
 8004dfe:	6319      	str	r1, [r3, #48]	; 0x30
 8004e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e02:	f001 0104 	and.w	r1, r1, #4
 8004e06:	9101      	str	r1, [sp, #4]
 8004e08:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e0a:	9202      	str	r2, [sp, #8]
 8004e0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e0e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8004e12:	6319      	str	r1, [r3, #48]	; 0x30
 8004e14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e16:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8004e1a:	9102      	str	r1, [sp, #8]
 8004e1c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e1e:	9203      	str	r2, [sp, #12]
 8004e20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e22:	f041 0101 	orr.w	r1, r1, #1
 8004e26:	6319      	str	r1, [r3, #48]	; 0x30
 8004e28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e2a:	f001 0101 	and.w	r1, r1, #1
 8004e2e:	9103      	str	r1, [sp, #12]
 8004e30:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e32:	9204      	str	r2, [sp, #16]
 8004e34:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e36:	f041 0102 	orr.w	r1, r1, #2
 8004e3a:	6319      	str	r1, [r3, #48]	; 0x30
 8004e3c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e3e:	f001 0102 	and.w	r1, r1, #2
 8004e42:	9104      	str	r1, [sp, #16]
 8004e44:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e46:	9205      	str	r2, [sp, #20]
 8004e48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e4a:	f041 0108 	orr.w	r1, r1, #8
 8004e4e:	6319      	str	r1, [r3, #48]	; 0x30
 8004e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004e52:	6062      	str	r2, [r4, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	9305      	str	r3, [sp, #20]
 8004e5a:	9b05      	ldr	r3, [sp, #20]
  hadc1.Instance = ADC1;
 8004e5c:	4b78      	ldr	r3, [pc, #480]	; (8005040 <main+0x260>)
 8004e5e:	6023      	str	r3, [r4, #0]
  hadc1.Init.NbrOfConversion = 1;
 8004e60:	2501      	movs	r5, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e62:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004e64:	60a2      	str	r2, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004e66:	6122      	str	r2, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004e68:	61a2      	str	r2, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004e6a:	6222      	str	r2, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004e6c:	62e2      	str	r2, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004e6e:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004e70:	60e2      	str	r2, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004e72:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004e74:	6322      	str	r2, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004e76:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004e78:	f7fb fbb0 	bl	80005dc <HAL_ADC_Init>
 8004e7c:	b100      	cbz	r0, 8004e80 <main+0xa0>
 8004e7e:	e7fe      	b.n	8004e7e <main+0x9e>
  sConfig.Channel = ADC_CHANNEL_2;
 8004e80:	2302      	movs	r3, #2
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004e82:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e84:	a913      	add	r1, sp, #76	; 0x4c
 8004e86:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 8004e88:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.Rank = 1;
 8004e8a:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004e8c:	f7fb fc4a 	bl	8000724 <HAL_ADC_ConfigChannel>
 8004e90:	b100      	cbz	r0, 8004e94 <main+0xb4>
 8004e92:	e7fe      	b.n	8004e92 <main+0xb2>
  hadc2.Instance = ADC2;
 8004e94:	4c6b      	ldr	r4, [pc, #428]	; (8005044 <main+0x264>)
 8004e96:	4b6c      	ldr	r3, [pc, #432]	; (8005048 <main+0x268>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8004e98:	6060      	str	r0, [r4, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004e9a:	60a0      	str	r0, [r4, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8004e9c:	6120      	str	r0, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8004e9e:	61a0      	str	r0, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004ea0:	6220      	str	r0, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004ea2:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004ea4:	60e0      	str	r0, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8004ea6:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004ea8:	4620      	mov	r0, r4
  hadc2.Instance = ADC2;
 8004eaa:	6023      	str	r3, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004eac:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc2.Init.NbrOfConversion = 1;
 8004eae:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004eb0:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004eb2:	f7fb fb93 	bl	80005dc <HAL_ADC_Init>
 8004eb6:	b100      	cbz	r0, 8004eba <main+0xda>
 8004eb8:	e7fe      	b.n	8004eb8 <main+0xd8>
  sConfig.Channel = ADC_CHANNEL_4;
 8004eba:	2304      	movs	r3, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004ebc:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ebe:	a913      	add	r1, sp, #76	; 0x4c
 8004ec0:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8004ec2:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.Rank = 1;
 8004ec4:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004ec6:	f7fb fc2d 	bl	8000724 <HAL_ADC_ConfigChannel>
 8004eca:	b100      	cbz	r0, 8004ece <main+0xee>
 8004ecc:	e7fe      	b.n	8004ecc <main+0xec>
  hcan1.Instance = CAN1;
 8004ece:	4b5f      	ldr	r3, [pc, #380]	; (800504c <main+0x26c>)
  hcan1.Init.Prescaler = 16;
 8004ed0:	4a5f      	ldr	r2, [pc, #380]	; (8005050 <main+0x270>)
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004ed2:	6098      	str	r0, [r3, #8]
  hcan1.Init.Prescaler = 16;
 8004ed4:	2510      	movs	r5, #16
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004ed6:	60d8      	str	r0, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8004ed8:	6118      	str	r0, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8004eda:	6158      	str	r0, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004edc:	7618      	strb	r0, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004ede:	7658      	strb	r0, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004ee0:	7698      	strb	r0, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004ee2:	76d8      	strb	r0, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004ee4:	7718      	strb	r0, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004ee6:	7758      	strb	r0, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004ee8:	4618      	mov	r0, r3
  hcan1.Init.Prescaler = 16;
 8004eea:	e883 0024 	stmia.w	r3, {r2, r5}
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004eee:	f7fb fcb1 	bl	8000854 <HAL_CAN_Init>
 8004ef2:	b100      	cbz	r0, 8004ef6 <main+0x116>
 8004ef4:	e7fe      	b.n	8004ef4 <main+0x114>
  hi2c3.Instance = I2C3;
 8004ef6:	4b57      	ldr	r3, [pc, #348]	; (8005054 <main+0x274>)
  hi2c3.Init.ClockSpeed = 100000;
 8004ef8:	4a57      	ldr	r2, [pc, #348]	; (8005058 <main+0x278>)
 8004efa:	4c58      	ldr	r4, [pc, #352]	; (800505c <main+0x27c>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004efc:	6098      	str	r0, [r3, #8]
  hi2c3.Init.ClockSpeed = 100000;
 8004efe:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2c3.Init.OwnAddress1 = 0;
 8004f02:	60d8      	str	r0, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f08:	6158      	str	r0, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004f0a:	6198      	str	r0, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f0c:	61d8      	str	r0, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f0e:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004f10:	4618      	mov	r0, r3
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f12:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004f14:	f7fb fff6 	bl	8000f04 <HAL_I2C_Init>
 8004f18:	b100      	cbz	r0, 8004f1c <main+0x13c>
 8004f1a:	e7fe      	b.n	8004f1a <main+0x13a>
  hspi2.Instance = SPI2;
 8004f1c:	4b50      	ldr	r3, [pc, #320]	; (8005060 <main+0x280>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f1e:	4951      	ldr	r1, [pc, #324]	; (8005064 <main+0x284>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004f20:	6098      	str	r0, [r3, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004f22:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004f26:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f2e:	60d8      	str	r0, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f30:	6118      	str	r0, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f32:	6158      	str	r0, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004f34:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f36:	61d8      	str	r0, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f38:	6218      	str	r0, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f3a:	6258      	str	r0, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f3c:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004f3e:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f40:	4618      	mov	r0, r3
  hspi2.Init.CRCPolynomial = 10;
 8004f42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004f44:	f7fd f982 	bl	800224c <HAL_SPI_Init>
 8004f48:	b100      	cbz	r0, 8004f4c <main+0x16c>
 8004f4a:	e7fe      	b.n	8004f4a <main+0x16a>
  htim1.Instance = TIM1;
 8004f4c:	4c46      	ldr	r4, [pc, #280]	; (8005068 <main+0x288>)
 8004f4e:	4b47      	ldr	r3, [pc, #284]	; (800506c <main+0x28c>)
  htim1.Init.Prescaler = 0;
 8004f50:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f52:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 8004f54:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f56:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8004f58:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f5a:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 8004f5c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004f5e:	f7fd fbcb 	bl	80026f8 <HAL_TIM_Base_Init>
 8004f62:	b100      	cbz	r0, 8004f66 <main+0x186>
 8004f64:	e7fe      	b.n	8004f64 <main+0x184>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004f66:	ad1a      	add	r5, sp, #104	; 0x68
 8004f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f6c:	f845 3d48 	str.w	r3, [r5, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	f7fd fa83 	bl	800247e <HAL_TIM_ConfigClockSource>
 8004f78:	b100      	cbz	r0, 8004f7c <main+0x19c>
 8004f7a:	e7fe      	b.n	8004f7a <main+0x19a>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	f7fd fbd5 	bl	800272c <HAL_TIM_OC_Init>
 8004f82:	b100      	cbz	r0, 8004f86 <main+0x1a6>
 8004f84:	e7fe      	b.n	8004f84 <main+0x1a4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f86:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f88:	a906      	add	r1, sp, #24
 8004f8a:	4837      	ldr	r0, [pc, #220]	; (8005068 <main+0x288>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f8c:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f8e:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004f90:	f7fd fd20 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 8004f94:	b100      	cbz	r0, 8004f98 <main+0x1b8>
 8004f96:	e7fe      	b.n	8004f96 <main+0x1b6>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004f98:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8004f9a:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f9c:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f9e:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004fa0:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004fa2:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004fa4:	220c      	movs	r2, #12
 8004fa6:	a90c      	add	r1, sp, #48	; 0x30
 8004fa8:	482f      	ldr	r0, [pc, #188]	; (8005068 <main+0x288>)
 8004faa:	f7fd fce5 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 8004fae:	b100      	cbz	r0, 8004fb2 <main+0x1d2>
 8004fb0:	e7fe      	b.n	8004fb0 <main+0x1d0>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004fb2:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004fb4:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004fb6:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 8004fb8:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004fba:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004fc0:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004fc2:	a913      	add	r1, sp, #76	; 0x4c
 8004fc4:	4828      	ldr	r0, [pc, #160]	; (8005068 <main+0x288>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004fc6:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004fc8:	f7fd fd26 	bl	8002a18 <HAL_TIMEx_ConfigBreakDeadTime>
 8004fcc:	4606      	mov	r6, r0
 8004fce:	b100      	cbz	r0, 8004fd2 <main+0x1f2>
 8004fd0:	e7fe      	b.n	8004fd0 <main+0x1f0>
  htim2.Instance = TIM2;
 8004fd2:	4c27      	ldr	r4, [pc, #156]	; (8005070 <main+0x290>)
  HAL_TIM_MspPostInit(&htim1);
 8004fd4:	4824      	ldr	r0, [pc, #144]	; (8005068 <main+0x288>)
 8004fd6:	f000 fc6f 	bl	80058b8 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8004fda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004fde:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 0;
 8004fe0:	e884 0048 	stmia.w	r4, {r3, r6}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fe4:	60a6      	str	r6, [r4, #8]
  htim2.Init.Period = 0;
 8004fe6:	60e6      	str	r6, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fe8:	6126      	str	r6, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004fea:	f7fd fb85 	bl	80026f8 <HAL_TIM_Base_Init>
 8004fee:	b100      	cbz	r0, 8004ff2 <main+0x212>
 8004ff0:	e7fe      	b.n	8004ff0 <main+0x210>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ff6:	a90c      	add	r1, sp, #48	; 0x30
 8004ff8:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ffa:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ffc:	f7fd fa3f 	bl	800247e <HAL_TIM_ConfigClockSource>
 8005000:	b100      	cbz	r0, 8005004 <main+0x224>
 8005002:	e7fe      	b.n	8005002 <main+0x222>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8005004:	4620      	mov	r0, r4
 8005006:	f7fd fb91 	bl	800272c <HAL_TIM_OC_Init>
 800500a:	b100      	cbz	r0, 800500e <main+0x22e>
 800500c:	e7fe      	b.n	800500c <main+0x22c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800500e:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005010:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005012:	4629      	mov	r1, r5
 8005014:	4620      	mov	r0, r4
 8005016:	f7fd fcdd 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 800501a:	4602      	mov	r2, r0
 800501c:	b100      	cbz	r0, 8005020 <main+0x240>
 800501e:	e7fe      	b.n	800501e <main+0x23e>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005020:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 0;
 8005022:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005024:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005026:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005028:	a913      	add	r1, sp, #76	; 0x4c
 800502a:	4620      	mov	r0, r4
 800502c:	f7fd fca4 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 8005030:	b300      	cbz	r0, 8005074 <main+0x294>
 8005032:	e7fe      	b.n	8005032 <main+0x252>
 8005034:	40023800 	.word	0x40023800
 8005038:	20000d64 	.word	0x20000d64
 800503c:	0f000001 	.word	0x0f000001
 8005040:	40012000 	.word	0x40012000
 8005044:	20000ca4 	.word	0x20000ca4
 8005048:	40012100 	.word	0x40012100
 800504c:	20001004 	.word	0x20001004
 8005050:	40006400 	.word	0x40006400
 8005054:	20000b40 	.word	0x20000b40
 8005058:	40005c00 	.word	0x40005c00
 800505c:	000186a0 	.word	0x000186a0
 8005060:	20000b94 	.word	0x20000b94
 8005064:	40003800 	.word	0x40003800
 8005068:	20000df4 	.word	0x20000df4
 800506c:	40010000 	.word	0x40010000
 8005070:	20000fc8 	.word	0x20000fc8
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005074:	2204      	movs	r2, #4
 8005076:	a913      	add	r1, sp, #76	; 0x4c
 8005078:	4620      	mov	r0, r4
 800507a:	f7fd fc7d 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 800507e:	4606      	mov	r6, r0
 8005080:	b100      	cbz	r0, 8005084 <main+0x2a4>
 8005082:	e7fe      	b.n	8005082 <main+0x2a2>
  HAL_TIM_MspPostInit(&htim2);
 8005084:	4620      	mov	r0, r4
 8005086:	f000 fc17 	bl	80058b8 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800508a:	488b      	ldr	r0, [pc, #556]	; (80052b8 <main+0x4d8>)
 800508c:	4b8b      	ldr	r3, [pc, #556]	; (80052bc <main+0x4dc>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800508e:	6086      	str	r6, [r0, #8]
  htim3.Init.Prescaler = 0;
 8005090:	e880 0048 	stmia.w	r0, {r3, r6}
  htim3.Init.Period = 0;
 8005094:	60c6      	str	r6, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005096:	6106      	str	r6, [r0, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005098:	f7fd fb2e 	bl	80026f8 <HAL_TIM_Base_Init>
 800509c:	b100      	cbz	r0, 80050a0 <main+0x2c0>
 800509e:	e7fe      	b.n	800509e <main+0x2be>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80050a0:	4885      	ldr	r0, [pc, #532]	; (80052b8 <main+0x4d8>)
 80050a2:	f7fd fb5d 	bl	8002760 <HAL_TIM_IC_Init>
 80050a6:	b100      	cbz	r0, 80050aa <main+0x2ca>
 80050a8:	e7fe      	b.n	80050a8 <main+0x2c8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80050aa:	2307      	movs	r3, #7
 80050ac:	9313      	str	r3, [sp, #76]	; 0x4c
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80050ae:	9015      	str	r0, [sp, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80050b0:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 80050b2:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 80050b4:	a913      	add	r1, sp, #76	; 0x4c
 80050b6:	4880      	ldr	r0, [pc, #512]	; (80052b8 <main+0x4d8>)
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80050b8:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 80050ba:	f7fd fa99 	bl	80025f0 <HAL_TIM_SlaveConfigSynchronization>
 80050be:	b100      	cbz	r0, 80050c2 <main+0x2e2>
 80050c0:	e7fe      	b.n	80050c0 <main+0x2e0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050c2:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050c4:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80050c6:	4629      	mov	r1, r5
 80050c8:	487b      	ldr	r0, [pc, #492]	; (80052b8 <main+0x4d8>)
 80050ca:	f7fd fc83 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 80050ce:	b100      	cbz	r0, 80050d2 <main+0x2f2>
 80050d0:	e7fe      	b.n	80050d0 <main+0x2f0>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80050d2:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80050d4:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80050d6:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80050d8:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80050da:	2204      	movs	r2, #4
 80050dc:	a90c      	add	r1, sp, #48	; 0x30
 80050de:	4876      	ldr	r0, [pc, #472]	; (80052b8 <main+0x4d8>)
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80050e0:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80050e2:	f7fd fb91 	bl	8002808 <HAL_TIM_IC_ConfigChannel>
 80050e6:	b100      	cbz	r0, 80050ea <main+0x30a>
 80050e8:	e7fe      	b.n	80050e8 <main+0x308>
  htim4.Instance = TIM4;
 80050ea:	4c75      	ldr	r4, [pc, #468]	; (80052c0 <main+0x4e0>)
 80050ec:	4b75      	ldr	r3, [pc, #468]	; (80052c4 <main+0x4e4>)
  htim4.Init.Prescaler = 0;
 80050ee:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050f0:	60a0      	str	r0, [r4, #8]
  htim4.Init.Period = 0;
 80050f2:	60e0      	str	r0, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80050f4:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80050f6:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 80050f8:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80050fa:	f7fd fafd 	bl	80026f8 <HAL_TIM_Base_Init>
 80050fe:	b100      	cbz	r0, 8005102 <main+0x322>
 8005100:	e7fe      	b.n	8005100 <main+0x320>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8005106:	a90c      	add	r1, sp, #48	; 0x30
 8005108:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800510a:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800510c:	f7fd f9b7 	bl	800247e <HAL_TIM_ConfigClockSource>
 8005110:	b100      	cbz	r0, 8005114 <main+0x334>
 8005112:	e7fe      	b.n	8005112 <main+0x332>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8005114:	4620      	mov	r0, r4
 8005116:	f7fd fb09 	bl	800272c <HAL_TIM_OC_Init>
 800511a:	b100      	cbz	r0, 800511e <main+0x33e>
 800511c:	e7fe      	b.n	800511c <main+0x33c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800511e:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005120:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005122:	4629      	mov	r1, r5
 8005124:	4620      	mov	r0, r4
 8005126:	f7fd fc55 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 800512a:	b100      	cbz	r0, 800512e <main+0x34e>
 800512c:	e7fe      	b.n	800512c <main+0x34c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800512e:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 0;
 8005130:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005132:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005134:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005136:	2204      	movs	r2, #4
 8005138:	a913      	add	r1, sp, #76	; 0x4c
 800513a:	4620      	mov	r0, r4
 800513c:	f7fd fc1c 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 8005140:	4606      	mov	r6, r0
 8005142:	b100      	cbz	r0, 8005146 <main+0x366>
 8005144:	e7fe      	b.n	8005144 <main+0x364>
  HAL_TIM_MspPostInit(&htim4);
 8005146:	4620      	mov	r0, r4
 8005148:	f000 fbb6 	bl	80058b8 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 800514c:	485e      	ldr	r0, [pc, #376]	; (80052c8 <main+0x4e8>)
 800514e:	4b5f      	ldr	r3, [pc, #380]	; (80052cc <main+0x4ec>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005150:	6086      	str	r6, [r0, #8]
  htim5.Init.Prescaler = 0;
 8005152:	e880 0048 	stmia.w	r0, {r3, r6}
  htim5.Init.Period = 0;
 8005156:	60c6      	str	r6, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005158:	6106      	str	r6, [r0, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800515a:	f7fd facd 	bl	80026f8 <HAL_TIM_Base_Init>
 800515e:	b100      	cbz	r0, 8005162 <main+0x382>
 8005160:	e7fe      	b.n	8005160 <main+0x380>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005162:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005166:	a90c      	add	r1, sp, #48	; 0x30
 8005168:	4857      	ldr	r0, [pc, #348]	; (80052c8 <main+0x4e8>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800516a:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800516c:	f7fd f987 	bl	800247e <HAL_TIM_ConfigClockSource>
 8005170:	b100      	cbz	r0, 8005174 <main+0x394>
 8005172:	e7fe      	b.n	8005172 <main+0x392>
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8005174:	4854      	ldr	r0, [pc, #336]	; (80052c8 <main+0x4e8>)
 8005176:	f7fd fad9 	bl	800272c <HAL_TIM_OC_Init>
 800517a:	b100      	cbz	r0, 800517e <main+0x39e>
 800517c:	e7fe      	b.n	800517c <main+0x39c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800517e:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005180:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005182:	4629      	mov	r1, r5
 8005184:	4850      	ldr	r0, [pc, #320]	; (80052c8 <main+0x4e8>)
 8005186:	f7fd fc25 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 800518a:	4602      	mov	r2, r0
 800518c:	b100      	cbz	r0, 8005190 <main+0x3b0>
 800518e:	e7fe      	b.n	800518e <main+0x3ae>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005190:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.Pulse = 0;
 8005192:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005194:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005196:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005198:	a913      	add	r1, sp, #76	; 0x4c
 800519a:	484b      	ldr	r0, [pc, #300]	; (80052c8 <main+0x4e8>)
 800519c:	f7fd fbec 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 80051a0:	b100      	cbz	r0, 80051a4 <main+0x3c4>
 80051a2:	e7fe      	b.n	80051a2 <main+0x3c2>
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80051a4:	2204      	movs	r2, #4
 80051a6:	a913      	add	r1, sp, #76	; 0x4c
 80051a8:	4847      	ldr	r0, [pc, #284]	; (80052c8 <main+0x4e8>)
 80051aa:	f7fd fbe5 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 80051ae:	4606      	mov	r6, r0
 80051b0:	b100      	cbz	r0, 80051b4 <main+0x3d4>
 80051b2:	e7fe      	b.n	80051b2 <main+0x3d2>
  htim8.Instance = TIM8;
 80051b4:	4c46      	ldr	r4, [pc, #280]	; (80052d0 <main+0x4f0>)
  HAL_TIM_MspPostInit(&htim5);
 80051b6:	4844      	ldr	r0, [pc, #272]	; (80052c8 <main+0x4e8>)
 80051b8:	f000 fb7e 	bl	80058b8 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 80051bc:	4b45      	ldr	r3, [pc, #276]	; (80052d4 <main+0x4f4>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051be:	60a6      	str	r6, [r4, #8]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80051c0:	4620      	mov	r0, r4
  htim8.Init.Prescaler = 0;
 80051c2:	e884 0048 	stmia.w	r4, {r3, r6}
  htim8.Init.Period = 0;
 80051c6:	60e6      	str	r6, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051c8:	6126      	str	r6, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 80051ca:	6166      	str	r6, [r4, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80051cc:	f7fd fa94 	bl	80026f8 <HAL_TIM_Base_Init>
 80051d0:	b100      	cbz	r0, 80051d4 <main+0x3f4>
 80051d2:	e7fe      	b.n	80051d2 <main+0x3f2>
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80051d4:	4629      	mov	r1, r5
 80051d6:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80051d8:	9708      	str	r7, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80051da:	f7fd f950 	bl	800247e <HAL_TIM_ConfigClockSource>
 80051de:	b100      	cbz	r0, 80051e2 <main+0x402>
 80051e0:	e7fe      	b.n	80051e0 <main+0x400>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80051e2:	4620      	mov	r0, r4
 80051e4:	f7fd faa2 	bl	800272c <HAL_TIM_OC_Init>
 80051e8:	b100      	cbz	r0, 80051ec <main+0x40c>
 80051ea:	e7fe      	b.n	80051ea <main+0x40a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051ec:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051ee:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80051f0:	a906      	add	r1, sp, #24
 80051f2:	4620      	mov	r0, r4
 80051f4:	f7fd fbee 	bl	80029d4 <HAL_TIMEx_MasterConfigSynchronization>
 80051f8:	4602      	mov	r2, r0
 80051fa:	b100      	cbz	r0, 80051fe <main+0x41e>
 80051fc:	e7fe      	b.n	80051fc <main+0x41c>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80051fe:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8005200:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005202:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005204:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005206:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005208:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800520a:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800520c:	a90c      	add	r1, sp, #48	; 0x30
 800520e:	4620      	mov	r0, r4
 8005210:	f7fd fbb2 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 8005214:	b100      	cbz	r0, 8005218 <main+0x438>
 8005216:	e7fe      	b.n	8005216 <main+0x436>
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005218:	2204      	movs	r2, #4
 800521a:	a90c      	add	r1, sp, #48	; 0x30
 800521c:	482c      	ldr	r0, [pc, #176]	; (80052d0 <main+0x4f0>)
 800521e:	f7fd fbab 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 8005222:	b100      	cbz	r0, 8005226 <main+0x446>
 8005224:	e7fe      	b.n	8005224 <main+0x444>
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005226:	2208      	movs	r2, #8
 8005228:	a90c      	add	r1, sp, #48	; 0x30
 800522a:	4829      	ldr	r0, [pc, #164]	; (80052d0 <main+0x4f0>)
 800522c:	f7fd fba4 	bl	8002978 <HAL_TIM_OC_ConfigChannel>
 8005230:	b100      	cbz	r0, 8005234 <main+0x454>
 8005232:	e7fe      	b.n	8005232 <main+0x452>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005234:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005236:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005238:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 800523a:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800523c:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800523e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005242:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005244:	a913      	add	r1, sp, #76	; 0x4c
 8005246:	4822      	ldr	r0, [pc, #136]	; (80052d0 <main+0x4f0>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005248:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800524a:	f7fd fbe5 	bl	8002a18 <HAL_TIMEx_ConfigBreakDeadTime>
 800524e:	4604      	mov	r4, r0
 8005250:	b100      	cbz	r0, 8005254 <main+0x474>
 8005252:	e7fe      	b.n	8005252 <main+0x472>
  HAL_TIM_MspPostInit(&htim8);
 8005254:	481e      	ldr	r0, [pc, #120]	; (80052d0 <main+0x4f0>)
 8005256:	f000 fb2f 	bl	80058b8 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 800525a:	481f      	ldr	r0, [pc, #124]	; (80052d8 <main+0x4f8>)
  huart1.Init.BaudRate = 115200;
 800525c:	4b1f      	ldr	r3, [pc, #124]	; (80052dc <main+0x4fc>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800525e:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8005260:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005264:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 8005266:	e880 0048 	stmia.w	r0, {r3, r6}
  huart1.Init.StopBits = UART_STOPBITS_1;
 800526a:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800526c:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800526e:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005270:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005272:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005274:	f7fd fd10 	bl	8002c98 <HAL_UART_Init>
 8005278:	b100      	cbz	r0, 800527c <main+0x49c>
 800527a:	e7fe      	b.n	800527a <main+0x49a>
  huart3.Instance = USART3;
 800527c:	4b18      	ldr	r3, [pc, #96]	; (80052e0 <main+0x500>)
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <main+0x504>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005280:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005282:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005284:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005286:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005288:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800528a:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 800528c:	e883 0044 	stmia.w	r3, {r2, r6}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005290:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005292:	f7fd fd01 	bl	8002c98 <HAL_UART_Init>
 8005296:	b100      	cbz	r0, 800529a <main+0x4ba>
 8005298:	e7fe      	b.n	8005298 <main+0x4b8>
  huart6.Instance = USART6;
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <main+0x508>)
 800529c:	4a13      	ldr	r2, [pc, #76]	; (80052ec <main+0x50c>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800529e:	6098      	str	r0, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80052a0:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80052a2:	6118      	str	r0, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052a4:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80052a6:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80052a8:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 80052aa:	e883 0044 	stmia.w	r3, {r2, r6}
  huart6.Init.Mode = UART_MODE_TX_RX;
 80052ae:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80052b0:	f7fd fcf2 	bl	8002c98 <HAL_UART_Init>
 80052b4:	b1e0      	cbz	r0, 80052f0 <main+0x510>
 80052b6:	e7fe      	b.n	80052b6 <main+0x4d6>
 80052b8:	20000d28 	.word	0x20000d28
 80052bc:	40000400 	.word	0x40000400
 80052c0:	20000c28 	.word	0x20000c28
 80052c4:	40000800 	.word	0x40000800
 80052c8:	20000cec 	.word	0x20000cec
 80052cc:	40000c00 	.word	0x40000c00
 80052d0:	20000bec 	.word	0x20000bec
 80052d4:	40010400 	.word	0x40010400
 80052d8:	20000dac 	.word	0x20000dac
 80052dc:	40011000 	.word	0x40011000
 80052e0:	20000c64 	.word	0x20000c64
 80052e4:	40004800 	.word	0x40004800
 80052e8:	20000eb8 	.word	0x20000eb8
 80052ec:	40011400 	.word	0x40011400
  hsd.Instance = SDIO;
 80052f0:	4b34      	ldr	r3, [pc, #208]	; (80053c4 <main+0x5e4>)
 80052f2:	4a35      	ldr	r2, [pc, #212]	; (80053c8 <main+0x5e8>)
 80052f4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80052f6:	6058      	str	r0, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80052f8:	6098      	str	r0, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80052fa:	60d8      	str	r0, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80052fc:	6118      	str	r0, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80052fe:	6158      	str	r0, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8005300:	6198      	str	r0, [r3, #24]
  MX_FATFS_Init();
 8005302:	f7ff fcbd 	bl	8004c80 <MX_FATFS_Init>
  CAN_Config();
 8005306:	f7ff fd29 	bl	8004d5c <CAN_Config>
  int return_SD = do_something_SD();
 800530a:	f7ff fc51 	bl	8004bb0 <do_something_SD>
  if (return_SD == 1) {
 800530e:	2801      	cmp	r0, #1
 8005310:	4e2e      	ldr	r6, [pc, #184]	; (80053cc <main+0x5ec>)
 8005312:	4c2f      	ldr	r4, [pc, #188]	; (80053d0 <main+0x5f0>)
 8005314:	d117      	bne.n	8005346 <main+0x566>
		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8005316:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80053e0 <main+0x600>
 800531a:	4627      	mov	r7, r4
 800531c:	4635      	mov	r5, r6
		  TxHeader.StdId = 0x09;
 800531e:	2309      	movs	r3, #9
 8005320:	6033      	str	r3, [r6, #0]
		  TxData[0] = 9; 	// random value
 8005322:	7023      	strb	r3, [r4, #0]
		  TxData[1] = 9;	//random value
 8005324:	7063      	strb	r3, [r4, #1]
		  TxData[2] = 9; 	// random value
 8005326:	70a3      	strb	r3, [r4, #2]
		  TxData[3] = 9;	//random value
 8005328:	70e3      	strb	r3, [r4, #3]
		  TxData[4] = 9; 	// random value
 800532a:	7123      	strb	r3, [r4, #4]
		  TxData[5] = 9; 	// random value
 800532c:	7163      	strb	r3, [r4, #5]
		  TxData[6] = 9; 	// random value
 800532e:	71a3      	strb	r3, [r4, #6]
		  TxData[7] = 9; 	// random value
 8005330:	71e3      	strb	r3, [r4, #7]
		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8005332:	463a      	mov	r2, r7
 8005334:	4643      	mov	r3, r8
 8005336:	4629      	mov	r1, r5
 8005338:	4826      	ldr	r0, [pc, #152]	; (80053d4 <main+0x5f4>)
 800533a:	f7fb fbbc 	bl	8000ab6 <HAL_CAN_AddTxMessage>
		  HAL_Delay(10); // 100 / sec is enough
 800533e:	200a      	movs	r0, #10
 8005340:	f7fb f938 	bl	80005b4 <HAL_Delay>
 8005344:	e7eb      	b.n	800531e <main+0x53e>
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8005346:	4d23      	ldr	r5, [pc, #140]	; (80053d4 <main+0x5f4>)
          HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8005348:	4f23      	ldr	r7, [pc, #140]	; (80053d8 <main+0x5f8>)
 800534a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80053dc <main+0x5fc>
	  time_stamp = HAL_GetTick();
 800534e:	f7fb f92b 	bl	80005a8 <HAL_GetTick>
	  uint8_t first = (uint8_t) (time_stamp >> 16);
 8005352:	0c03      	lsrs	r3, r0, #16
 8005354:	7163      	strb	r3, [r4, #5]
	  uint8_t third = (uint8_t) (time_stamp >> 0);
 8005356:	71e0      	strb	r0, [r4, #7]
	  uint8_t second = (uint8_t) (time_stamp >> 8);
 8005358:	0a03      	lsrs	r3, r0, #8
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 800535a:	2100      	movs	r1, #0
 800535c:	4628      	mov	r0, r5
	  uint8_t second = (uint8_t) (time_stamp >> 8);
 800535e:	71a3      	strb	r3, [r4, #6]
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8005360:	f7fb fc76 	bl	8000c50 <HAL_CAN_GetRxFifoFillLevel>
 8005364:	b1c8      	cbz	r0, 800539a <main+0x5ba>
          HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <main+0x5f8>)
 8005368:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <main+0x5fc>)
 800536a:	2100      	movs	r1, #0
 800536c:	4628      	mov	r0, r5
 800536e:	f7fb fbf1 	bl	8000b54 <HAL_CAN_GetRxMessage>
          TxHeader.StdId = 0x007;
 8005372:	2307      	movs	r3, #7
 8005374:	6033      	str	r3, [r6, #0]
	      TxData[0] = RxData[0];
 8005376:	783b      	ldrb	r3, [r7, #0]
 8005378:	7023      	strb	r3, [r4, #0]
	      TxData[1] = RxData[1];
 800537a:	787b      	ldrb	r3, [r7, #1]
 800537c:	7063      	strb	r3, [r4, #1]
	      TxData[2] = RxData[2];
 800537e:	78bb      	ldrb	r3, [r7, #2]
 8005380:	70a3      	strb	r3, [r4, #2]
	      TxData[3] = RxData[3];
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	70e3      	strb	r3, [r4, #3]
	      TxData[4] = RxHeader.StdId;
 8005386:	f8d8 3000 	ldr.w	r3, [r8]
 800538a:	7123      	strb	r3, [r4, #4]
		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 800538c:	4a10      	ldr	r2, [pc, #64]	; (80053d0 <main+0x5f0>)
 800538e:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <main+0x600>)
 8005390:	490e      	ldr	r1, [pc, #56]	; (80053cc <main+0x5ec>)
 8005392:	4628      	mov	r0, r5
 8005394:	f7fb fb8f 	bl	8000ab6 <HAL_CAN_AddTxMessage>
 8005398:	e7d9      	b.n	800534e <main+0x56e>
		  TxHeader.StdId = 0x01;
 800539a:	2301      	movs	r3, #1
 800539c:	6033      	str	r3, [r6, #0]
		  TxData[0] = 1; 	// random value
 800539e:	7023      	strb	r3, [r4, #0]
		  TxData[1] = 2;	//random value
 80053a0:	2302      	movs	r3, #2
 80053a2:	7063      	strb	r3, [r4, #1]
		  TxData[2] = 3; 	// random value
 80053a4:	2303      	movs	r3, #3
 80053a6:	70a3      	strb	r3, [r4, #2]
		  TxData[3] = 4;	//random value
 80053a8:	2304      	movs	r3, #4
 80053aa:	70e3      	strb	r3, [r4, #3]
		  TxData[4] = 5; 	// random value
 80053ac:	2305      	movs	r3, #5
 80053ae:	7123      	strb	r3, [r4, #4]
		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 80053b0:	4a07      	ldr	r2, [pc, #28]	; (80053d0 <main+0x5f0>)
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <main+0x600>)
 80053b4:	4905      	ldr	r1, [pc, #20]	; (80053cc <main+0x5ec>)
 80053b6:	4628      	mov	r0, r5
 80053b8:	f7fb fb7d 	bl	8000ab6 <HAL_CAN_AddTxMessage>
		  HAL_Delay(10); // 100 / sec is enough
 80053bc:	200a      	movs	r0, #10
 80053be:	f7fb f8f9 	bl	80005b4 <HAL_Delay>
 80053c2:	e7c4      	b.n	800534e <main+0x56e>
 80053c4:	20000e30 	.word	0x20000e30
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	2000102c 	.word	0x2000102c
 80053d0:	20000dec 	.word	0x20000dec
 80053d4:	20001004 	.word	0x20001004
 80053d8:	20000fc0 	.word	0x20000fc0
 80053dc:	20001044 	.word	0x20001044
 80053e0:	20000eb4 	.word	0x20000eb4

080053e4 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80053e4:	e7fe      	b.n	80053e4 <_Error_Handler>
	...

080053e8 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 80053e8:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 80053ea:	4c06      	ldr	r4, [pc, #24]	; (8005404 <SD_CheckStatus.isra.0+0x1c>)
 80053ec:	2301      	movs	r3, #1
 80053ee:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80053f0:	f7ff fbce 	bl	8004b90 <BSP_SD_GetCardState>
 80053f4:	4623      	mov	r3, r4
 80053f6:	b918      	cbnz	r0, 8005400 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 80053f8:	7822      	ldrb	r2, [r4, #0]
 80053fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80053fe:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8005400:	7818      	ldrb	r0, [r3, #0]
}
 8005402:	bd10      	pop	{r4, pc}
 8005404:	20000008 	.word	0x20000008

08005408 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005408:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800540a:	4c05      	ldr	r4, [pc, #20]	; (8005420 <SD_initialize+0x18>)
 800540c:	2301      	movs	r3, #1
 800540e:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005410:	f7ff fb84 	bl	8004b1c <BSP_SD_Init>
 8005414:	b910      	cbnz	r0, 800541c <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8005416:	f7ff ffe7 	bl	80053e8 <SD_CheckStatus.isra.0>
 800541a:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800541c:	7820      	ldrb	r0, [r4, #0]
}
 800541e:	bd10      	pop	{r4, pc}
 8005420:	20000008 	.word	0x20000008

08005424 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8005424:	f7ff bfe0 	b.w	80053e8 <SD_CheckStatus.isra.0>

08005428 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005428:	b508      	push	{r3, lr}
 800542a:	4608      	mov	r0, r1
 800542c:	4611      	mov	r1, r2
 800542e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005434:	f7ff fb8c 	bl	8004b50 <BSP_SD_ReadBlocks>
 8005438:	b920      	cbnz	r0, 8005444 <SD_read+0x1c>
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800543a:	f7ff fba9 	bl	8004b90 <BSP_SD_GetCardState>
 800543e:	2800      	cmp	r0, #0
 8005440:	d1fb      	bne.n	800543a <SD_read+0x12>
 8005442:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8005444:	2001      	movs	r0, #1
}
 8005446:	bd08      	pop	{r3, pc}

08005448 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005448:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <SD_ioctl+0x4c>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	07db      	lsls	r3, r3, #31
{
 8005450:	b088      	sub	sp, #32
 8005452:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005454:	d41b      	bmi.n	800548e <SD_ioctl+0x46>

  switch (cmd)
 8005456:	2903      	cmp	r1, #3
 8005458:	d803      	bhi.n	8005462 <SD_ioctl+0x1a>
 800545a:	e8df f001 	tbb	[pc, r1]
 800545e:	0510      	.short	0x0510
 8005460:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8005462:	2004      	movs	r0, #4
  }

  return res;
}
 8005464:	b008      	add	sp, #32
 8005466:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8005468:	4668      	mov	r0, sp
 800546a:	f7ff fb9b 	bl	8004ba4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800546e:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	e004      	b.n	800547e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8005474:	4668      	mov	r0, sp
 8005476:	f7ff fb95 	bl	8004ba4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800547a:	9b07      	ldr	r3, [sp, #28]
 800547c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 800547e:	2000      	movs	r0, #0
 8005480:	e7f0      	b.n	8005464 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8005482:	4668      	mov	r0, sp
 8005484:	f7ff fb8e 	bl	8004ba4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005488:	9b07      	ldr	r3, [sp, #28]
 800548a:	0a5b      	lsrs	r3, r3, #9
 800548c:	e7f0      	b.n	8005470 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800548e:	2003      	movs	r0, #3
 8005490:	e7e8      	b.n	8005464 <SD_ioctl+0x1c>
 8005492:	bf00      	nop
 8005494:	20000008 	.word	0x20000008

08005498 <SD_write>:
{
 8005498:	b508      	push	{r3, lr}
 800549a:	4608      	mov	r0, r1
 800549c:	4611      	mov	r1, r2
 800549e:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80054a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054a4:	f7ff fb64 	bl	8004b70 <BSP_SD_WriteBlocks>
 80054a8:	b920      	cbnz	r0, 80054b4 <SD_write+0x1c>
    while(BSP_SD_GetCardState() != MSD_OK)
 80054aa:	f7ff fb71 	bl	8004b90 <BSP_SD_GetCardState>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	d1fb      	bne.n	80054aa <SD_write+0x12>
 80054b2:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 80054b4:	2001      	movs	r0, #1
}
 80054b6:	bd08      	pop	{r3, pc}

080054b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054b8:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <HAL_MspInit+0x8c>)
 80054bc:	2400      	movs	r4, #0
 80054be:	9400      	str	r4, [sp, #0]
 80054c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c6:	645a      	str	r2, [r3, #68]	; 0x44
 80054c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ca:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80054ce:	9200      	str	r2, [sp, #0]
 80054d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	9401      	str	r4, [sp, #4]
 80054d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054da:	641a      	str	r2, [r3, #64]	; 0x40
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054e4:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80054e6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054e8:	f7fb fbc4 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80054ec:	4622      	mov	r2, r4
 80054ee:	4621      	mov	r1, r4
 80054f0:	f06f 000b 	mvn.w	r0, #11
 80054f4:	f7fb fbd0 	bl	8000c98 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80054f8:	4622      	mov	r2, r4
 80054fa:	4621      	mov	r1, r4
 80054fc:	f06f 000a 	mvn.w	r0, #10
 8005500:	f7fb fbca 	bl	8000c98 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8005504:	4622      	mov	r2, r4
 8005506:	4621      	mov	r1, r4
 8005508:	f06f 0009 	mvn.w	r0, #9
 800550c:	f7fb fbc4 	bl	8000c98 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8005510:	4622      	mov	r2, r4
 8005512:	4621      	mov	r1, r4
 8005514:	f06f 0004 	mvn.w	r0, #4
 8005518:	f7fb fbbe 	bl	8000c98 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800551c:	4622      	mov	r2, r4
 800551e:	4621      	mov	r1, r4
 8005520:	f06f 0003 	mvn.w	r0, #3
 8005524:	f7fb fbb8 	bl	8000c98 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8005528:	4622      	mov	r2, r4
 800552a:	4621      	mov	r1, r4
 800552c:	f06f 0001 	mvn.w	r0, #1
 8005530:	f7fb fbb2 	bl	8000c98 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8005534:	4622      	mov	r2, r4
 8005536:	4621      	mov	r1, r4
 8005538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800553c:	f7fb fbac 	bl	8000c98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005540:	b002      	add	sp, #8
 8005542:	bd10      	pop	{r4, pc}
 8005544:	40023800 	.word	0x40023800

08005548 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005548:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800554a:	6803      	ldr	r3, [r0, #0]
 800554c:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <HAL_ADC_MspInit+0x88>)
 800554e:	4293      	cmp	r3, r2
{
 8005550:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 8005552:	d11f      	bne.n	8005594 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005554:	2400      	movs	r4, #0
 8005556:	4b1f      	ldr	r3, [pc, #124]	; (80055d4 <HAL_ADC_MspInit+0x8c>)
 8005558:	9401      	str	r4, [sp, #4]
 800555a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC4     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800555c:	481e      	ldr	r0, [pc, #120]	; (80055d8 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800555e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005562:	645a      	str	r2, [r3, #68]	; 0x44
 8005564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005566:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	9301      	str	r3, [sp, #4]
 800556e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005570:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005572:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005576:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005578:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800557a:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800557c:	f7fb fbe8 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005580:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005582:	4816      	ldr	r0, [pc, #88]	; (80055dc <HAL_ADC_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005584:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005586:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800558a:	a903      	add	r1, sp, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800558c:	f7fb fbe0 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005590:	b009      	add	sp, #36	; 0x24
 8005592:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8005594:	4a12      	ldr	r2, [pc, #72]	; (80055e0 <HAL_ADC_MspInit+0x98>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d1fa      	bne.n	8005590 <HAL_ADC_MspInit+0x48>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800559a:	2400      	movs	r4, #0
 800559c:	4b0d      	ldr	r3, [pc, #52]	; (80055d4 <HAL_ADC_MspInit+0x8c>)
 800559e:	9402      	str	r4, [sp, #8]
 80055a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055a2:	480e      	ldr	r0, [pc, #56]	; (80055dc <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80055a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ac:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ADC2_CLK_ENABLE();
 80055ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055b2:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 80055b4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055b6:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC2_CLK_ENABLE();
 80055b8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055ba:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055bc:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055be:	f7fb fbc7 	bl	8000d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80055c2:	2330      	movs	r3, #48	; 0x30
 80055c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055c6:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c8:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ca:	a903      	add	r1, sp, #12
 80055cc:	4802      	ldr	r0, [pc, #8]	; (80055d8 <HAL_ADC_MspInit+0x90>)
 80055ce:	e7dd      	b.n	800558c <HAL_ADC_MspInit+0x44>
 80055d0:	40012000 	.word	0x40012000
 80055d4:	40023800 	.word	0x40023800
 80055d8:	40020000 	.word	0x40020000
 80055dc:	40020800 	.word	0x40020800
 80055e0:	40012100 	.word	0x40012100

080055e4 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80055e4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 80055e6:	6802      	ldr	r2, [r0, #0]
 80055e8:	4b15      	ldr	r3, [pc, #84]	; (8005640 <HAL_CAN_MspInit+0x5c>)
 80055ea:	429a      	cmp	r2, r3
{
 80055ec:	b087      	sub	sp, #28
  if(hcan->Instance==CAN1)
 80055ee:	d125      	bne.n	800563c <HAL_CAN_MspInit+0x58>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80055f0:	2400      	movs	r4, #0
 80055f2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80055f6:	9400      	str	r4, [sp, #0]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055fa:	4812      	ldr	r0, [pc, #72]	; (8005644 <HAL_CAN_MspInit+0x60>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80055fc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005604:	9403      	str	r4, [sp, #12]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800560e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005614:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005616:	2509      	movs	r5, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005618:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800561a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800561e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005620:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005622:	f7fb fb95 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005626:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800562a:	a901      	add	r1, sp, #4
 800562c:	4806      	ldr	r0, [pc, #24]	; (8005648 <HAL_CAN_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800562e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005630:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005632:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005634:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005636:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005638:	f7fb fb8a 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800563c:	b007      	add	sp, #28
 800563e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005640:	40006400 	.word	0x40006400
 8005644:	40020000 	.word	0x40020000
 8005648:	40020400 	.word	0x40020400

0800564c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800564c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 800564e:	6802      	ldr	r2, [r0, #0]
 8005650:	4b16      	ldr	r3, [pc, #88]	; (80056ac <HAL_I2C_MspInit+0x60>)
 8005652:	429a      	cmp	r2, r3
{
 8005654:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C3)
 8005656:	d126      	bne.n	80056a6 <HAL_I2C_MspInit+0x5a>
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005658:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800565a:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800565e:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005660:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005662:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005664:	eb0d 0104 	add.w	r1, sp, r4
 8005668:	4811      	ldr	r0, [pc, #68]	; (80056b0 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800566a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800566c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800566e:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005670:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005672:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005674:	f7fb fb6c 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005678:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800567a:	eb0d 0104 	add.w	r1, sp, r4
 800567e:	480d      	ldr	r0, [pc, #52]	; (80056b4 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005680:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005682:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005684:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005686:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005688:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568a:	f7fb fb61 	bl	8000d50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800568e:	2300      	movs	r3, #0
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <HAL_I2C_MspInit+0x6c>)
 8005694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005696:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800569a:	641a      	str	r2, [r3, #64]	; 0x40
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80056a6:	b007      	add	sp, #28
 80056a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056aa:	bf00      	nop
 80056ac:	40005c00 	.word	0x40005c00
 80056b0:	40020000 	.word	0x40020000
 80056b4:	40020400 	.word	0x40020400
 80056b8:	40023800 	.word	0x40023800

080056bc <HAL_SD_MspInit>:
  }

}

void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80056bc:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDIO)
 80056be:	6802      	ldr	r2, [r0, #0]
 80056c0:	4b1a      	ldr	r3, [pc, #104]	; (800572c <HAL_SD_MspInit+0x70>)
 80056c2:	429a      	cmp	r2, r3
{
 80056c4:	b087      	sub	sp, #28
  if(hsd->Instance==SDIO)
 80056c6:	d12f      	bne.n	8005728 <HAL_SD_MspInit+0x6c>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80056c8:	2400      	movs	r4, #0
 80056ca:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 80056ce:	9400      	str	r4, [sp, #0]
 80056d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056d2:	4817      	ldr	r0, [pc, #92]	; (8005730 <HAL_SD_MspInit+0x74>)
    __HAL_RCC_SDIO_CLK_ENABLE();
 80056d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d8:	645a      	str	r2, [r3, #68]	; 0x44
 80056da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056dc:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SDIO_CLK_ENABLE();
 80056de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056e2:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056e4:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056e6:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80056e8:	250c      	movs	r5, #12
    __HAL_RCC_SDIO_CLK_ENABLE();
 80056ea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ec:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80056ee:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80056f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f4:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80056f6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f8:	f7fb fb2a 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80056fc:	f44f 6310 	mov.w	r3, #2304	; 0x900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005700:	a901      	add	r1, sp, #4
 8005702:	480c      	ldr	r0, [pc, #48]	; (8005734 <HAL_SD_MspInit+0x78>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8005704:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005706:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005708:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800570a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800570c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800570e:	f7fb fb1f 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005712:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005714:	eb0d 0103 	add.w	r1, sp, r3
 8005718:	4807      	ldr	r0, [pc, #28]	; (8005738 <HAL_SD_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800571a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005720:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005722:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005724:	f7fb fb14 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005728:	b007      	add	sp, #28
 800572a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40020400 	.word	0x40020400
 8005734:	40020800 	.word	0x40020800
 8005738:	40020c00 	.word	0x40020c00

0800573c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800573c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 800573e:	6802      	ldr	r2, [r0, #0]
 8005740:	4b15      	ldr	r3, [pc, #84]	; (8005798 <HAL_SPI_MspInit+0x5c>)
 8005742:	429a      	cmp	r2, r3
{
 8005744:	b087      	sub	sp, #28
  if(hspi->Instance==SPI2)
 8005746:	d124      	bne.n	8005792 <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005748:	2400      	movs	r4, #0
 800574a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800574e:	9400      	str	r4, [sp, #0]
 8005750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005752:	4812      	ldr	r0, [pc, #72]	; (800579c <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575c:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI2_CLK_ENABLE();
 800575e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005766:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005768:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800576a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800576c:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800576e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005770:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005772:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005774:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005776:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005778:	f7fb faea 	bl	8000d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800577c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005780:	a901      	add	r1, sp, #4
 8005782:	4807      	ldr	r0, [pc, #28]	; (80057a0 <HAL_SPI_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005784:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005786:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005788:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800578a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800578c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800578e:	f7fb fadf 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005792:	b007      	add	sp, #28
 8005794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005796:	bf00      	nop
 8005798:	40003800 	.word	0x40003800
 800579c:	40020800 	.word	0x40020800
 80057a0:	40020400 	.word	0x40020400

080057a4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80057a4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 80057a6:	6803      	ldr	r3, [r0, #0]
 80057a8:	4a3b      	ldr	r2, [pc, #236]	; (8005898 <HAL_TIM_Base_MspInit+0xf4>)
 80057aa:	4293      	cmp	r3, r2
{
 80057ac:	b08b      	sub	sp, #44	; 0x2c
  if(htim_base->Instance==TIM1)
 80057ae:	d10d      	bne.n	80057cc <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80057b0:	2300      	movs	r3, #0
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	4b39      	ldr	r3, [pc, #228]	; (800589c <HAL_TIM_Base_MspInit+0xf8>)
 80057b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b8:	f042 0201 	orr.w	r2, r2, #1
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
 80057be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80057c8:	b00b      	add	sp, #44	; 0x2c
 80057ca:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM2)
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057d0:	d10c      	bne.n	80057ec <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80057d2:	2300      	movs	r3, #0
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	4b31      	ldr	r3, [pc, #196]	; (800589c <HAL_TIM_Base_MspInit+0xf8>)
 80057d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057da:	f042 0201 	orr.w	r2, r2, #1
 80057de:	641a      	str	r2, [r3, #64]	; 0x40
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	9b01      	ldr	r3, [sp, #4]
 80057ea:	e7ed      	b.n	80057c8 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM3)
 80057ec:	4a2c      	ldr	r2, [pc, #176]	; (80058a0 <HAL_TIM_Base_MspInit+0xfc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d121      	bne.n	8005836 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057f2:	2400      	movs	r4, #0
 80057f4:	4b29      	ldr	r3, [pc, #164]	; (800589c <HAL_TIM_Base_MspInit+0xf8>)
 80057f6:	9402      	str	r4, [sp, #8]
 80057f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057fa:	482a      	ldr	r0, [pc, #168]	; (80058a4 <HAL_TIM_Base_MspInit+0x100>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057fc:	f042 0202 	orr.w	r2, r2, #2
 8005800:	641a      	str	r2, [r3, #64]	; 0x40
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005804:	9407      	str	r4, [sp, #28]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800580c:	2502      	movs	r5, #2
    __HAL_RCC_TIM3_CLK_ENABLE();
 800580e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005812:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005814:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005816:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005818:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800581a:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800581c:	f7fb fa98 	bl	8000d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005820:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005822:	a905      	add	r1, sp, #20
 8005824:	4820      	ldr	r0, [pc, #128]	; (80058a8 <HAL_TIM_Base_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005826:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005828:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800582a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800582c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800582e:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005830:	f7fb fa8e 	bl	8000d50 <HAL_GPIO_Init>
 8005834:	e7c8      	b.n	80057c8 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM4)
 8005836:	4a1d      	ldr	r2, [pc, #116]	; (80058ac <HAL_TIM_Base_MspInit+0x108>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d10c      	bne.n	8005856 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800583c:	2300      	movs	r3, #0
 800583e:	9303      	str	r3, [sp, #12]
 8005840:	4b16      	ldr	r3, [pc, #88]	; (800589c <HAL_TIM_Base_MspInit+0xf8>)
 8005842:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005844:	f042 0204 	orr.w	r2, r2, #4
 8005848:	641a      	str	r2, [r3, #64]	; 0x40
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	9303      	str	r3, [sp, #12]
 8005852:	9b03      	ldr	r3, [sp, #12]
 8005854:	e7b8      	b.n	80057c8 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM5)
 8005856:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <HAL_TIM_Base_MspInit+0x10c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d10c      	bne.n	8005876 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800585c:	2300      	movs	r3, #0
 800585e:	9304      	str	r3, [sp, #16]
 8005860:	4b0e      	ldr	r3, [pc, #56]	; (800589c <HAL_TIM_Base_MspInit+0xf8>)
 8005862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005864:	f042 0208 	orr.w	r2, r2, #8
 8005868:	641a      	str	r2, [r3, #64]	; 0x40
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f003 0308 	and.w	r3, r3, #8
 8005870:	9304      	str	r3, [sp, #16]
 8005872:	9b04      	ldr	r3, [sp, #16]
 8005874:	e7a8      	b.n	80057c8 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM8)
 8005876:	4a0f      	ldr	r2, [pc, #60]	; (80058b4 <HAL_TIM_Base_MspInit+0x110>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d1a5      	bne.n	80057c8 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800587c:	2300      	movs	r3, #0
 800587e:	9305      	str	r3, [sp, #20]
 8005880:	4b06      	ldr	r3, [pc, #24]	; (800589c <HAL_TIM_Base_MspInit+0xf8>)
 8005882:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005884:	f042 0202 	orr.w	r2, r2, #2
 8005888:	645a      	str	r2, [r3, #68]	; 0x44
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	9305      	str	r3, [sp, #20]
 8005892:	9b05      	ldr	r3, [sp, #20]
}
 8005894:	e798      	b.n	80057c8 <HAL_TIM_Base_MspInit+0x24>
 8005896:	bf00      	nop
 8005898:	40010000 	.word	0x40010000
 800589c:	40023800 	.word	0x40023800
 80058a0:	40000400 	.word	0x40000400
 80058a4:	40020000 	.word	0x40020000
 80058a8:	40020400 	.word	0x40020400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40010400 	.word	0x40010400

080058b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80058b8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80058ba:	6803      	ldr	r3, [r0, #0]
 80058bc:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <HAL_TIM_MspPostInit+0xb8>)
 80058be:	4293      	cmp	r3, r2
{
 80058c0:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 80058c2:	d10f      	bne.n	80058e4 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80058c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80058c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ca:	2302      	movs	r3, #2
 80058cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ce:	2300      	movs	r3, #0
 80058d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058d2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80058d4:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058d6:	4827      	ldr	r0, [pc, #156]	; (8005974 <HAL_TIM_MspPostInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80058d8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058da:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058dc:	f7fb fa38 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80058e0:	b006      	add	sp, #24
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM2)
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d115      	bne.n	8005916 <HAL_TIM_MspPostInit+0x5e>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80058ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058ee:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058f0:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80058f2:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f4:	a901      	add	r1, sp, #4
 80058f6:	481f      	ldr	r0, [pc, #124]	; (8005974 <HAL_TIM_MspPostInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80058f8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058fa:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058fe:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005900:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005902:	f7fb fa25 	bl	8000d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005906:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800590a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800590c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800590e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005910:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005912:	9505      	str	r5, [sp, #20]
 8005914:	e00a      	b.n	800592c <HAL_TIM_MspPostInit+0x74>
  else if(htim->Instance==TIM4)
 8005916:	4a18      	ldr	r2, [pc, #96]	; (8005978 <HAL_TIM_MspPostInit+0xc0>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10a      	bne.n	8005932 <HAL_TIM_MspPostInit+0x7a>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800591c:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591e:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005920:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005922:	2302      	movs	r3, #2
 8005924:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005926:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005928:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800592a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800592c:	a901      	add	r1, sp, #4
 800592e:	4813      	ldr	r0, [pc, #76]	; (800597c <HAL_TIM_MspPostInit+0xc4>)
 8005930:	e7d4      	b.n	80058dc <HAL_TIM_MspPostInit+0x24>
  else if(htim->Instance==TIM5)
 8005932:	4a13      	ldr	r2, [pc, #76]	; (8005980 <HAL_TIM_MspPostInit+0xc8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d107      	bne.n	8005948 <HAL_TIM_MspPostInit+0x90>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005938:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593a:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800593c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800593e:	2302      	movs	r3, #2
 8005940:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005942:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005944:	9204      	str	r2, [sp, #16]
 8005946:	e7c6      	b.n	80058d6 <HAL_TIM_MspPostInit+0x1e>
  else if(htim->Instance==TIM8)
 8005948:	4a0e      	ldr	r2, [pc, #56]	; (8005984 <HAL_TIM_MspPostInit+0xcc>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d1c8      	bne.n	80058e0 <HAL_TIM_MspPostInit+0x28>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800594e:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005950:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005952:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005954:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005956:	a901      	add	r1, sp, #4
 8005958:	4806      	ldr	r0, [pc, #24]	; (8005974 <HAL_TIM_MspPostInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800595a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595c:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005960:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005962:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005964:	f7fb f9f4 	bl	8000d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005968:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800596c:	e7cd      	b.n	800590a <HAL_TIM_MspPostInit+0x52>
 800596e:	bf00      	nop
 8005970:	40010000 	.word	0x40010000
 8005974:	40020000 	.word	0x40020000
 8005978:	40000800 	.word	0x40000800
 800597c:	40020400 	.word	0x40020400
 8005980:	40000c00 	.word	0x40000c00
 8005984:	40010400 	.word	0x40010400

08005988 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005988:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800598a:	6803      	ldr	r3, [r0, #0]
 800598c:	4a31      	ldr	r2, [pc, #196]	; (8005a54 <HAL_UART_MspInit+0xcc>)
 800598e:	4293      	cmp	r3, r2
{
 8005990:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART1)
 8005992:	d11c      	bne.n	80059ce <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005994:	2300      	movs	r3, #0
 8005996:	9300      	str	r3, [sp, #0]
 8005998:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800599a:	4830      	ldr	r0, [pc, #192]	; (8005a5c <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800599c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800599e:	f042 0210 	orr.w	r2, r2, #16
 80059a2:	645a      	str	r2, [r3, #68]	; 0x44
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	f003 0310 	and.w	r3, r3, #16
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80059ae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80059b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059b4:	2302      	movs	r3, #2
 80059b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059b8:	2301      	movs	r3, #1
 80059ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059bc:	2303      	movs	r3, #3
 80059be:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80059c0:	2307      	movs	r3, #7
 80059c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059c6:	f7fb f9c3 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80059ca:	b009      	add	sp, #36	; 0x24
 80059cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART3)
 80059ce:	4a24      	ldr	r2, [pc, #144]	; (8005a60 <HAL_UART_MspInit+0xd8>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d123      	bne.n	8005a1c <HAL_UART_MspInit+0x94>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059d4:	2300      	movs	r3, #0
 80059d6:	9301      	str	r3, [sp, #4]
 80059d8:	4b1f      	ldr	r3, [pc, #124]	; (8005a58 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059da:	4822      	ldr	r0, [pc, #136]	; (8005a64 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80059dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059de:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80059e2:	641a      	str	r2, [r3, #64]	; 0x40
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ea:	9301      	str	r3, [sp, #4]
 80059ec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ee:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80059f0:	2320      	movs	r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059f2:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059f4:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80059f6:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059f8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80059fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059fc:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059fe:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a00:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a02:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a04:	f7fb f9a4 	bl	8000d50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a0c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a0e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a10:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a12:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005a14:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a16:	a903      	add	r1, sp, #12
 8005a18:	4813      	ldr	r0, [pc, #76]	; (8005a68 <HAL_UART_MspInit+0xe0>)
 8005a1a:	e7d4      	b.n	80059c6 <HAL_UART_MspInit+0x3e>
  else if(huart->Instance==USART6)
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <HAL_UART_MspInit+0xe4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d1d3      	bne.n	80059ca <HAL_UART_MspInit+0x42>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005a22:	2300      	movs	r3, #0
 8005a24:	9302      	str	r3, [sp, #8]
 8005a26:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a28:	480e      	ldr	r0, [pc, #56]	; (8005a64 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8005a2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a2c:	f042 0220 	orr.w	r2, r2, #32
 8005a30:	645a      	str	r2, [r3, #68]	; 0x44
 8005a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	9302      	str	r3, [sp, #8]
 8005a3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a3c:	23c0      	movs	r3, #192	; 0xc0
 8005a3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a40:	2302      	movs	r3, #2
 8005a42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a44:	2301      	movs	r3, #1
 8005a46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005a4c:	2308      	movs	r3, #8
 8005a4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a50:	a903      	add	r1, sp, #12
 8005a52:	e7b8      	b.n	80059c6 <HAL_UART_MspInit+0x3e>
 8005a54:	40011000 	.word	0x40011000
 8005a58:	40023800 	.word	0x40023800
 8005a5c:	40020000 	.word	0x40020000
 8005a60:	40004800 	.word	0x40004800
 8005a64:	40020800 	.word	0x40020800
 8005a68:	40020400 	.word	0x40020400
 8005a6c:	40011400 	.word	0x40011400

08005a70 <NMI_Handler>:
 8005a70:	4770      	bx	lr

08005a72 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8005a72:	e7fe      	b.n	8005a72 <HardFault_Handler>

08005a74 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8005a74:	e7fe      	b.n	8005a74 <MemManage_Handler>

08005a76 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8005a76:	e7fe      	b.n	8005a76 <BusFault_Handler>

08005a78 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8005a78:	e7fe      	b.n	8005a78 <UsageFault_Handler>

08005a7a <SVC_Handler>:
 8005a7a:	4770      	bx	lr

08005a7c <DebugMon_Handler>:
 8005a7c:	4770      	bx	lr

08005a7e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8005a7e:	4770      	bx	lr

08005a80 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8005a80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005a82:	f7fa fd85 	bl	8000590 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8005a8a:	f7fb b95c 	b.w	8000d46 <HAL_SYSTICK_IRQHandler>
	...

08005a90 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a90:	490f      	ldr	r1, [pc, #60]	; (8005ad0 <SystemInit+0x40>)
 8005a92:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005a96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005a9e:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <SystemInit+0x44>)
 8005aa0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005aa2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005aa4:	f042 0201 	orr.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005aaa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005ab2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ab6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005ab8:	4a07      	ldr	r2, [pc, #28]	; (8005ad8 <SystemInit+0x48>)
 8005aba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005ac4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005ac6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aca:	608b      	str	r3, [r1, #8]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000ed00 	.word	0xe000ed00
 8005ad4:	40023800 	.word	0x40023800
 8005ad8:	24003010 	.word	0x24003010

08005adc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ae0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ae2:	e003      	b.n	8005aec <LoopCopyDataInit>

08005ae4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ae4:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005ae6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ae8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005aea:	3104      	adds	r1, #4

08005aec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005aec:	480b      	ldr	r0, [pc, #44]	; (8005b1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005aee:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005af0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005af2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005af4:	d3f6      	bcc.n	8005ae4 <CopyDataInit>
  ldr  r2, =_sbss
 8005af6:	4a0b      	ldr	r2, [pc, #44]	; (8005b24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005af8:	e002      	b.n	8005b00 <LoopFillZerobss>

08005afa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005afa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005afc:	f842 3b04 	str.w	r3, [r2], #4

08005b00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005b00:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005b02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005b04:	d3f9      	bcc.n	8005afa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005b06:	f7ff ffc3 	bl	8005a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b0a:	f000 f811 	bl	8005b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b0e:	f7ff f967 	bl	8004de0 <main>
  bx  lr    
 8005b12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b14:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005b18:	08005ce8 	.word	0x08005ce8
  ldr  r0, =_sdata
 8005b1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b20:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8005b24:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8005b28:	20001060 	.word	0x20001060

08005b2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b2c:	e7fe      	b.n	8005b2c <ADC_IRQHandler>
	...

08005b30 <__libc_init_array>:
 8005b30:	b570      	push	{r4, r5, r6, lr}
 8005b32:	4e0d      	ldr	r6, [pc, #52]	; (8005b68 <__libc_init_array+0x38>)
 8005b34:	4c0d      	ldr	r4, [pc, #52]	; (8005b6c <__libc_init_array+0x3c>)
 8005b36:	1ba4      	subs	r4, r4, r6
 8005b38:	10a4      	asrs	r4, r4, #2
 8005b3a:	2500      	movs	r5, #0
 8005b3c:	42a5      	cmp	r5, r4
 8005b3e:	d109      	bne.n	8005b54 <__libc_init_array+0x24>
 8005b40:	4e0b      	ldr	r6, [pc, #44]	; (8005b70 <__libc_init_array+0x40>)
 8005b42:	4c0c      	ldr	r4, [pc, #48]	; (8005b74 <__libc_init_array+0x44>)
 8005b44:	f000 f818 	bl	8005b78 <_init>
 8005b48:	1ba4      	subs	r4, r4, r6
 8005b4a:	10a4      	asrs	r4, r4, #2
 8005b4c:	2500      	movs	r5, #0
 8005b4e:	42a5      	cmp	r5, r4
 8005b50:	d105      	bne.n	8005b5e <__libc_init_array+0x2e>
 8005b52:	bd70      	pop	{r4, r5, r6, pc}
 8005b54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b58:	4798      	blx	r3
 8005b5a:	3501      	adds	r5, #1
 8005b5c:	e7ee      	b.n	8005b3c <__libc_init_array+0xc>
 8005b5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005b62:	4798      	blx	r3
 8005b64:	3501      	adds	r5, #1
 8005b66:	e7f2      	b.n	8005b4e <__libc_init_array+0x1e>
 8005b68:	08005ce0 	.word	0x08005ce0
 8005b6c:	08005ce0 	.word	0x08005ce0
 8005b70:	08005ce0 	.word	0x08005ce0
 8005b74:	08005ce4 	.word	0x08005ce4

08005b78 <_init>:
 8005b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7a:	bf00      	nop
 8005b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7e:	bc08      	pop	{r3}
 8005b80:	469e      	mov	lr, r3
 8005b82:	4770      	bx	lr

08005b84 <_fini>:
 8005b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b86:	bf00      	nop
 8005b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8a:	bc08      	pop	{r3}
 8005b8c:	469e      	mov	lr, r3
 8005b8e:	4770      	bx	lr
