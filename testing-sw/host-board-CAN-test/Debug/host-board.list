
host-board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d68  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002f2c  08002f2c  00012f2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f44  08002f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004bc  2000000c  08002f60  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200004c8  08002f60  000204c8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d2cb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003192  00000000  00000000  0003d307  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b9ab  00000000  00000000  00040499  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000d78  00000000  00000000  0004be48  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001340  00000000  00000000  0004cbc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000081b9  00000000  00000000  0004df00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000579f  00000000  00000000  000560b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005b858  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ba4  00000000  00000000  0005b8d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002f14 	.word	0x08002f14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002f14 	.word	0x08002f14

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000516:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <HAL_InitTick+0x3c>)
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_InitTick+0x40>)
{
 800051a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051c:	7818      	ldrb	r0, [r3, #0]
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f0 	udiv	r3, r3, r0
 8000526:	6810      	ldr	r0, [r2, #0]
 8000528:	fbb0 f0f3 	udiv	r0, r0, r3
 800052c:	f000 fd00 	bl	8000f30 <HAL_SYSTICK_Config>
 8000530:	4604      	mov	r4, r0
 8000532:	b958      	cbnz	r0, 800054c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000534:	2d0f      	cmp	r5, #15
 8000536:	d809      	bhi.n	800054c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000538:	4602      	mov	r2, r0
 800053a:	4629      	mov	r1, r5
 800053c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000540:	f000 fcb6 	bl	8000eb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_InitTick+0x44>)
 8000546:	4620      	mov	r0, r4
 8000548:	601d      	str	r5, [r3, #0]
 800054a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800054c:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800054e:	bd38      	pop	{r3, r4, r5, pc}
 8000550:	20000008 	.word	0x20000008
 8000554:	20000000 	.word	0x20000000
 8000558:	20000004 	.word	0x20000004

0800055c <HAL_Init>:
{
 800055c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800055e:	4b0b      	ldr	r3, [pc, #44]	; (800058c <HAL_Init+0x30>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000566:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800056e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000576:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000578:	2003      	movs	r0, #3
 800057a:	f000 fc87 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff ffc8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000584:	f002 f98e 	bl	80028a4 <HAL_MspInit>
}
 8000588:	2000      	movs	r0, #0
 800058a:	bd08      	pop	{r3, pc}
 800058c:	40023c00 	.word	0x40023c00

08000590 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x10>)
 8000592:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <HAL_IncTick+0x14>)
 8000594:	6811      	ldr	r1, [r2, #0]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	440b      	add	r3, r1
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000028 	.word	0x20000028
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005a8:	4b01      	ldr	r3, [pc, #4]	; (80005b0 <HAL_GetTick+0x8>)
 80005aa:	6818      	ldr	r0, [r3, #0]
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005b8:	f7ff fff6 	bl	80005a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005bc:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005be:	bf1c      	itt	ne
 80005c0:	4b05      	ldrne	r3, [pc, #20]	; (80005d8 <HAL_Delay+0x24>)
 80005c2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005c4:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005c6:	bf18      	it	ne
 80005c8:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ca:	f7ff ffed 	bl	80005a8 <HAL_GetTick>
 80005ce:	1b40      	subs	r0, r0, r5
 80005d0:	4284      	cmp	r4, r0
 80005d2:	d8fa      	bhi.n	80005ca <HAL_Delay+0x16>
  {
  }
}
 80005d4:	bd38      	pop	{r3, r4, r5, pc}
 80005d6:	bf00      	nop
 80005d8:	20000000 	.word	0x20000000

080005dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005dc:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005de:	4604      	mov	r4, r0
 80005e0:	2800      	cmp	r0, #0
 80005e2:	f000 8099 	beq.w	8000718 <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80005e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80005e8:	b923      	cbnz	r3, 80005f4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80005ea:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80005ec:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80005f0:	f002 f9a0 	bl	8002934 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005f6:	06db      	lsls	r3, r3, #27
 80005f8:	f100 808c 	bmi.w	8000714 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000602:	f023 0302 	bic.w	r3, r3, #2
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800060c:	4b43      	ldr	r3, [pc, #268]	; (800071c <HAL_ADC_Init+0x140>)
 800060e:	685a      	ldr	r2, [r3, #4]
 8000610:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000614:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000616:	685a      	ldr	r2, [r3, #4]
 8000618:	6861      	ldr	r1, [r4, #4]
 800061a:	430a      	orrs	r2, r1
 800061c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800061e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000620:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000630:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000632:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000634:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000636:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800063a:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800063c:	685a      	ldr	r2, [r3, #4]
 800063e:	430a      	orrs	r2, r1
 8000640:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000642:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000644:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800064a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	430a      	orrs	r2, r1
 8000650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000652:	4933      	ldr	r1, [pc, #204]	; (8000720 <HAL_ADC_Init+0x144>)
 8000654:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000656:	428a      	cmp	r2, r1
 8000658:	d050      	beq.n	80006fc <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800065a:	6899      	ldr	r1, [r3, #8]
 800065c:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000660:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000662:	6899      	ldr	r1, [r3, #8]
 8000664:	430a      	orrs	r2, r1
 8000666:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000668:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800066a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800066c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000676:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000678:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800067a:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800067c:	f022 0202 	bic.w	r2, r2, #2
 8000680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000682:	689a      	ldr	r2, [r3, #8]
 8000684:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000688:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800068a:	6a22      	ldr	r2, [r4, #32]
 800068c:	2a00      	cmp	r2, #0
 800068e:	d03d      	beq.n	800070c <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000690:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000692:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000698:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80006a0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80006a2:	685a      	ldr	r2, [r3, #4]
 80006a4:	3901      	subs	r1, #1
 80006a6:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006ae:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80006b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80006b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80006b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006b8:	3901      	subs	r1, #1
 80006ba:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80006be:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006c0:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80006c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80006d0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006d2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006d4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80006d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80006da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006dc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006de:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80006e0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80006e4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80006e6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80006e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006ea:	f023 0303 	bic.w	r3, r3, #3
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006f4:	2300      	movs	r3, #0
 80006f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006fa:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006fc:	689a      	ldr	r2, [r3, #8]
 80006fe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000702:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000704:	689a      	ldr	r2, [r3, #8]
 8000706:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800070a:	e7b4      	b.n	8000676 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000712:	e7ca      	b.n	80006aa <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000714:	2001      	movs	r0, #1
 8000716:	e7ed      	b.n	80006f4 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 8000718:	2001      	movs	r0, #1
}
 800071a:	bd10      	pop	{r4, pc}
 800071c:	40012300 	.word	0x40012300
 8000720:	0f000001 	.word	0x0f000001

08000724 <HAL_ADC_ConfigChannel>:
{
 8000724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8000726:	2300      	movs	r3, #0
 8000728:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800072a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800072e:	2b01      	cmp	r3, #1
 8000730:	d06a      	beq.n	8000808 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000732:	680d      	ldr	r5, [r1, #0]
 8000734:	6804      	ldr	r4, [r0, #0]
 8000736:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000738:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800073a:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800073c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000740:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000742:	d92a      	bls.n	800079a <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000744:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000748:	68e7      	ldr	r7, [r4, #12]
 800074a:	3b1e      	subs	r3, #30
 800074c:	f04f 0e07 	mov.w	lr, #7
 8000750:	fa0e fe03 	lsl.w	lr, lr, r3
 8000754:	ea27 070e 	bic.w	r7, r7, lr
 8000758:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800075a:	68e7      	ldr	r7, [r4, #12]
 800075c:	fa02 f303 	lsl.w	r3, r2, r3
 8000760:	433b      	orrs	r3, r7
 8000762:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 8000764:	684a      	ldr	r2, [r1, #4]
 8000766:	2a06      	cmp	r2, #6
 8000768:	ea4f 0382 	mov.w	r3, r2, lsl #2
 800076c:	d825      	bhi.n	80007ba <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800076e:	4413      	add	r3, r2
 8000770:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000772:	1f59      	subs	r1, r3, #5
 8000774:	231f      	movs	r3, #31
 8000776:	408b      	lsls	r3, r1
 8000778:	ea27 0303 	bic.w	r3, r7, r3
 800077c:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800077e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000780:	fa06 f101 	lsl.w	r1, r6, r1
 8000784:	4311      	orrs	r1, r2
 8000786:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000788:	4b2d      	ldr	r3, [pc, #180]	; (8000840 <HAL_ADC_ConfigChannel+0x11c>)
 800078a:	429c      	cmp	r4, r3
 800078c:	d034      	beq.n	80007f8 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 800078e:	2300      	movs	r3, #0
 8000790:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000794:	4618      	mov	r0, r3
}
 8000796:	b003      	add	sp, #12
 8000798:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800079a:	6927      	ldr	r7, [r4, #16]
 800079c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80007a0:	f04f 0e07 	mov.w	lr, #7
 80007a4:	fa0e fe03 	lsl.w	lr, lr, r3
 80007a8:	ea27 070e 	bic.w	r7, r7, lr
 80007ac:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80007ae:	6927      	ldr	r7, [r4, #16]
 80007b0:	fa02 f303 	lsl.w	r3, r2, r3
 80007b4:	433b      	orrs	r3, r7
 80007b6:	6123      	str	r3, [r4, #16]
 80007b8:	e7d4      	b.n	8000764 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80007ba:	2a0c      	cmp	r2, #12
 80007bc:	d80e      	bhi.n	80007dc <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007be:	4413      	add	r3, r2
 80007c0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80007c2:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80007c6:	231f      	movs	r3, #31
 80007c8:	4093      	lsls	r3, r2
 80007ca:	ea21 0303 	bic.w	r3, r1, r3
 80007ce:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80007d2:	fa06 f202 	lsl.w	r2, r6, r2
 80007d6:	431a      	orrs	r2, r3
 80007d8:	6322      	str	r2, [r4, #48]	; 0x30
 80007da:	e7d5      	b.n	8000788 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007dc:	4413      	add	r3, r2
 80007de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80007e0:	3b41      	subs	r3, #65	; 0x41
 80007e2:	221f      	movs	r2, #31
 80007e4:	409a      	lsls	r2, r3
 80007e6:	ea21 0202 	bic.w	r2, r1, r2
 80007ea:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80007ee:	fa06 f103 	lsl.w	r1, r6, r3
 80007f2:	4311      	orrs	r1, r2
 80007f4:	62e1      	str	r1, [r4, #44]	; 0x2c
 80007f6:	e7c7      	b.n	8000788 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80007f8:	2d12      	cmp	r5, #18
 80007fa:	d107      	bne.n	800080c <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80007fc:	4a11      	ldr	r2, [pc, #68]	; (8000844 <HAL_ADC_ConfigChannel+0x120>)
 80007fe:	6853      	ldr	r3, [r2, #4]
 8000800:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000804:	6053      	str	r3, [r2, #4]
 8000806:	e7c2      	b.n	800078e <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000808:	2002      	movs	r0, #2
 800080a:	e7c4      	b.n	8000796 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_ADC_ConfigChannel+0x124>)
 800080e:	429d      	cmp	r5, r3
 8000810:	d001      	beq.n	8000816 <HAL_ADC_ConfigChannel+0xf2>
 8000812:	2d11      	cmp	r5, #17
 8000814:	d1bb      	bne.n	800078e <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000816:	490b      	ldr	r1, [pc, #44]	; (8000844 <HAL_ADC_ConfigChannel+0x120>)
 8000818:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800081a:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800081c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000820:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000822:	d1b4      	bne.n	800078e <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_ADC_ConfigChannel+0x128>)
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_ADC_ConfigChannel+0x12c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	fbb3 f2f2 	udiv	r2, r3, r2
 800082e:	230a      	movs	r3, #10
 8000830:	4353      	muls	r3, r2
        counter--;
 8000832:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000834:	9b01      	ldr	r3, [sp, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d0a9      	beq.n	800078e <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 800083a:	9b01      	ldr	r3, [sp, #4]
 800083c:	3b01      	subs	r3, #1
 800083e:	e7f8      	b.n	8000832 <HAL_ADC_ConfigChannel+0x10e>
 8000840:	40012000 	.word	0x40012000
 8000844:	40012300 	.word	0x40012300
 8000848:	10000012 	.word	0x10000012
 800084c:	20000008 	.word	0x20000008
 8000850:	000f4240 	.word	0x000f4240

08000854 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000854:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Check CAN handle */
  if (hcan == NULL)
 8000856:	4604      	mov	r4, r0
 8000858:	2800      	cmp	r0, #0
 800085a:	d06e      	beq.n	800093a <HAL_CAN_Init+0xe6>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

  if (hcan->State == HAL_CAN_STATE_RESET)
 800085c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000860:	b90b      	cbnz	r3, 8000866 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000862:	f002 f8b5 	bl	80029d0 <HAL_CAN_MspInit>
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000866:	6822      	ldr	r2, [r4, #0]
 8000868:	6813      	ldr	r3, [r2, #0]
 800086a:	f023 0302 	bic.w	r3, r3, #2
 800086e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000870:	f7ff fe9a 	bl	80005a8 <HAL_GetTick>
 8000874:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != RESET)
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	685a      	ldr	r2, [r3, #4]
 800087a:	0791      	lsls	r1, r2, #30
 800087c:	d451      	bmi.n	8000922 <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f042 0201 	orr.w	r2, r2, #1
 8000884:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000886:	f7ff fe8f 	bl	80005a8 <HAL_GetTick>
 800088a:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == RESET)
 800088c:	6823      	ldr	r3, [r4, #0]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	07d2      	lsls	r2, r2, #31
 8000892:	d554      	bpl.n	800093e <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000894:	7e22      	ldrb	r2, [r4, #24]
 8000896:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	bf0c      	ite	eq
 800089c:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008a0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80008a6:	7e62      	ldrb	r2, [r4, #25]
 80008a8:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	bf0c      	ite	eq
 80008ae:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80008b2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80008b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008b8:	7ea2      	ldrb	r2, [r4, #26]
 80008ba:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	bf0c      	ite	eq
 80008c0:	f042 0220 	orreq.w	r2, r2, #32
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c4:	f022 0220 	bicne.w	r2, r2, #32
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008ca:	7ee2      	ldrb	r2, [r4, #27]
 80008cc:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	bf0c      	ite	eq
 80008d2:	f022 0210 	biceq.w	r2, r2, #16
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d6:	f042 0210 	orrne.w	r2, r2, #16
 80008da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008dc:	7f22      	ldrb	r2, [r4, #28]
 80008de:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	bf0c      	ite	eq
 80008e4:	f042 0208 	orreq.w	r2, r2, #8
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80008e8:	f022 0208 	bicne.w	r2, r2, #8
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80008ee:	7f62      	ldrb	r2, [r4, #29]
 80008f0:	2a01      	cmp	r2, #1
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	bf0c      	ite	eq
 80008f6:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80008fa:	f022 0204 	bicne.w	r2, r2, #4
 80008fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000900:	68e1      	ldr	r1, [r4, #12]
 8000902:	68a2      	ldr	r2, [r4, #8]
 8000904:	430a      	orrs	r2, r1
 8000906:	6921      	ldr	r1, [r4, #16]
 8000908:	430a      	orrs	r2, r1
 800090a:	6961      	ldr	r1, [r4, #20]
 800090c:	430a      	orrs	r2, r1
 800090e:	6861      	ldr	r1, [r4, #4]
 8000910:	3901      	subs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000916:	2000      	movs	r0, #0

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000918:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800091a:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 800091c:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
 8000920:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000922:	f7ff fe41 	bl	80005a8 <HAL_GetTick>
 8000926:	1b40      	subs	r0, r0, r5
 8000928:	280a      	cmp	r0, #10
 800092a:	d9a4      	bls.n	8000876 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800092c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800092e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000932:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000934:	2305      	movs	r3, #5
 8000936:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 800093a:	2001      	movs	r0, #1
}
 800093c:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800093e:	f7ff fe33 	bl	80005a8 <HAL_GetTick>
 8000942:	1b40      	subs	r0, r0, r5
 8000944:	280a      	cmp	r0, #10
 8000946:	d9a1      	bls.n	800088c <HAL_CAN_Init+0x38>
 8000948:	e7f0      	b.n	800092c <HAL_CAN_Init+0xd8>
	...

0800094c <HAL_CAN_ConfigFilter>:
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
  uint32_t filternbrbitpos = 0U;
  CAN_TypeDef *can_ip = hcan->Instance;

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800094c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000950:	2b01      	cmp	r3, #1
{
 8000952:	b530      	push	{r4, r5, lr}
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000954:	d003      	beq.n	800095e <HAL_CAN_ConfigFilter+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000956:	f890 3020 	ldrb.w	r3, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 800095a:	2b02      	cmp	r3, #2
 800095c:	d177      	bne.n	8000a4e <HAL_CAN_ConfigFilter+0x102>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800095e:	4b3f      	ldr	r3, [pc, #252]	; (8000a5c <HAL_CAN_ConfigFilter+0x110>)
 8000960:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000964:	f042 0201 	orr.w	r2, r2, #1
 8000968:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800096c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000970:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8000974:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000978:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800097c:	6a48      	ldr	r0, [r1, #36]	; 0x24
 800097e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8000982:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 8000986:	6948      	ldr	r0, [r1, #20]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000988:	f8d3 521c 	ldr.w	r5, [r3, #540]	; 0x21c
    filternbrbitpos = (1U) << sFilterConfig->FilterBank;
 800098c:	2401      	movs	r4, #1
 800098e:	4084      	lsls	r4, r0
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000990:	43e2      	mvns	r2, r4
 8000992:	4015      	ands	r5, r2
 8000994:	f8c3 521c 	str.w	r5, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000998:	69cd      	ldr	r5, [r1, #28]
 800099a:	2d00      	cmp	r5, #0
 800099c:	d136      	bne.n	8000a0c <HAL_CAN_ConfigFilter+0xc0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800099e:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 80009a2:	4015      	ands	r5, r2
 80009a4:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
 80009a8:	00c0      	lsls	r0, r0, #3

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009aa:	68cd      	ldr	r5, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80009ac:	888b      	ldrh	r3, [r1, #4]
 80009ae:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80009b2:	f500 40c8 	add.w	r0, r0, #25600	; 0x6400
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80009b6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80009ba:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009be:	688d      	ldr	r5, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80009c0:	880b      	ldrh	r3, [r1, #0]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80009c2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80009c6:	f8c0 3244 	str.w	r3, [r0, #580]	; 0x244
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80009ca:	6988      	ldr	r0, [r1, #24]
 80009cc:	4b23      	ldr	r3, [pc, #140]	; (8000a5c <HAL_CAN_ConfigFilter+0x110>)
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d135      	bne.n	8000a3e <HAL_CAN_ConfigFilter+0xf2>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80009d2:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 80009d6:	4010      	ands	r0, r2
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80009d8:	f8c3 0204 	str.w	r0, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009dc:	6908      	ldr	r0, [r1, #16]
 80009de:	bb90      	cbnz	r0, 8000a46 <HAL_CAN_ConfigFilter+0xfa>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80009e0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80009e4:	4002      	ands	r2, r0
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80009e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == ENABLE)
 80009ea:	6a0b      	ldr	r3, [r1, #32]
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <HAL_CAN_ConfigFilter+0x110>)
 80009ee:	2b01      	cmp	r3, #1
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009f0:	bf02      	ittt	eq
 80009f2:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 80009f6:	4323      	orreq	r3, r4
 80009f8:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009fc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000a00:	f023 0301 	bic.w	r3, r3, #1
 8000a04:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000a08:	2000      	movs	r0, #0
 8000a0a:	bd30      	pop	{r4, r5, pc}
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a0c:	2d01      	cmp	r5, #1
 8000a0e:	d1dc      	bne.n	80009ca <HAL_CAN_ConfigFilter+0x7e>
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a10:	f8d3 520c 	ldr.w	r5, [r3, #524]	; 0x20c
 8000a14:	4325      	orrs	r5, r4
 8000a16:	f8c3 520c 	str.w	r5, [r3, #524]	; 0x20c
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a1a:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a1c:	888d      	ldrh	r5, [r1, #4]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a1e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000a22:	00c3      	lsls	r3, r0, #3
 8000a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a28:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a2c:	8988      	ldrh	r0, [r1, #12]
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a2e:	f8c3 5240 	str.w	r5, [r3, #576]	; 0x240
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a32:	688d      	ldr	r5, [r1, #8]
 8000a34:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a38:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
 8000a3c:	e7c5      	b.n	80009ca <HAL_CAN_ConfigFilter+0x7e>
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000a3e:	f8d3 0204 	ldr.w	r0, [r3, #516]	; 0x204
 8000a42:	4320      	orrs	r0, r4
 8000a44:	e7c8      	b.n	80009d8 <HAL_CAN_ConfigFilter+0x8c>
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000a46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000a4a:	4322      	orrs	r2, r4
 8000a4c:	e7cb      	b.n	80009e6 <HAL_CAN_ConfigFilter+0x9a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000a4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a54:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000a56:	2001      	movs	r0, #1
  }
}
 8000a58:	bd30      	pop	{r4, r5, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40006400 	.word	0x40006400

08000a60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000a60:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000a62:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000a66:	2b01      	cmp	r3, #1
{
 8000a68:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 8000a6a:	d11f      	bne.n	8000aac <HAL_CAN_Start+0x4c>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a6c:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a74:	6813      	ldr	r3, [r2, #0]
 8000a76:	f023 0301 	bic.w	r3, r3, #1
 8000a7a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a7c:	f7ff fd94 	bl	80005a8 <HAL_GetTick>
 8000a80:	4605      	mov	r5, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != RESET)
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	6858      	ldr	r0, [r3, #4]
 8000a86:	f010 0001 	ands.w	r0, r0, #1
 8000a8a:	d101      	bne.n	8000a90 <HAL_CAN_Start+0x30>
        return HAL_ERROR;
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a8c:	6260      	str	r0, [r4, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a8e:	bd38      	pop	{r3, r4, r5, pc}
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a90:	f7ff fd8a 	bl	80005a8 <HAL_GetTick>
 8000a94:	1b40      	subs	r0, r0, r5
 8000a96:	280a      	cmp	r0, #10
 8000a98:	d9f3      	bls.n	8000a82 <HAL_CAN_Start+0x22>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	f884 3020 	strb.w	r3, [r4, #32]
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
 8000aa8:	2001      	movs	r0, #1
  }
}
 8000aaa:	bd38      	pop	{r3, r4, r5, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000aac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000aae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ab2:	6243      	str	r3, [r0, #36]	; 0x24
 8000ab4:	e7f8      	b.n	8000aa8 <HAL_CAN_Start+0x48>

08000ab6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000ab8:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000abc:	2c01      	cmp	r4, #1
 8000abe:	d003      	beq.n	8000ac8 <HAL_CAN_AddTxMessage+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000ac0:	f890 4020 	ldrb.w	r4, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000ac4:	2c02      	cmp	r4, #2
 8000ac6:	d141      	bne.n	8000b4c <HAL_CAN_AddTxMessage+0x96>
  {
    /* Check that all the Tx mailboxes are not full */
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000ac8:	6804      	ldr	r4, [r0, #0]
 8000aca:	68a5      	ldr	r5, [r4, #8]
 8000acc:	016f      	lsls	r7, r5, #5
 8000ace:	d405      	bmi.n	8000adc <HAL_CAN_AddTxMessage+0x26>
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000ad0:	68a5      	ldr	r5, [r4, #8]
    if (((hcan->Instance->TSR & CAN_TSR_TME0) != RESET) ||
 8000ad2:	012e      	lsls	r6, r5, #4
 8000ad4:	d402      	bmi.n	8000adc <HAL_CAN_AddTxMessage+0x26>
        ((hcan->Instance->TSR & CAN_TSR_TME2) != RESET))
 8000ad6:	68a5      	ldr	r5, [r4, #8]
        ((hcan->Instance->TSR & CAN_TSR_TME1) != RESET) ||
 8000ad8:	00ed      	lsls	r5, r5, #3
 8000ada:	d531      	bpl.n	8000b40 <HAL_CAN_AddTxMessage+0x8a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000adc:	68a0      	ldr	r0, [r4, #8]

      /* Store the Tx mailbox */
      *pTxMailbox = 1U << transmitmailbox;
 8000ade:	2501      	movs	r5, #1
      transmitmailbox = (hcan->Instance->TSR & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ae0:	f3c0 6001 	ubfx	r0, r0, #24, #2
      *pTxMailbox = 1U << transmitmailbox;
 8000ae4:	4085      	lsls	r5, r0
 8000ae6:	601d      	str	r5, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ae8:	688d      	ldr	r5, [r1, #8]
 8000aea:	68cf      	ldr	r7, [r1, #12]
 8000aec:	f100 0318 	add.w	r3, r0, #24
 8000af0:	bb0d      	cbnz	r5, 8000b36 <HAL_CAN_AddTxMessage+0x80>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000af2:	680d      	ldr	r5, [r1, #0]
 8000af4:	ea47 5545 	orr.w	r5, r7, r5, lsl #21
                                                           pHeader->RTR);
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	0100      	lsls	r0, r0, #4
 8000afc:	50e5      	str	r5, [r4, r3]
 8000afe:	1823      	adds	r3, r4, r0
                                                           pHeader->IDE |
                                                           pHeader->RTR);
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b00:	690d      	ldr	r5, [r1, #16]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b02:	7d09      	ldrb	r1, [r1, #20]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b04:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b08:	2901      	cmp	r1, #1
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b0a:	bf02      	ittt	eq
 8000b0c:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000b10:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000b14:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b18:	4404      	add	r4, r0
 8000b1a:	6851      	ldr	r1, [r2, #4]
 8000b1c:	f8c4 118c 	str.w	r1, [r4, #396]	; 0x18c
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b20:	6812      	ldr	r2, [r2, #0]
 8000b22:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000b26:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000b2a:	f042 0201 	orr.w	r2, r2, #1
 8000b2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

      /* Return function status */
      return HAL_OK;
 8000b32:	2000      	movs	r0, #0
 8000b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b36:	684e      	ldr	r6, [r1, #4]
                                                           pHeader->IDE |
 8000b38:	433d      	orrs	r5, r7
 8000b3a:	ea45 05c6 	orr.w	r5, r5, r6, lsl #3
 8000b3e:	e7db      	b.n	8000af8 <HAL_CAN_AddTxMessage+0x42>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b40:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b46:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000b48:	2001      	movs	r0, #1
  }
}
 8000b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b52:	e7f8      	b.n	8000b46 <HAL_CAN_AddTxMessage+0x90>

08000b54 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b56:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000b5a:	2c01      	cmp	r4, #1
 8000b5c:	d003      	beq.n	8000b66 <HAL_CAN_GetRxMessage+0x12>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000b5e:	f890 4020 	ldrb.w	r4, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000b62:	2c02      	cmp	r4, #2
 8000b64:	d170      	bne.n	8000c48 <HAL_CAN_GetRxMessage+0xf4>
 8000b66:	6806      	ldr	r6, [r0, #0]
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000b68:	b941      	cbnz	r1, 8000b7c <HAL_CAN_GetRxMessage+0x28>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == RESET)
 8000b6a:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8000b6c:	07a4      	lsls	r4, r4, #30
 8000b6e:	d109      	bne.n	8000b84 <HAL_CAN_GetRxMessage+0x30>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000b70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000b72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b76:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000b78:	2001      	movs	r0, #1
 8000b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8000b7c:	2901      	cmp	r1, #1
 8000b7e:	d101      	bne.n	8000b84 <HAL_CAN_GetRxMessage+0x30>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == RESET)
 8000b80:	6934      	ldr	r4, [r6, #16]
 8000b82:	e7f3      	b.n	8000b6c <HAL_CAN_GetRxMessage+0x18>
 8000b84:	010c      	lsls	r4, r1, #4
 8000b86:	1935      	adds	r5, r6, r4
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000b88:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b8c:	f007 0704 	and.w	r7, r7, #4
 8000b90:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000b92:	2f00      	cmp	r7, #0
 8000b94:	d14b      	bne.n	8000c2e <HAL_CAN_GetRxMessage+0xda>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000b96:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000b9a:	0d7f      	lsrs	r7, r7, #21
 8000b9c:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000b9e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000ba2:	f3c7 0740 	ubfx	r7, r7, #1, #1
 8000ba6:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000ba8:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8000bac:	f007 070f 	and.w	r7, r7, #15
 8000bb0:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bb2:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bb6:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8000bba:	4426      	add	r6, r4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bbc:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bc0:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000bc2:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000bc4:	6155      	str	r5, [r2, #20]
    aData[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8000bc6:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8000bca:	701a      	strb	r2, [r3, #0]
    aData[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8000bcc:	6802      	ldr	r2, [r0, #0]
 8000bce:	4422      	add	r2, r4
 8000bd0:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000bd4:	0a12      	lsrs	r2, r2, #8
 8000bd6:	705a      	strb	r2, [r3, #1]
    aData[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8000bd8:	6802      	ldr	r2, [r0, #0]
 8000bda:	4422      	add	r2, r4
 8000bdc:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000be0:	0c12      	lsrs	r2, r2, #16
 8000be2:	709a      	strb	r2, [r3, #2]
    aData[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos;
 8000be4:	6802      	ldr	r2, [r0, #0]
 8000be6:	4422      	add	r2, r4
 8000be8:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8000bec:	0e12      	lsrs	r2, r2, #24
 8000bee:	70da      	strb	r2, [r3, #3]
    aData[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos;
 8000bf0:	6802      	ldr	r2, [r0, #0]
 8000bf2:	4422      	add	r2, r4
 8000bf4:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000bf8:	711a      	strb	r2, [r3, #4]
    aData[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos;
 8000bfa:	6802      	ldr	r2, [r0, #0]
 8000bfc:	4422      	add	r2, r4
 8000bfe:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000c02:	0a12      	lsrs	r2, r2, #8
 8000c04:	715a      	strb	r2, [r3, #5]
    aData[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos;
 8000c06:	6802      	ldr	r2, [r0, #0]
 8000c08:	4422      	add	r2, r4
 8000c0a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8000c0e:	0c12      	lsrs	r2, r2, #16
 8000c10:	719a      	strb	r2, [r3, #6]
    aData[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos;
 8000c12:	6802      	ldr	r2, [r0, #0]
 8000c14:	4414      	add	r4, r2
 8000c16:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
 8000c1a:	0e12      	lsrs	r2, r2, #24
 8000c1c:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000c1e:	b959      	cbnz	r1, 8000c38 <HAL_CAN_GetRxMessage+0xe4>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000c20:	6802      	ldr	r2, [r0, #0]
 8000c22:	68d3      	ldr	r3, [r2, #12]
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8000c2a:	2000      	movs	r0, #0
  }
}
 8000c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000c2e:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8000c32:	08ff      	lsrs	r7, r7, #3
 8000c34:	6057      	str	r7, [r2, #4]
 8000c36:	e7b2      	b.n	8000b9e <HAL_CAN_GetRxMessage+0x4a>
    else if (RxFifo == CAN_RX_FIFO1) /* Rx element is assigned to Rx FIFO 1 */
 8000c38:	2901      	cmp	r1, #1
 8000c3a:	d1f6      	bne.n	8000c2a <HAL_CAN_GetRxMessage+0xd6>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000c3c:	6802      	ldr	r2, [r0, #0]
 8000c3e:	6913      	ldr	r3, [r2, #16]
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	6113      	str	r3, [r2, #16]
 8000c46:	e7f0      	b.n	8000c2a <HAL_CAN_GetRxMessage+0xd6>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c48:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4e:	e792      	b.n	8000b76 <HAL_CAN_GetRxMessage+0x22>

08000c50 <HAL_CAN_GetRxFifoFillLevel>:
  uint32_t filllevel = 0U;

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c50:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d003      	beq.n	8000c60 <HAL_CAN_GetRxFifoFillLevel+0x10>
      (hcan->State == HAL_CAN_STATE_LISTENING))
 8000c58:	f890 3020 	ldrb.w	r3, [r0, #32]
  if ((hcan->State == HAL_CAN_STATE_READY) ||
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d107      	bne.n	8000c70 <HAL_CAN_GetRxFifoFillLevel+0x20>
 8000c60:	6803      	ldr	r3, [r0, #0]
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000c62:	b919      	cbnz	r1, 8000c6c <HAL_CAN_GetRxFifoFillLevel+0x1c>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000c64:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000c66:	f000 0003 	and.w	r0, r0, #3
 8000c6a:	4770      	bx	lr
 8000c6c:	6918      	ldr	r0, [r3, #16]
 8000c6e:	e7fa      	b.n	8000c66 <HAL_CAN_GetRxFifoFillLevel+0x16>
  uint32_t filllevel = 0U;
 8000c70:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 8000c72:	4770      	bx	lr

08000c74 <HAL_CAN_TxMailbox0CompleteCallback>:
 8000c74:	4770      	bx	lr

08000c76 <HAL_CAN_TxMailbox1CompleteCallback>:
 8000c76:	4770      	bx	lr

08000c78 <HAL_CAN_TxMailbox2CompleteCallback>:
 8000c78:	4770      	bx	lr

08000c7a <HAL_CAN_TxMailbox0AbortCallback>:
 8000c7a:	4770      	bx	lr

08000c7c <HAL_CAN_TxMailbox1AbortCallback>:
 8000c7c:	4770      	bx	lr

08000c7e <HAL_CAN_TxMailbox2AbortCallback>:
 8000c7e:	4770      	bx	lr

08000c80 <HAL_CAN_RxFifo0MsgPendingCallback>:
 8000c80:	4770      	bx	lr

08000c82 <HAL_CAN_RxFifo0FullCallback>:
 8000c82:	4770      	bx	lr

08000c84 <HAL_CAN_RxFifo1MsgPendingCallback>:
 8000c84:	4770      	bx	lr

08000c86 <HAL_CAN_RxFifo1FullCallback>:
 8000c86:	4770      	bx	lr

08000c88 <HAL_CAN_SleepCallback>:
 8000c88:	4770      	bx	lr

08000c8a <HAL_CAN_WakeUpFromRxMsgCallback>:
 8000c8a:	4770      	bx	lr

08000c8c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000c8c:	4770      	bx	lr

08000c8e <HAL_CAN_IRQHandler>:
{
 8000c8e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000c92:	6803      	ldr	r3, [r0, #0]
 8000c94:	695e      	ldr	r6, [r3, #20]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000c96:	f8d3 9004 	ldr.w	r9, [r3, #4]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000c9a:	689f      	ldr	r7, [r3, #8]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000c9c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000ca0:	f8d3 a010 	ldr.w	sl, [r3, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000ca4:	f8d3 8018 	ldr.w	r8, [r3, #24]
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 8000ca8:	f016 0401 	ands.w	r4, r6, #1
{
 8000cac:	4605      	mov	r5, r0
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != RESET)
 8000cae:	d022      	beq.n	8000cf6 <HAL_CAN_IRQHandler+0x68>
    if ((tsrflags & CAN_TSR_RQCP0) != RESET)
 8000cb0:	f017 0401 	ands.w	r4, r7, #1
 8000cb4:	d007      	beq.n	8000cc6 <HAL_CAN_IRQHandler+0x38>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000cb6:	2201      	movs	r2, #1
      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 8000cb8:	07b9      	lsls	r1, r7, #30
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000cba:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK0) != RESET)
 8000cbc:	f140 80a3 	bpl.w	8000e06 <HAL_CAN_IRQHandler+0x178>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000cc0:	f7ff ffd8 	bl	8000c74 <HAL_CAN_TxMailbox0CompleteCallback>
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000cc4:	2400      	movs	r4, #0
    if ((tsrflags & CAN_TSR_RQCP1) != RESET)
 8000cc6:	05fb      	lsls	r3, r7, #23
 8000cc8:	d509      	bpl.n	8000cde <HAL_CAN_IRQHandler+0x50>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	f44f 7280 	mov.w	r2, #256	; 0x100
      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 8000cd0:	05b8      	lsls	r0, r7, #22
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000cd2:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK1) != RESET)
 8000cd4:	f140 80a5 	bpl.w	8000e22 <HAL_CAN_IRQHandler+0x194>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000cd8:	4628      	mov	r0, r5
 8000cda:	f7ff ffcc 	bl	8000c76 <HAL_CAN_TxMailbox1CompleteCallback>
    if ((tsrflags & CAN_TSR_RQCP2) != RESET)
 8000cde:	03fb      	lsls	r3, r7, #15
 8000ce0:	d509      	bpl.n	8000cf6 <HAL_CAN_IRQHandler+0x68>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ce2:	682b      	ldr	r3, [r5, #0]
 8000ce4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8000ce8:	03b8      	lsls	r0, r7, #14
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000cea:	609a      	str	r2, [r3, #8]
      if ((tsrflags & CAN_TSR_TXOK2) != RESET)
 8000cec:	f140 80a7 	bpl.w	8000e3e <HAL_CAN_IRQHandler+0x1b0>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f7ff ffc1 	bl	8000c78 <HAL_CAN_TxMailbox2CompleteCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != RESET)
 8000cf6:	0733      	lsls	r3, r6, #28
 8000cf8:	d507      	bpl.n	8000d0a <HAL_CAN_IRQHandler+0x7c>
    if ((rf0rflags & CAN_RF0R_FOVR0) != RESET)
 8000cfa:	f01b 0f10 	tst.w	fp, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000cfe:	bf1f      	itttt	ne
 8000d00:	682b      	ldrne	r3, [r5, #0]
 8000d02:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000d04:	f444 7400 	orrne.w	r4, r4, #512	; 0x200
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000d08:	60da      	strne	r2, [r3, #12]
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != RESET)
 8000d0a:	0777      	lsls	r7, r6, #29
 8000d0c:	d508      	bpl.n	8000d20 <HAL_CAN_IRQHandler+0x92>
    if ((rf0rflags & CAN_RF0R_FULL0) != RESET)
 8000d0e:	f01b 0f08 	tst.w	fp, #8
 8000d12:	d005      	beq.n	8000d20 <HAL_CAN_IRQHandler+0x92>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	2208      	movs	r2, #8
 8000d18:	60da      	str	r2, [r3, #12]
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	f7ff ffb1 	bl	8000c82 <HAL_CAN_RxFifo0FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != RESET)
 8000d20:	07b0      	lsls	r0, r6, #30
 8000d22:	d506      	bpl.n	8000d32 <HAL_CAN_IRQHandler+0xa4>
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != RESET)
 8000d24:	682b      	ldr	r3, [r5, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0799      	lsls	r1, r3, #30
 8000d2a:	d002      	beq.n	8000d32 <HAL_CAN_IRQHandler+0xa4>
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	f7ff ffa7 	bl	8000c80 <HAL_CAN_RxFifo0MsgPendingCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != RESET)
 8000d32:	0672      	lsls	r2, r6, #25
 8000d34:	d507      	bpl.n	8000d46 <HAL_CAN_IRQHandler+0xb8>
    if ((rf1rflags & CAN_RF1R_FOVR1) != RESET)
 8000d36:	f01a 0f10 	tst.w	sl, #16
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d3a:	bf1f      	itttt	ne
 8000d3c:	682b      	ldrne	r3, [r5, #0]
 8000d3e:	2210      	movne	r2, #16
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000d40:	f444 6480 	orrne.w	r4, r4, #1024	; 0x400
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000d44:	611a      	strne	r2, [r3, #16]
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != RESET)
 8000d46:	06b3      	lsls	r3, r6, #26
 8000d48:	d508      	bpl.n	8000d5c <HAL_CAN_IRQHandler+0xce>
    if ((rf1rflags & CAN_RF1R_FULL1) != RESET)
 8000d4a:	f01a 0f08 	tst.w	sl, #8
 8000d4e:	d005      	beq.n	8000d5c <HAL_CAN_IRQHandler+0xce>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000d50:	682b      	ldr	r3, [r5, #0]
 8000d52:	2208      	movs	r2, #8
 8000d54:	611a      	str	r2, [r3, #16]
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000d56:	4628      	mov	r0, r5
 8000d58:	f7ff ff95 	bl	8000c86 <HAL_CAN_RxFifo1FullCallback>
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != RESET)
 8000d5c:	06f7      	lsls	r7, r6, #27
 8000d5e:	d506      	bpl.n	8000d6e <HAL_CAN_IRQHandler+0xe0>
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != RESET)
 8000d60:	682b      	ldr	r3, [r5, #0]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	0798      	lsls	r0, r3, #30
 8000d66:	d002      	beq.n	8000d6e <HAL_CAN_IRQHandler+0xe0>
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000d68:	4628      	mov	r0, r5
 8000d6a:	f7ff ff8b 	bl	8000c84 <HAL_CAN_RxFifo1MsgPendingCallback>
  if ((interrupts & CAN_IT_SLEEP_ACK) != RESET)
 8000d6e:	03b1      	lsls	r1, r6, #14
 8000d70:	d508      	bpl.n	8000d84 <HAL_CAN_IRQHandler+0xf6>
    if ((msrflags & CAN_MSR_SLAKI) != RESET)
 8000d72:	f019 0f10 	tst.w	r9, #16
 8000d76:	d005      	beq.n	8000d84 <HAL_CAN_IRQHandler+0xf6>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000d78:	682b      	ldr	r3, [r5, #0]
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	605a      	str	r2, [r3, #4]
      HAL_CAN_SleepCallback(hcan);
 8000d7e:	4628      	mov	r0, r5
 8000d80:	f7ff ff82 	bl	8000c88 <HAL_CAN_SleepCallback>
  if ((interrupts & CAN_IT_WAKEUP) != RESET)
 8000d84:	03f2      	lsls	r2, r6, #15
 8000d86:	d508      	bpl.n	8000d9a <HAL_CAN_IRQHandler+0x10c>
    if ((msrflags & CAN_MSR_WKUI) != RESET)
 8000d88:	f019 0f08 	tst.w	r9, #8
 8000d8c:	d005      	beq.n	8000d9a <HAL_CAN_IRQHandler+0x10c>
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000d8e:	682b      	ldr	r3, [r5, #0]
 8000d90:	2208      	movs	r2, #8
 8000d92:	605a      	str	r2, [r3, #4]
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000d94:	4628      	mov	r0, r5
 8000d96:	f7ff ff78 	bl	8000c8a <HAL_CAN_WakeUpFromRxMsgCallback>
  if ((interrupts & CAN_IT_ERROR) != RESET)
 8000d9a:	0433      	lsls	r3, r6, #16
 8000d9c:	d52a      	bpl.n	8000df4 <HAL_CAN_IRQHandler+0x166>
    if ((msrflags & CAN_MSR_ERRI) != RESET)
 8000d9e:	f019 0f04 	tst.w	r9, #4
 8000da2:	682a      	ldr	r2, [r5, #0]
 8000da4:	d024      	beq.n	8000df0 <HAL_CAN_IRQHandler+0x162>
      if (((interrupts & CAN_IT_ERROR_WARNING) != RESET) &&
 8000da6:	05f7      	lsls	r7, r6, #23
 8000da8:	d504      	bpl.n	8000db4 <HAL_CAN_IRQHandler+0x126>
 8000daa:	f018 0f01 	tst.w	r8, #1
        errorcode |= HAL_CAN_ERROR_EWG;
 8000dae:	bf18      	it	ne
 8000db0:	f044 0401 	orrne.w	r4, r4, #1
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != RESET) &&
 8000db4:	05b0      	lsls	r0, r6, #22
 8000db6:	d504      	bpl.n	8000dc2 <HAL_CAN_IRQHandler+0x134>
 8000db8:	f018 0f02 	tst.w	r8, #2
        errorcode |= HAL_CAN_ERROR_EPV;
 8000dbc:	bf18      	it	ne
 8000dbe:	f044 0402 	orrne.w	r4, r4, #2
      if (((interrupts & CAN_IT_BUSOFF) != RESET) &&
 8000dc2:	0571      	lsls	r1, r6, #21
 8000dc4:	d504      	bpl.n	8000dd0 <HAL_CAN_IRQHandler+0x142>
 8000dc6:	f018 0f04 	tst.w	r8, #4
        errorcode |= HAL_CAN_ERROR_BOF;
 8000dca:	bf18      	it	ne
 8000dcc:	f044 0404 	orrne.w	r4, r4, #4
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != RESET) &&
 8000dd0:	0533      	lsls	r3, r6, #20
 8000dd2:	d50d      	bpl.n	8000df0 <HAL_CAN_IRQHandler+0x162>
 8000dd4:	f018 0370 	ands.w	r3, r8, #112	; 0x70
 8000dd8:	d00a      	beq.n	8000df0 <HAL_CAN_IRQHandler+0x162>
        switch (esrflags & CAN_ESR_LEC)
 8000dda:	2b30      	cmp	r3, #48	; 0x30
 8000ddc:	d04c      	beq.n	8000e78 <HAL_CAN_IRQHandler+0x1ea>
 8000dde:	d83c      	bhi.n	8000e5a <HAL_CAN_IRQHandler+0x1cc>
 8000de0:	2b10      	cmp	r3, #16
 8000de2:	d043      	beq.n	8000e6c <HAL_CAN_IRQHandler+0x1de>
 8000de4:	2b20      	cmp	r3, #32
 8000de6:	d044      	beq.n	8000e72 <HAL_CAN_IRQHandler+0x1e4>
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000de8:	6993      	ldr	r3, [r2, #24]
 8000dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dee:	6193      	str	r3, [r2, #24]
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000df0:	2304      	movs	r3, #4
 8000df2:	6053      	str	r3, [r2, #4]
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000df4:	b12c      	cbz	r4, 8000e02 <HAL_CAN_IRQHandler+0x174>
    hcan->ErrorCode |= errorcode;
 8000df6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000df8:	431c      	orrs	r4, r3
 8000dfa:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_CAN_ErrorCallback(hcan);
 8000dfc:	4628      	mov	r0, r5
 8000dfe:	f7ff ff45 	bl	8000c8c <HAL_CAN_ErrorCallback>
 8000e02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((tsrflags & CAN_TSR_ALST0) != RESET)
 8000e06:	077a      	lsls	r2, r7, #29
 8000e08:	d405      	bmi.n	8000e16 <HAL_CAN_IRQHandler+0x188>
        else if ((tsrflags & CAN_TSR_TERR0) != RESET)
 8000e0a:	f017 0408 	ands.w	r4, r7, #8
 8000e0e:	d105      	bne.n	8000e1c <HAL_CAN_IRQHandler+0x18e>
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e10:	f7ff ff33 	bl	8000c7a <HAL_CAN_TxMailbox0AbortCallback>
 8000e14:	e757      	b.n	8000cc6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e16:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000e1a:	e754      	b.n	8000cc6 <HAL_CAN_IRQHandler+0x38>
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e1c:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8000e20:	e751      	b.n	8000cc6 <HAL_CAN_IRQHandler+0x38>
        if ((tsrflags & CAN_TSR_ALST1) != RESET)
 8000e22:	0579      	lsls	r1, r7, #21
 8000e24:	d502      	bpl.n	8000e2c <HAL_CAN_IRQHandler+0x19e>
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e26:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8000e2a:	e758      	b.n	8000cde <HAL_CAN_IRQHandler+0x50>
        else if ((tsrflags & CAN_TSR_TERR1) != RESET)
 8000e2c:	053a      	lsls	r2, r7, #20
 8000e2e:	d502      	bpl.n	8000e36 <HAL_CAN_IRQHandler+0x1a8>
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e30:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000e34:	e753      	b.n	8000cde <HAL_CAN_IRQHandler+0x50>
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e36:	4628      	mov	r0, r5
 8000e38:	f7ff ff20 	bl	8000c7c <HAL_CAN_TxMailbox1AbortCallback>
 8000e3c:	e74f      	b.n	8000cde <HAL_CAN_IRQHandler+0x50>
        if ((tsrflags & CAN_TSR_ALST2) != RESET)
 8000e3e:	0379      	lsls	r1, r7, #13
 8000e40:	d502      	bpl.n	8000e48 <HAL_CAN_IRQHandler+0x1ba>
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e42:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 8000e46:	e756      	b.n	8000cf6 <HAL_CAN_IRQHandler+0x68>
        else if ((tsrflags & CAN_TSR_TERR2) != RESET)
 8000e48:	033a      	lsls	r2, r7, #12
 8000e4a:	d502      	bpl.n	8000e52 <HAL_CAN_IRQHandler+0x1c4>
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000e4c:	f444 3480 	orr.w	r4, r4, #65536	; 0x10000
 8000e50:	e751      	b.n	8000cf6 <HAL_CAN_IRQHandler+0x68>
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000e52:	4628      	mov	r0, r5
 8000e54:	f7ff ff13 	bl	8000c7e <HAL_CAN_TxMailbox2AbortCallback>
 8000e58:	e74d      	b.n	8000cf6 <HAL_CAN_IRQHandler+0x68>
        switch (esrflags & CAN_ESR_LEC)
 8000e5a:	2b50      	cmp	r3, #80	; 0x50
 8000e5c:	d00f      	beq.n	8000e7e <HAL_CAN_IRQHandler+0x1f0>
 8000e5e:	2b60      	cmp	r3, #96	; 0x60
 8000e60:	d010      	beq.n	8000e84 <HAL_CAN_IRQHandler+0x1f6>
 8000e62:	2b40      	cmp	r3, #64	; 0x40
 8000e64:	d1c0      	bne.n	8000de8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BR;
 8000e66:	f044 0440 	orr.w	r4, r4, #64	; 0x40
            break;
 8000e6a:	e7bd      	b.n	8000de8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_STF;
 8000e6c:	f044 0408 	orr.w	r4, r4, #8
            break;
 8000e70:	e7ba      	b.n	8000de8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000e72:	f044 0410 	orr.w	r4, r4, #16
            break;
 8000e76:	e7b7      	b.n	8000de8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000e78:	f044 0420 	orr.w	r4, r4, #32
            break;
 8000e7c:	e7b4      	b.n	8000de8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_BD;
 8000e7e:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            break;
 8000e82:	e7b1      	b.n	8000de8 <HAL_CAN_IRQHandler+0x15a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000e84:	f444 7480 	orr.w	r4, r4, #256	; 0x100
            break;
 8000e88:	e7ae      	b.n	8000de8 <HAL_CAN_IRQHandler+0x15a>
	...

08000e8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e94:	041b      	lsls	r3, r3, #16
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000e9c:	0200      	lsls	r0, r0, #8
 8000e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ea6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ea8:	60d3      	str	r3, [r2, #12]
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b530      	push	{r4, r5, lr}
 8000eb4:	68dc      	ldr	r4, [r3, #12]
 8000eb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	bf28      	it	cs
 8000ec4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 0501 	mov.w	r5, #1
 8000ecc:	fa05 f303 	lsl.w	r3, r5, r3
 8000ed0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed4:	bf8c      	ite	hi
 8000ed6:	3c03      	subhi	r4, #3
 8000ed8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eda:	4019      	ands	r1, r3
 8000edc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ede:	fa05 f404 	lsl.w	r4, r5, r4
 8000ee2:	3c01      	subs	r4, #1
 8000ee4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ee6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	ea42 0201 	orr.w	r2, r2, r1
 8000eec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef0:	bfaf      	iteee	ge
 8000ef2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	f000 000f 	andlt.w	r0, r0, #15
 8000efa:	4b06      	ldrlt	r3, [pc, #24]	; (8000f14 <HAL_NVIC_SetPriority+0x64>)
 8000efc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	bfa5      	ittet	ge
 8000f00:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000f04:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f06:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000f0c:	bd30      	pop	{r4, r5, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	e000ed14 	.word	0xe000ed14

08000f18 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f18:	0942      	lsrs	r2, r0, #5
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f000 001f 	and.w	r0, r0, #31
 8000f20:	fa03 f000 	lsl.w	r0, r3, r0
 8000f24:	4b01      	ldr	r3, [pc, #4]	; (8000f2c <HAL_NVIC_EnableIRQ+0x14>)
 8000f26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000f2a:	4770      	bx	lr
 8000f2c:	e000e100 	.word	0xe000e100

08000f30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	3801      	subs	r0, #1
 8000f32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f36:	d20a      	bcs.n	8000f4e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3e:	21f0      	movs	r1, #240	; 0xf0
 8000f40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f4e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e010 	.word	0xe000e010
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f5e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000f60:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f62:	bf0c      	ite	eq
 8000f64:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000f68:	f022 0204 	bicne.w	r2, r2, #4
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	4770      	bx	lr
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000f74:	4770      	bx	lr

08000f76 <HAL_SYSTICK_IRQHandler>:
{
 8000f76:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000f78:	f7ff fffc 	bl	8000f74 <HAL_SYSTICK_Callback>
 8000f7c:	bd08      	pop	{r3, pc}
	...

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f84:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800112c <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f8c:	4a65      	ldr	r2, [pc, #404]	; (8001124 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f8e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001130 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f92:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f94:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000f96:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000f9c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa0:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000fa4:	45b6      	cmp	lr, r6
 8000fa6:	f040 80aa 	bne.w	80010fe <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000faa:	684c      	ldr	r4, [r1, #4]
 8000fac:	f024 0710 	bic.w	r7, r4, #16
 8000fb0:	2f02      	cmp	r7, #2
 8000fb2:	d116      	bne.n	8000fe2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000fb4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000fb8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fbc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000fc0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fc4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000fc8:	f04f 0c0f 	mov.w	ip, #15
 8000fcc:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000fd0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fd4:	690d      	ldr	r5, [r1, #16]
 8000fd6:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fda:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000fde:	f8ca 5020 	str.w	r5, [sl, #32]
 8000fe2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fe6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000fe8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fec:	fa05 f50a 	lsl.w	r5, r5, sl
 8000ff0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ff2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ff6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ffa:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffe:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001000:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001004:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001006:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	d811      	bhi.n	8001030 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800100c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800100e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001012:	68cf      	ldr	r7, [r1, #12]
 8001014:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001018:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800101c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800101e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001020:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001024:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001028:	409f      	lsls	r7, r3
 800102a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800102e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001030:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001032:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001034:	688f      	ldr	r7, [r1, #8]
 8001036:	fa07 f70a 	lsl.w	r7, r7, sl
 800103a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800103c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103e:	00e5      	lsls	r5, r4, #3
 8001040:	d55d      	bpl.n	80010fe <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	f04f 0b00 	mov.w	fp, #0
 8001046:	f8cd b00c 	str.w	fp, [sp, #12]
 800104a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800104e:	4d36      	ldr	r5, [pc, #216]	; (8001128 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001054:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001058:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800105c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001060:	9703      	str	r7, [sp, #12]
 8001062:	9f03      	ldr	r7, [sp, #12]
 8001064:	f023 0703 	bic.w	r7, r3, #3
 8001068:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800106c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001070:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001074:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001078:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800107c:	f04f 0e0f 	mov.w	lr, #15
 8001080:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001084:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001086:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800108a:	d03f      	beq.n	800110c <HAL_GPIO_Init+0x18c>
 800108c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001090:	42a8      	cmp	r0, r5
 8001092:	d03d      	beq.n	8001110 <HAL_GPIO_Init+0x190>
 8001094:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001098:	42a8      	cmp	r0, r5
 800109a:	d03b      	beq.n	8001114 <HAL_GPIO_Init+0x194>
 800109c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a0:	42a8      	cmp	r0, r5
 80010a2:	d039      	beq.n	8001118 <HAL_GPIO_Init+0x198>
 80010a4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80010a8:	42a8      	cmp	r0, r5
 80010aa:	d037      	beq.n	800111c <HAL_GPIO_Init+0x19c>
 80010ac:	4548      	cmp	r0, r9
 80010ae:	d037      	beq.n	8001120 <HAL_GPIO_Init+0x1a0>
 80010b0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80010b4:	42a8      	cmp	r0, r5
 80010b6:	bf14      	ite	ne
 80010b8:	2507      	movne	r5, #7
 80010ba:	2506      	moveq	r5, #6
 80010bc:	fa05 f50c 	lsl.w	r5, r5, ip
 80010c0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80010c6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80010c8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ca:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80010ce:	bf0c      	ite	eq
 80010d0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010d2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80010d4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80010d6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80010dc:	bf0c      	ite	eq
 80010de:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010e0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80010e2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010e6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80010ea:	bf0c      	ite	eq
 80010ec:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80010ee:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80010f0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80010f2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80010f6:	bf54      	ite	pl
 80010f8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80010fa:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80010fc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	3301      	adds	r3, #1
 8001100:	2b10      	cmp	r3, #16
 8001102:	f47f af48 	bne.w	8000f96 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001106:	b005      	add	sp, #20
 8001108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110c:	465d      	mov	r5, fp
 800110e:	e7d5      	b.n	80010bc <HAL_GPIO_Init+0x13c>
 8001110:	2501      	movs	r5, #1
 8001112:	e7d3      	b.n	80010bc <HAL_GPIO_Init+0x13c>
 8001114:	2502      	movs	r5, #2
 8001116:	e7d1      	b.n	80010bc <HAL_GPIO_Init+0x13c>
 8001118:	2503      	movs	r5, #3
 800111a:	e7cf      	b.n	80010bc <HAL_GPIO_Init+0x13c>
 800111c:	2504      	movs	r5, #4
 800111e:	e7cd      	b.n	80010bc <HAL_GPIO_Init+0x13c>
 8001120:	2505      	movs	r5, #5
 8001122:	e7cb      	b.n	80010bc <HAL_GPIO_Init+0x13c>
 8001124:	40013c00 	.word	0x40013c00
 8001128:	40020000 	.word	0x40020000
 800112c:	40023800 	.word	0x40023800
 8001130:	40021400 	.word	0x40021400

08001134 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001134:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001136:	4604      	mov	r4, r0
 8001138:	2800      	cmp	r0, #0
 800113a:	d062      	beq.n	8001202 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800113c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001140:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001144:	b91b      	cbnz	r3, 800114e <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001146:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800114a:	f001 fc85 	bl	8002a58 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800114e:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001150:	4e2d      	ldr	r6, [pc, #180]	; (8001208 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001152:	4d2e      	ldr	r5, [pc, #184]	; (800120c <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001154:	2324      	movs	r3, #36	; 0x24
 8001156:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001162:	f000 f8f5 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001166:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001168:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800116a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800116e:	42b3      	cmp	r3, r6
 8001170:	bf84      	itt	hi
 8001172:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001176:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001178:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800117a:	bf91      	iteee	ls
 800117c:	1c69      	addls	r1, r5, #1
 800117e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8001182:	fbb1 f1f5 	udivhi	r1, r1, r5
 8001186:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001188:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800118a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800118c:	d821      	bhi.n	80011d2 <HAL_I2C_Init+0x9e>
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fbb0 f0f3 	udiv	r0, r0, r3
 8001194:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001198:	2b03      	cmp	r3, #3
 800119a:	bf98      	it	ls
 800119c:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800119e:	6a21      	ldr	r1, [r4, #32]
 80011a0:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011a2:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011a4:	430b      	orrs	r3, r1
 80011a6:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80011a8:	68e1      	ldr	r1, [r4, #12]
 80011aa:	6923      	ldr	r3, [r4, #16]
 80011ac:	430b      	orrs	r3, r1
 80011ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80011b0:	69a1      	ldr	r1, [r4, #24]
 80011b2:	6963      	ldr	r3, [r4, #20]
 80011b4:	430b      	orrs	r3, r1
 80011b6:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011b8:	6813      	ldr	r3, [r2, #0]
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c0:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80011c2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011c4:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80011c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ca:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011cc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80011d2:	68a1      	ldr	r1, [r4, #8]
 80011d4:	b949      	cbnz	r1, 80011ea <HAL_I2C_Init+0xb6>
 80011d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80011da:	fbb0 f0f3 	udiv	r0, r0, r3
 80011de:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80011e2:	b163      	cbz	r3, 80011fe <HAL_I2C_Init+0xca>
 80011e4:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80011e8:	e7d9      	b.n	800119e <HAL_I2C_Init+0x6a>
 80011ea:	2119      	movs	r1, #25
 80011ec:	434b      	muls	r3, r1
 80011ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80011f2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80011f6:	b113      	cbz	r3, 80011fe <HAL_I2C_Init+0xca>
 80011f8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80011fc:	e7cf      	b.n	800119e <HAL_I2C_Init+0x6a>
 80011fe:	2001      	movs	r0, #1
 8001200:	e7cd      	b.n	800119e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8001202:	2001      	movs	r0, #1
}
 8001204:	bd70      	pop	{r4, r5, r6, pc}
 8001206:	bf00      	nop
 8001208:	000186a0 	.word	0x000186a0
 800120c:	000f4240 	.word	0x000f4240

08001210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001214:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001216:	4604      	mov	r4, r0
 8001218:	b910      	cbnz	r0, 8001220 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800121a:	2001      	movs	r0, #1
 800121c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001220:	4b44      	ldr	r3, [pc, #272]	; (8001334 <HAL_RCC_ClockConfig+0x124>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f002 020f 	and.w	r2, r2, #15
 8001228:	428a      	cmp	r2, r1
 800122a:	d328      	bcc.n	800127e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	6821      	ldr	r1, [r4, #0]
 800122e:	078f      	lsls	r7, r1, #30
 8001230:	d42d      	bmi.n	800128e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001232:	07c8      	lsls	r0, r1, #31
 8001234:	d440      	bmi.n	80012b8 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001236:	4b3f      	ldr	r3, [pc, #252]	; (8001334 <HAL_RCC_ClockConfig+0x124>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	f002 020f 	and.w	r2, r2, #15
 800123e:	4295      	cmp	r5, r2
 8001240:	d366      	bcc.n	8001310 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001242:	6822      	ldr	r2, [r4, #0]
 8001244:	0751      	lsls	r1, r2, #29
 8001246:	d46c      	bmi.n	8001322 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001248:	0713      	lsls	r3, r2, #28
 800124a:	d507      	bpl.n	800125c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124c:	4a3a      	ldr	r2, [pc, #232]	; (8001338 <HAL_RCC_ClockConfig+0x128>)
 800124e:	6921      	ldr	r1, [r4, #16]
 8001250:	6893      	ldr	r3, [r2, #8]
 8001252:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001256:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800125a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800125c:	f000 f898 	bl	8001390 <HAL_RCC_GetSysClockFreq>
 8001260:	4b35      	ldr	r3, [pc, #212]	; (8001338 <HAL_RCC_ClockConfig+0x128>)
 8001262:	4a36      	ldr	r2, [pc, #216]	; (800133c <HAL_RCC_ClockConfig+0x12c>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800126a:	5cd3      	ldrb	r3, [r2, r3]
 800126c:	40d8      	lsrs	r0, r3
 800126e:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_RCC_ClockConfig+0x130>)
 8001270:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff f94e 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001278:	2000      	movs	r0, #0
 800127a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127e:	b2ca      	uxtb	r2, r1
 8001280:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	4299      	cmp	r1, r3
 800128a:	d1c6      	bne.n	800121a <HAL_RCC_ClockConfig+0xa>
 800128c:	e7ce      	b.n	800122c <HAL_RCC_ClockConfig+0x1c>
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001290:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001294:	bf1e      	ittt	ne
 8001296:	689a      	ldrne	r2, [r3, #8]
 8001298:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800129c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a0:	bf42      	ittt	mi
 80012a2:	689a      	ldrmi	r2, [r3, #8]
 80012a4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80012a8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	68a0      	ldr	r0, [r4, #8]
 80012ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012b2:	4302      	orrs	r2, r0
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	e7bc      	b.n	8001232 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b8:	6862      	ldr	r2, [r4, #4]
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_RCC_ClockConfig+0x128>)
 80012bc:	2a01      	cmp	r2, #1
 80012be:	d11d      	bne.n	80012fc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	d0a8      	beq.n	800121a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c8:	4e1b      	ldr	r6, [pc, #108]	; (8001338 <HAL_RCC_ClockConfig+0x128>)
 80012ca:	68b3      	ldr	r3, [r6, #8]
 80012cc:	f023 0303 	bic.w	r3, r3, #3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80012d4:	f7ff f968 	bl	80005a8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80012dc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	68b3      	ldr	r3, [r6, #8]
 80012e0:	6862      	ldr	r2, [r4, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012ea:	d0a4      	beq.n	8001236 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ec:	f7ff f95c 	bl	80005a8 <HAL_GetTick>
 80012f0:	1bc0      	subs	r0, r0, r7
 80012f2:	4540      	cmp	r0, r8
 80012f4:	d9f3      	bls.n	80012de <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80012f6:	2003      	movs	r0, #3
}
 80012f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012fc:	1e91      	subs	r1, r2, #2
 80012fe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001300:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	d802      	bhi.n	800130a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001304:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001308:	e7dd      	b.n	80012c6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130a:	f013 0f02 	tst.w	r3, #2
 800130e:	e7da      	b.n	80012c6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001310:	b2ea      	uxtb	r2, r5
 8001312:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	429d      	cmp	r5, r3
 800131c:	f47f af7d 	bne.w	800121a <HAL_RCC_ClockConfig+0xa>
 8001320:	e78f      	b.n	8001242 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001322:	4905      	ldr	r1, [pc, #20]	; (8001338 <HAL_RCC_ClockConfig+0x128>)
 8001324:	68e0      	ldr	r0, [r4, #12]
 8001326:	688b      	ldr	r3, [r1, #8]
 8001328:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800132c:	4303      	orrs	r3, r0
 800132e:	608b      	str	r3, [r1, #8]
 8001330:	e78a      	b.n	8001248 <HAL_RCC_ClockConfig+0x38>
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00
 8001338:	40023800 	.word	0x40023800
 800133c:	08002f2c 	.word	0x08002f2c
 8001340:	20000008 	.word	0x20000008

08001344 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001344:	4b01      	ldr	r3, [pc, #4]	; (800134c <HAL_RCC_GetHCLKFreq+0x8>)
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000008 	.word	0x20000008

08001350 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	4a03      	ldr	r2, [pc, #12]	; (800136c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800135e:	6810      	ldr	r0, [r2, #0]
}
 8001360:	40d8      	lsrs	r0, r3
 8001362:	4770      	bx	lr
 8001364:	40023800 	.word	0x40023800
 8001368:	08002f3c 	.word	0x08002f3c
 800136c:	20000008 	.word	0x20000008

08001370 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001372:	4a05      	ldr	r2, [pc, #20]	; (8001388 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	4a03      	ldr	r2, [pc, #12]	; (800138c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800137e:	6810      	ldr	r0, [r2, #0]
}
 8001380:	40d8      	lsrs	r0, r3
 8001382:	4770      	bx	lr
 8001384:	40023800 	.word	0x40023800
 8001388:	08002f3c 	.word	0x08002f3c
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001390:	4920      	ldr	r1, [pc, #128]	; (8001414 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001392:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001394:	688b      	ldr	r3, [r1, #8]
 8001396:	f003 030c 	and.w	r3, r3, #12
 800139a:	2b08      	cmp	r3, #8
 800139c:	d007      	beq.n	80013ae <HAL_RCC_GetSysClockFreq+0x1e>
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d020      	beq.n	80013e4 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013a2:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <HAL_RCC_GetSysClockFreq+0x88>)
 80013a4:	481d      	ldr	r0, [pc, #116]	; (800141c <HAL_RCC_GetSysClockFreq+0x8c>)
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf18      	it	ne
 80013aa:	4610      	movne	r0, r2
 80013ac:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ae:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b0:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013b4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b8:	bf14      	ite	ne
 80013ba:	4818      	ldrne	r0, [pc, #96]	; (800141c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013bc:	4816      	ldreq	r0, [pc, #88]	; (8001418 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013be:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013c2:	bf18      	it	ne
 80013c4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013c6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ca:	fba1 0100 	umull	r0, r1, r1, r0
 80013ce:	f7fe ff19 	bl	8000204 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013d2:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_RCC_GetSysClockFreq+0x84>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80013da:	3301      	adds	r3, #1
 80013dc:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80013de:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013e2:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013e4:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013e6:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013e8:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ee:	bf14      	ite	ne
 80013f0:	480a      	ldrne	r0, [pc, #40]	; (800141c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f2:	4809      	ldreq	r0, [pc, #36]	; (8001418 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80013f8:	bf18      	it	ne
 80013fa:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013fc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001400:	fba1 0100 	umull	r0, r1, r1, r0
 8001404:	f7fe fefe 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <HAL_RCC_GetSysClockFreq+0x84>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001410:	e7e5      	b.n	80013de <HAL_RCC_GetSysClockFreq+0x4e>
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800
 8001418:	00f42400 	.word	0x00f42400
 800141c:	007a1200 	.word	0x007a1200

08001420 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001420:	6803      	ldr	r3, [r0, #0]
{
 8001422:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001426:	07df      	lsls	r7, r3, #31
{
 8001428:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800142a:	d410      	bmi.n	800144e <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	079e      	lsls	r6, r3, #30
 8001430:	d467      	bmi.n	8001502 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	071a      	lsls	r2, r3, #28
 8001436:	f100 80b2 	bmi.w	800159e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143a:	6823      	ldr	r3, [r4, #0]
 800143c:	075b      	lsls	r3, r3, #29
 800143e:	f100 80d0 	bmi.w	80015e2 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001442:	69a2      	ldr	r2, [r4, #24]
 8001444:	2a00      	cmp	r2, #0
 8001446:	f040 8139 	bne.w	80016bc <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800144a:	2000      	movs	r0, #0
 800144c:	e01e      	b.n	800148c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800144e:	4b97      	ldr	r3, [pc, #604]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	f002 020c 	and.w	r2, r2, #12
 8001456:	2a04      	cmp	r2, #4
 8001458:	d010      	beq.n	800147c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001460:	2a08      	cmp	r2, #8
 8001462:	d102      	bne.n	800146a <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	025d      	lsls	r5, r3, #9
 8001468:	d408      	bmi.n	800147c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b90      	ldr	r3, [pc, #576]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001472:	2a0c      	cmp	r2, #12
 8001474:	d10d      	bne.n	8001492 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	0250      	lsls	r0, r2, #9
 800147a:	d50a      	bpl.n	8001492 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147c:	4b8b      	ldr	r3, [pc, #556]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0399      	lsls	r1, r3, #14
 8001482:	d5d3      	bpl.n	800142c <HAL_RCC_OscConfig+0xc>
 8001484:	6863      	ldr	r3, [r4, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d1d0      	bne.n	800142c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
}
 800148c:	b002      	add	sp, #8
 800148e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	6862      	ldr	r2, [r4, #4]
 8001494:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001498:	d111      	bne.n	80014be <HAL_RCC_OscConfig+0x9e>
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014a2:	f7ff f881 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a6:	4d81      	ldr	r5, [pc, #516]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80014a8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	682b      	ldr	r3, [r5, #0]
 80014ac:	039a      	lsls	r2, r3, #14
 80014ae:	d4bd      	bmi.n	800142c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b0:	f7ff f87a 	bl	80005a8 <HAL_GetTick>
 80014b4:	1b80      	subs	r0, r0, r6
 80014b6:	2864      	cmp	r0, #100	; 0x64
 80014b8:	d9f7      	bls.n	80014aa <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80014ba:	2003      	movs	r0, #3
 80014bc:	e7e6      	b.n	800148c <HAL_RCC_OscConfig+0x6c>
 80014be:	4d7b      	ldr	r5, [pc, #492]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80014c4:	682b      	ldr	r3, [r5, #0]
 80014c6:	d107      	bne.n	80014d8 <HAL_RCC_OscConfig+0xb8>
 80014c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014cc:	602b      	str	r3, [r5, #0]
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d4:	602b      	str	r3, [r5, #0]
 80014d6:	e7e4      	b.n	80014a2 <HAL_RCC_OscConfig+0x82>
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014dc:	602b      	str	r3, [r5, #0]
 80014de:	682b      	ldr	r3, [r5, #0]
 80014e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e6:	2a00      	cmp	r2, #0
 80014e8:	d1db      	bne.n	80014a2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80014ea:	f7ff f85d 	bl	80005a8 <HAL_GetTick>
 80014ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f0:	682b      	ldr	r3, [r5, #0]
 80014f2:	039b      	lsls	r3, r3, #14
 80014f4:	d59a      	bpl.n	800142c <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014f6:	f7ff f857 	bl	80005a8 <HAL_GetTick>
 80014fa:	1b80      	subs	r0, r0, r6
 80014fc:	2864      	cmp	r0, #100	; 0x64
 80014fe:	d9f7      	bls.n	80014f0 <HAL_RCC_OscConfig+0xd0>
 8001500:	e7db      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001502:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	f012 0f0c 	tst.w	r2, #12
 800150a:	d010      	beq.n	800152e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001512:	2a08      	cmp	r2, #8
 8001514:	d102      	bne.n	800151c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	025f      	lsls	r7, r3, #9
 800151a:	d508      	bpl.n	800152e <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800151c:	4a63      	ldr	r2, [pc, #396]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 800151e:	6893      	ldr	r3, [r2, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d111      	bne.n	800154c <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001528:	6853      	ldr	r3, [r2, #4]
 800152a:	025e      	lsls	r6, r3, #9
 800152c:	d40e      	bmi.n	800154c <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b5f      	ldr	r3, [pc, #380]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	0795      	lsls	r5, r2, #30
 8001534:	d502      	bpl.n	800153c <HAL_RCC_OscConfig+0x11c>
 8001536:	68e2      	ldr	r2, [r4, #12]
 8001538:	2a01      	cmp	r2, #1
 800153a:	d1a6      	bne.n	800148a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	6921      	ldr	r1, [r4, #16]
 8001540:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001544:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001548:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	e772      	b.n	8001432 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800154c:	68e2      	ldr	r2, [r4, #12]
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x290>)
 8001550:	b1b2      	cbz	r2, 8001580 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8001552:	2201      	movs	r2, #1
 8001554:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001556:	f7ff f827 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4d54      	ldr	r5, [pc, #336]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800155c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	0798      	lsls	r0, r3, #30
 8001562:	d507      	bpl.n	8001574 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	6922      	ldr	r2, [r4, #16]
 8001568:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800156c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001570:	602b      	str	r3, [r5, #0]
 8001572:	e75e      	b.n	8001432 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff f818 	bl	80005a8 <HAL_GetTick>
 8001578:	1b80      	subs	r0, r0, r6
 800157a:	2802      	cmp	r0, #2
 800157c:	d9ef      	bls.n	800155e <HAL_RCC_OscConfig+0x13e>
 800157e:	e79c      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001580:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001582:	f7ff f811 	bl	80005a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4d49      	ldr	r5, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001588:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158a:	682b      	ldr	r3, [r5, #0]
 800158c:	0799      	lsls	r1, r3, #30
 800158e:	f57f af50 	bpl.w	8001432 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff f809 	bl	80005a8 <HAL_GetTick>
 8001596:	1b80      	subs	r0, r0, r6
 8001598:	2802      	cmp	r0, #2
 800159a:	d9f6      	bls.n	800158a <HAL_RCC_OscConfig+0x16a>
 800159c:	e78d      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800159e:	6962      	ldr	r2, [r4, #20]
 80015a0:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <HAL_RCC_OscConfig+0x294>)
 80015a2:	b17a      	cbz	r2, 80015c4 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015a8:	f7fe fffe 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ac:	4d3f      	ldr	r5, [pc, #252]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80015ae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015b2:	079f      	lsls	r7, r3, #30
 80015b4:	f53f af41 	bmi.w	800143a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015b8:	f7fe fff6 	bl	80005a8 <HAL_GetTick>
 80015bc:	1b80      	subs	r0, r0, r6
 80015be:	2802      	cmp	r0, #2
 80015c0:	d9f6      	bls.n	80015b0 <HAL_RCC_OscConfig+0x190>
 80015c2:	e77a      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80015c4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80015c6:	f7fe ffef 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ca:	4d38      	ldr	r5, [pc, #224]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80015cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015d0:	0798      	lsls	r0, r3, #30
 80015d2:	f57f af32 	bpl.w	800143a <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d6:	f7fe ffe7 	bl	80005a8 <HAL_GetTick>
 80015da:	1b80      	subs	r0, r0, r6
 80015dc:	2802      	cmp	r0, #2
 80015de:	d9f6      	bls.n	80015ce <HAL_RCC_OscConfig+0x1ae>
 80015e0:	e76b      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e2:	4b32      	ldr	r3, [pc, #200]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 80015e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e6:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80015ea:	d128      	bne.n	800163e <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	9201      	str	r2, [sp, #4]
 80015ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015f4:	641a      	str	r2, [r3, #64]	; 0x40
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001600:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4d2d      	ldr	r5, [pc, #180]	; (80016b8 <HAL_RCC_OscConfig+0x298>)
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	05d9      	lsls	r1, r3, #23
 8001608:	d51b      	bpl.n	8001642 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800160a:	68a3      	ldr	r3, [r4, #8]
 800160c:	4d27      	ldr	r5, [pc, #156]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 800160e:	2b01      	cmp	r3, #1
 8001610:	d127      	bne.n	8001662 <HAL_RCC_OscConfig+0x242>
 8001612:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800161a:	f7fe ffc5 	bl	80005a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161e:	4d23      	ldr	r5, [pc, #140]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8001620:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001622:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001626:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001628:	079b      	lsls	r3, r3, #30
 800162a:	d539      	bpl.n	80016a0 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 800162c:	2e00      	cmp	r6, #0
 800162e:	f43f af08 	beq.w	8001442 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_RCC_OscConfig+0x28c>)
 8001634:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	e701      	b.n	8001442 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800163e:	2600      	movs	r6, #0
 8001640:	e7df      	b.n	8001602 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001642:	682b      	ldr	r3, [r5, #0]
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800164a:	f7fe ffad 	bl	80005a8 <HAL_GetTick>
 800164e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	682b      	ldr	r3, [r5, #0]
 8001652:	05da      	lsls	r2, r3, #23
 8001654:	d4d9      	bmi.n	800160a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001656:	f7fe ffa7 	bl	80005a8 <HAL_GetTick>
 800165a:	1bc0      	subs	r0, r0, r7
 800165c:	2802      	cmp	r0, #2
 800165e:	d9f7      	bls.n	8001650 <HAL_RCC_OscConfig+0x230>
 8001660:	e72b      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001662:	2b05      	cmp	r3, #5
 8001664:	d104      	bne.n	8001670 <HAL_RCC_OscConfig+0x250>
 8001666:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001668:	f043 0304 	orr.w	r3, r3, #4
 800166c:	672b      	str	r3, [r5, #112]	; 0x70
 800166e:	e7d0      	b.n	8001612 <HAL_RCC_OscConfig+0x1f2>
 8001670:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001672:	f022 0201 	bic.w	r2, r2, #1
 8001676:	672a      	str	r2, [r5, #112]	; 0x70
 8001678:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800167a:	f022 0204 	bic.w	r2, r2, #4
 800167e:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1ca      	bne.n	800161a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001684:	f7fe ff90 	bl	80005a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800168c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800168e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001690:	0798      	lsls	r0, r3, #30
 8001692:	d5cb      	bpl.n	800162c <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001694:	f7fe ff88 	bl	80005a8 <HAL_GetTick>
 8001698:	1bc0      	subs	r0, r0, r7
 800169a:	4540      	cmp	r0, r8
 800169c:	d9f7      	bls.n	800168e <HAL_RCC_OscConfig+0x26e>
 800169e:	e70c      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7fe ff82 	bl	80005a8 <HAL_GetTick>
 80016a4:	1bc0      	subs	r0, r0, r7
 80016a6:	4540      	cmp	r0, r8
 80016a8:	d9bd      	bls.n	8001626 <HAL_RCC_OscConfig+0x206>
 80016aa:	e706      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
 80016ac:	40023800 	.word	0x40023800
 80016b0:	42470000 	.word	0x42470000
 80016b4:	42470e80 	.word	0x42470e80
 80016b8:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016bc:	4d23      	ldr	r5, [pc, #140]	; (800174c <HAL_RCC_OscConfig+0x32c>)
 80016be:	68ab      	ldr	r3, [r5, #8]
 80016c0:	f003 030c 	and.w	r3, r3, #12
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	f43f aee0 	beq.w	800148a <HAL_RCC_OscConfig+0x6a>
 80016ca:	4e21      	ldr	r6, [pc, #132]	; (8001750 <HAL_RCC_OscConfig+0x330>)
 80016cc:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ce:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80016d0:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d2:	d12d      	bne.n	8001730 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80016d4:	f7fe ff68 	bl	80005a8 <HAL_GetTick>
 80016d8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016da:	682b      	ldr	r3, [r5, #0]
 80016dc:	0199      	lsls	r1, r3, #6
 80016de:	d421      	bmi.n	8001724 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e0:	6a22      	ldr	r2, [r4, #32]
 80016e2:	69e3      	ldr	r3, [r4, #28]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80016e8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80016ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80016ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016f2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80016f4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80016f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	4c14      	ldr	r4, [pc, #80]	; (800174c <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016fc:	0852      	lsrs	r2, r2, #1
 80016fe:	3a01      	subs	r2, #1
 8001700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001704:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001706:	2301      	movs	r3, #1
 8001708:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800170a:	f7fe ff4d 	bl	80005a8 <HAL_GetTick>
 800170e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001710:	6823      	ldr	r3, [r4, #0]
 8001712:	019a      	lsls	r2, r3, #6
 8001714:	f53f ae99 	bmi.w	800144a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001718:	f7fe ff46 	bl	80005a8 <HAL_GetTick>
 800171c:	1b40      	subs	r0, r0, r5
 800171e:	2802      	cmp	r0, #2
 8001720:	d9f6      	bls.n	8001710 <HAL_RCC_OscConfig+0x2f0>
 8001722:	e6ca      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001724:	f7fe ff40 	bl	80005a8 <HAL_GetTick>
 8001728:	1bc0      	subs	r0, r0, r7
 800172a:	2802      	cmp	r0, #2
 800172c:	d9d5      	bls.n	80016da <HAL_RCC_OscConfig+0x2ba>
 800172e:	e6c4      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8001730:	f7fe ff3a 	bl	80005a8 <HAL_GetTick>
 8001734:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001736:	682b      	ldr	r3, [r5, #0]
 8001738:	019b      	lsls	r3, r3, #6
 800173a:	f57f ae86 	bpl.w	800144a <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173e:	f7fe ff33 	bl	80005a8 <HAL_GetTick>
 8001742:	1b00      	subs	r0, r0, r4
 8001744:	2802      	cmp	r0, #2
 8001746:	d9f6      	bls.n	8001736 <HAL_RCC_OscConfig+0x316>
 8001748:	e6b7      	b.n	80014ba <HAL_RCC_OscConfig+0x9a>
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	42470060 	.word	0x42470060

08001754 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001754:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001756:	4604      	mov	r4, r0
 8001758:	2800      	cmp	r0, #0
 800175a:	d036      	beq.n	80017ca <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8001760:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001764:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001768:	b91b      	cbnz	r3, 8001772 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800176a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800176e:	f001 f9ab 	bl	8002ac8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001772:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001774:	68a0      	ldr	r0, [r4, #8]
 8001776:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001778:	2302      	movs	r3, #2
 800177a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800177e:	680b      	ldr	r3, [r1, #0]
 8001780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001784:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001786:	6863      	ldr	r3, [r4, #4]
 8001788:	4303      	orrs	r3, r0
 800178a:	68e0      	ldr	r0, [r4, #12]
 800178c:	4303      	orrs	r3, r0
 800178e:	6920      	ldr	r0, [r4, #16]
 8001790:	4303      	orrs	r3, r0
 8001792:	6960      	ldr	r0, [r4, #20]
 8001794:	4303      	orrs	r3, r0
 8001796:	69e0      	ldr	r0, [r4, #28]
 8001798:	4303      	orrs	r3, r0
 800179a:	6a20      	ldr	r0, [r4, #32]
 800179c:	4303      	orrs	r3, r0
 800179e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80017a0:	4303      	orrs	r3, r0
 80017a2:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80017a6:	4303      	orrs	r3, r0
 80017a8:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80017aa:	0c12      	lsrs	r2, r2, #16
 80017ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80017ae:	f002 0204 	and.w	r2, r2, #4
 80017b2:	431a      	orrs	r2, r3
 80017b4:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80017b6:	69cb      	ldr	r3, [r1, #28]
 80017b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017bc:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017be:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80017c0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80017c2:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80017c4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80017c8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017ca:	2001      	movs	r0, #1
}
 80017cc:	bd10      	pop	{r4, pc}
	...

080017d0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017d0:	6a03      	ldr	r3, [r0, #32]
 80017d2:	f023 0301 	bic.w	r3, r3, #1
 80017d6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80017d8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80017da:	6842      	ldr	r2, [r0, #4]
{
 80017dc:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80017de:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80017e0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80017e2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80017e6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80017e8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80017ea:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80017ee:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80017f0:	4c0c      	ldr	r4, [pc, #48]	; (8001824 <TIM_OC1_SetConfig+0x54>)
 80017f2:	42a0      	cmp	r0, r4
 80017f4:	d009      	beq.n	800180a <TIM_OC1_SetConfig+0x3a>
 80017f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80017fa:	42a0      	cmp	r0, r4
 80017fc:	d005      	beq.n	800180a <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017fe:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001800:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001802:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001804:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001806:	6203      	str	r3, [r0, #32]
} 
 8001808:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 800180a:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800180c:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 800180e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001812:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001814:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001816:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800181a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800181c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001820:	4322      	orrs	r2, r4
 8001822:	e7ec      	b.n	80017fe <TIM_OC1_SetConfig+0x2e>
 8001824:	40010000 	.word	0x40010000

08001828 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001828:	6a03      	ldr	r3, [r0, #32]
 800182a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800182e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001830:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001832:	6842      	ldr	r2, [r0, #4]
{
 8001834:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001836:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001838:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800183a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800183e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001840:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001842:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001846:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800184a:	4c0e      	ldr	r4, [pc, #56]	; (8001884 <TIM_OC3_SetConfig+0x5c>)
 800184c:	42a0      	cmp	r0, r4
 800184e:	d009      	beq.n	8001864 <TIM_OC3_SetConfig+0x3c>
 8001850:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001854:	42a0      	cmp	r0, r4
 8001856:	d005      	beq.n	8001864 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001858:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800185a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800185c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800185e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001860:	6203      	str	r3, [r0, #32]
}
 8001862:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001864:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001866:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800186c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001870:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001872:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001876:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800187c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001880:	e7ea      	b.n	8001858 <TIM_OC3_SetConfig+0x30>
 8001882:	bf00      	nop
 8001884:	40010000 	.word	0x40010000

08001888 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001888:	6a03      	ldr	r3, [r0, #32]
 800188a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800188e:	6203      	str	r3, [r0, #32]
{
 8001890:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001892:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001894:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001896:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001898:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800189a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800189e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80018a2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80018a4:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80018a8:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80018ac:	4d09      	ldr	r5, [pc, #36]	; (80018d4 <TIM_OC4_SetConfig+0x4c>)
 80018ae:	42a8      	cmp	r0, r5
 80018b0:	d009      	beq.n	80018c6 <TIM_OC4_SetConfig+0x3e>
 80018b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80018b6:	42a8      	cmp	r0, r5
 80018b8:	d005      	beq.n	80018c6 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018ba:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80018bc:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80018be:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80018c0:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018c2:	6204      	str	r4, [r0, #32]
}
 80018c4:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80018c6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80018c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80018cc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80018d0:	e7f3      	b.n	80018ba <TIM_OC4_SetConfig+0x32>
 80018d2:	bf00      	nop
 80018d4:	40010000 	.word	0x40010000

080018d8 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018d8:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80018da:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 80018dc:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80018de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 80018e2:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80018e4:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80018e6:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 80018e8:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80018ec:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80018ee:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80018f0:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 80018f2:	d021      	beq.n	8001938 <TIM_SlaveTimer_SetConfig+0x60>
 80018f4:	d802      	bhi.n	80018fc <TIM_SlaveTimer_SetConfig+0x24>
 80018f6:	2840      	cmp	r0, #64	; 0x40
 80018f8:	d010      	beq.n	800191c <TIM_SlaveTimer_SetConfig+0x44>
 80018fa:	bd30      	pop	{r4, r5, pc}
 80018fc:	2860      	cmp	r0, #96	; 0x60
 80018fe:	d02d      	beq.n	800195c <TIM_SlaveTimer_SetConfig+0x84>
 8001900:	2870      	cmp	r0, #112	; 0x70
 8001902:	d13d      	bne.n	8001980 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001904:	68ca      	ldr	r2, [r1, #12]
 8001906:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8001908:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800190a:	6909      	ldr	r1, [r1, #16]
 800190c:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800190e:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001912:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001916:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 800191c:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800191e:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001920:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8001928:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800192a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800192e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 8001934:	6218      	str	r0, [r3, #32]
    break;
 8001936:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001938:	6888      	ldr	r0, [r1, #8]
 800193a:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 800193c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800193e:	6a1c      	ldr	r4, [r3, #32]
 8001940:	f024 0401 	bic.w	r4, r4, #1
 8001944:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001946:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001948:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800194c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001950:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001954:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001958:	6219      	str	r1, [r3, #32]
 800195a:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800195c:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800195e:	688c      	ldr	r4, [r1, #8]
 8001960:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001962:	f020 0010 	bic.w	r0, r0, #16
 8001966:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001968:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800196a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800196c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001970:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001974:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001978:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800197c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800197e:	621a      	str	r2, [r3, #32]
 8001980:	bd30      	pop	{r4, r5, pc}

08001982 <HAL_TIM_OC_MspInit>:
 8001982:	4770      	bx	lr

08001984 <HAL_TIM_IC_MspInit>:
 8001984:	4770      	bx	lr

08001986 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001986:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800198a:	2b01      	cmp	r3, #1
{
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001992:	d01c      	beq.n	80019ce <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001994:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001998:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800199a:	2201      	movs	r2, #1
 800199c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80019a0:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019a2:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80019a6:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80019aa:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80019ac:	680a      	ldr	r2, [r1, #0]
 80019ae:	2a40      	cmp	r2, #64	; 0x40
 80019b0:	d079      	beq.n	8001aa6 <HAL_TIM_ConfigClockSource+0x120>
 80019b2:	d819      	bhi.n	80019e8 <HAL_TIM_ConfigClockSource+0x62>
 80019b4:	2a10      	cmp	r2, #16
 80019b6:	f000 8093 	beq.w	8001ae0 <HAL_TIM_ConfigClockSource+0x15a>
 80019ba:	d80a      	bhi.n	80019d2 <HAL_TIM_ConfigClockSource+0x4c>
 80019bc:	2a00      	cmp	r2, #0
 80019be:	f000 8089 	beq.w	8001ad4 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80019c8:	2300      	movs	r3, #0
 80019ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80019ce:	4618      	mov	r0, r3
}
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80019d2:	2a20      	cmp	r2, #32
 80019d4:	f000 808a 	beq.w	8001aec <HAL_TIM_ConfigClockSource+0x166>
 80019d8:	2a30      	cmp	r2, #48	; 0x30
 80019da:	d1f2      	bne.n	80019c2 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 80019dc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019e2:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80019e6:	e036      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80019e8:	2a70      	cmp	r2, #112	; 0x70
 80019ea:	d036      	beq.n	8001a5a <HAL_TIM_ConfigClockSource+0xd4>
 80019ec:	d81b      	bhi.n	8001a26 <HAL_TIM_ConfigClockSource+0xa0>
 80019ee:	2a50      	cmp	r2, #80	; 0x50
 80019f0:	d042      	beq.n	8001a78 <HAL_TIM_ConfigClockSource+0xf2>
 80019f2:	2a60      	cmp	r2, #96	; 0x60
 80019f4:	d1e5      	bne.n	80019c2 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019f6:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80019f8:	684d      	ldr	r5, [r1, #4]
 80019fa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019fc:	f024 0410 	bic.w	r4, r4, #16
 8001a00:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a02:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001a04:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a06:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a0e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a12:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001a16:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a18:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001a1a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a1c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001a20:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001a24:	e017      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001a26:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001a2a:	d011      	beq.n	8001a50 <HAL_TIM_ConfigClockSource+0xca>
 8001a2c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a30:	d1c7      	bne.n	80019c2 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001a32:	688a      	ldr	r2, [r1, #8]
 8001a34:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001a36:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001a38:	68c9      	ldr	r1, [r1, #12]
 8001a3a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a3c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001a40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a44:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001a46:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a4e:	e002      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	e7b3      	b.n	80019c2 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001a5a:	688a      	ldr	r2, [r1, #8]
 8001a5c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001a5e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001a60:	68c9      	ldr	r1, [r1, #12]
 8001a62:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a64:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001a68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a6c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001a6e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001a70:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a72:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001a76:	e7ee      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001a78:	684c      	ldr	r4, [r1, #4]
 8001a7a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a7c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a7e:	6a1d      	ldr	r5, [r3, #32]
 8001a80:	f025 0501 	bic.w	r5, r5, #1
 8001a84:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a86:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a88:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a8c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a90:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001a94:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a98:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001a9a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001aa0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001aa4:	e7d7      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001aa6:	684c      	ldr	r4, [r1, #4]
 8001aa8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001aaa:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aac:	6a1d      	ldr	r5, [r3, #32]
 8001aae:	f025 0501 	bic.w	r5, r5, #1
 8001ab2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001ab4:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ab6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001aba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001abe:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001ac2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ac6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001ac8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001aca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ace:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001ad2:	e7c0      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001ad4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ad6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ada:	f042 0207 	orr.w	r2, r2, #7
 8001ade:	e7ba      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001ae0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ae2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ae6:	f042 0217 	orr.w	r2, r2, #23
 8001aea:	e7b4      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001aec:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001aee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001af2:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001af6:	e7ae      	b.n	8001a56 <HAL_TIM_ConfigClockSource+0xd0>

08001af8 <HAL_TIM_SlaveConfigSynchronization>:
{
 8001af8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001afa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001afe:	2b01      	cmp	r3, #1
{
 8001b00:	4604      	mov	r4, r0
 8001b02:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001b06:	d015      	beq.n	8001b34 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8001b08:	2501      	movs	r5, #1
 8001b0a:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001b0e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8001b12:	f7ff fee1 	bl	80018d8 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b1e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001b20:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8001b22:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b28:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001b2a:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8001b2e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8001b32:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001b34:	4618      	mov	r0, r3
} 
 8001b36:	bd38      	pop	{r3, r4, r5, pc}

08001b38 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b38:	4a2e      	ldr	r2, [pc, #184]	; (8001bf4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001b3a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001b3c:	4290      	cmp	r0, r2
 8001b3e:	d012      	beq.n	8001b66 <TIM_Base_SetConfig+0x2e>
 8001b40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b44:	d00f      	beq.n	8001b66 <TIM_Base_SetConfig+0x2e>
 8001b46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001b4a:	4290      	cmp	r0, r2
 8001b4c:	d00b      	beq.n	8001b66 <TIM_Base_SetConfig+0x2e>
 8001b4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b52:	4290      	cmp	r0, r2
 8001b54:	d007      	beq.n	8001b66 <TIM_Base_SetConfig+0x2e>
 8001b56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b5a:	4290      	cmp	r0, r2
 8001b5c:	d003      	beq.n	8001b66 <TIM_Base_SetConfig+0x2e>
 8001b5e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001b62:	4290      	cmp	r0, r2
 8001b64:	d11d      	bne.n	8001ba2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001b66:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001b6c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b6e:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <TIM_Base_SetConfig+0xbc>)
 8001b70:	4290      	cmp	r0, r2
 8001b72:	d104      	bne.n	8001b7e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b74:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	e028      	b.n	8001bd0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001b7e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001b82:	d0f7      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001b84:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <TIM_Base_SetConfig+0xc0>)
 8001b86:	4290      	cmp	r0, r2
 8001b88:	d0f4      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001b8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b8e:	4290      	cmp	r0, r2
 8001b90:	d0f0      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001b92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001b96:	4290      	cmp	r0, r2
 8001b98:	d0ec      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001b9a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001b9e:	4290      	cmp	r0, r2
 8001ba0:	d0e8      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001ba2:	4a16      	ldr	r2, [pc, #88]	; (8001bfc <TIM_Base_SetConfig+0xc4>)
 8001ba4:	4290      	cmp	r0, r2
 8001ba6:	d0e5      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001ba8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bac:	4290      	cmp	r0, r2
 8001bae:	d0e1      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001bb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bb4:	4290      	cmp	r0, r2
 8001bb6:	d0dd      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001bb8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001bbc:	4290      	cmp	r0, r2
 8001bbe:	d0d9      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001bc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bc4:	4290      	cmp	r0, r2
 8001bc6:	d0d5      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
 8001bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001bcc:	4290      	cmp	r0, r2
 8001bce:	d0d1      	beq.n	8001b74 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001bd0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bd2:	688b      	ldr	r3, [r1, #8]
 8001bd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001bd6:	680b      	ldr	r3, [r1, #0]
 8001bd8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <TIM_Base_SetConfig+0xbc>)
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d006      	beq.n	8001bee <TIM_Base_SetConfig+0xb6>
 8001be0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001be4:	4298      	cmp	r0, r3
 8001be6:	d002      	beq.n	8001bee <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001be8:	2301      	movs	r3, #1
 8001bea:	6143      	str	r3, [r0, #20]
}
 8001bec:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001bee:	690b      	ldr	r3, [r1, #16]
 8001bf0:	6303      	str	r3, [r0, #48]	; 0x30
 8001bf2:	e7f9      	b.n	8001be8 <TIM_Base_SetConfig+0xb0>
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40000400 	.word	0x40000400
 8001bfc:	40014000 	.word	0x40014000

08001c00 <HAL_TIM_Base_Init>:
{ 
 8001c00:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c02:	4604      	mov	r4, r0
 8001c04:	b1a0      	cbz	r0, 8001c30 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c06:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c0e:	b91b      	cbnz	r3, 8001c18 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c10:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001c14:	f000 ff8c 	bl	8002b30 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c1e:	6820      	ldr	r0, [r4, #0]
 8001c20:	1d21      	adds	r1, r4, #4
 8001c22:	f7ff ff89 	bl	8001b38 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c26:	2301      	movs	r3, #1
 8001c28:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c30:	2001      	movs	r0, #1
}
 8001c32:	bd10      	pop	{r4, pc}

08001c34 <HAL_TIM_OC_Init>:
{
 8001c34:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c36:	4604      	mov	r4, r0
 8001c38:	b1a0      	cbz	r0, 8001c64 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c3a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c42:	b91b      	cbnz	r3, 8001c4c <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c44:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8001c48:	f7ff fe9b 	bl	8001982 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8001c52:	6820      	ldr	r0, [r4, #0]
 8001c54:	1d21      	adds	r1, r4, #4
 8001c56:	f7ff ff6f 	bl	8001b38 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001c60:	2000      	movs	r0, #0
 8001c62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
}
 8001c66:	bd10      	pop	{r4, pc}

08001c68 <HAL_TIM_IC_Init>:
{
 8001c68:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	b1a0      	cbz	r0, 8001c98 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001c72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c76:	b91b      	cbnz	r3, 8001c80 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c78:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8001c7c:	f7ff fe82 	bl	8001984 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 8001c80:	2302      	movs	r3, #2
 8001c82:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001c86:	6820      	ldr	r0, [r4, #0]
 8001c88:	1d21      	adds	r1, r4, #4
 8001c8a:	f7ff ff55 	bl	8001b38 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001c94:	2000      	movs	r0, #0
 8001c96:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
}
 8001c9a:	bd10      	pop	{r4, pc}

08001c9c <TIM_TI1_SetConfig>:
{
 8001c9c:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c9e:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001ca0:	4e1a      	ldr	r6, [pc, #104]	; (8001d0c <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ca2:	f024 0401 	bic.w	r4, r4, #1
 8001ca6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001caa:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001cac:	42b0      	cmp	r0, r6
 8001cae:	f024 0403 	bic.w	r4, r4, #3
 8001cb2:	d01a      	beq.n	8001cea <TIM_TI1_SetConfig+0x4e>
 8001cb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cb8:	d017      	beq.n	8001cea <TIM_TI1_SetConfig+0x4e>
 8001cba:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001cbe:	42b0      	cmp	r0, r6
 8001cc0:	d013      	beq.n	8001cea <TIM_TI1_SetConfig+0x4e>
 8001cc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001cc6:	42b0      	cmp	r0, r6
 8001cc8:	d00f      	beq.n	8001cea <TIM_TI1_SetConfig+0x4e>
 8001cca:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001cce:	42b0      	cmp	r0, r6
 8001cd0:	d00b      	beq.n	8001cea <TIM_TI1_SetConfig+0x4e>
 8001cd2:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8001cd6:	42b0      	cmp	r0, r6
 8001cd8:	d007      	beq.n	8001cea <TIM_TI1_SetConfig+0x4e>
 8001cda:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001cde:	42b0      	cmp	r0, r6
 8001ce0:	d003      	beq.n	8001cea <TIM_TI1_SetConfig+0x4e>
 8001ce2:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001ce6:	42b0      	cmp	r0, r6
 8001ce8:	d10d      	bne.n	8001d06 <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8001cea:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cec:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cf2:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cf4:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001cf8:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001cfc:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001cfe:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001d00:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d02:	6201      	str	r1, [r0, #32]
}
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001d06:	f044 0201 	orr.w	r2, r4, #1
 8001d0a:	e7ef      	b.n	8001cec <TIM_TI1_SetConfig+0x50>
 8001d0c:	40010000 	.word	0x40010000

08001d10 <HAL_TIM_IC_ConfigChannel>:
{
 8001d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001d12:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001d16:	2b01      	cmp	r3, #1
{
 8001d18:	4604      	mov	r4, r0
 8001d1a:	460d      	mov	r5, r1
 8001d1c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001d20:	d019      	beq.n	8001d56 <HAL_TIM_IC_ConfigChannel+0x46>
 8001d22:	2301      	movs	r3, #1
 8001d24:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8001d2c:	b9a2      	cbnz	r2, 8001d58 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001d2e:	68cb      	ldr	r3, [r1, #12]
 8001d30:	6820      	ldr	r0, [r4, #0]
 8001d32:	c906      	ldmia	r1, {r1, r2}
 8001d34:	f7ff ffb2 	bl	8001c9c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d38:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d3a:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001d3c:	699a      	ldr	r2, [r3, #24]
 8001d3e:	f022 020c 	bic.w	r2, r2, #12
 8001d42:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d4a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d4c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001d52:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001d58:	2a04      	cmp	r2, #4
 8001d5a:	688e      	ldr	r6, [r1, #8]
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	68e8      	ldr	r0, [r5, #12]
 8001d60:	c982      	ldmia	r1, {r1, r7}
 8001d62:	d11f      	bne.n	8001da4 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d64:	6a1a      	ldr	r2, [r3, #32]
 8001d66:	f022 0210 	bic.w	r2, r2, #16
 8001d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d6c:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001d6e:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001d70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001d74:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d78:	0300      	lsls	r0, r0, #12
 8001d7a:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d7c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d80:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001d82:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d84:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d88:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001d8c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8001d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d90:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d98:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001da0:	619e      	str	r6, [r3, #24]
 8001da2:	e7d2      	b.n	8001d4a <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001da4:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001da6:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001da8:	d11c      	bne.n	8001de4 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001db0:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001db2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001db4:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001db8:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001dba:	0100      	lsls	r0, r0, #4
 8001dbc:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001dbe:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dc2:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001dc4:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dc6:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001dca:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001dce:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8001dd0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001dd2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	f022 020c 	bic.w	r2, r2, #12
 8001dda:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001de0:	61de      	str	r6, [r3, #28]
 8001de2:	e7b2      	b.n	8001d4a <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001de8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001dea:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001dec:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001dee:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001df2:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001df6:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001df8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001dfc:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001dfe:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001e00:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e02:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001e06:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001e0a:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8001e0c:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001e0e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001e10:	69da      	ldr	r2, [r3, #28]
 8001e12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e16:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001e18:	69da      	ldr	r2, [r3, #28]
 8001e1a:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001e1e:	e7df      	b.n	8001de0 <HAL_TIM_IC_ConfigChannel+0xd0>

08001e20 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e20:	6a03      	ldr	r3, [r0, #32]
 8001e22:	f023 0310 	bic.w	r3, r3, #16
 8001e26:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001e28:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8001e2a:	6842      	ldr	r2, [r0, #4]
{
 8001e2c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8001e2e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e30:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e32:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e36:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e3a:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001e3c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e40:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e44:	4c0d      	ldr	r4, [pc, #52]	; (8001e7c <TIM_OC2_SetConfig+0x5c>)
 8001e46:	42a0      	cmp	r0, r4
 8001e48:	d009      	beq.n	8001e5e <TIM_OC2_SetConfig+0x3e>
 8001e4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001e4e:	42a0      	cmp	r0, r4
 8001e50:	d005      	beq.n	8001e5e <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8001e52:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e54:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001e56:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001e58:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001e5a:	6203      	str	r3, [r0, #32]
}
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e5e:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e60:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e66:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e6a:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e70:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e76:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8001e7a:	e7ea      	b.n	8001e52 <TIM_OC2_SetConfig+0x32>
 8001e7c:	40010000 	.word	0x40010000

08001e80 <HAL_TIM_OC_ConfigChannel>:
{
 8001e80:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 8001e82:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e86:	2b01      	cmp	r3, #1
{
 8001e88:	4604      	mov	r4, r0
 8001e8a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8001e8e:	d018      	beq.n	8001ec2 <HAL_TIM_OC_ConfigChannel+0x42>
 8001e90:	2301      	movs	r3, #1
 8001e92:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001e96:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8001e9a:	461d      	mov	r5, r3
  switch (Channel)
 8001e9c:	2a0c      	cmp	r2, #12
 8001e9e:	d80b      	bhi.n	8001eb8 <HAL_TIM_OC_ConfigChannel+0x38>
 8001ea0:	e8df f002 	tbb	[pc, r2]
 8001ea4:	0a0a0a07 	.word	0x0a0a0a07
 8001ea8:	0a0a0a10 	.word	0x0a0a0a10
 8001eac:	0a0a0a14 	.word	0x0a0a0a14
 8001eb0:	18          	.byte	0x18
 8001eb1:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eb2:	6820      	ldr	r0, [r4, #0]
 8001eb4:	f7ff fc8c 	bl	80017d0 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 8001eb8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001eba:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 8001ebe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001ec2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ec4:	6820      	ldr	r0, [r4, #0]
 8001ec6:	f7ff ffab 	bl	8001e20 <TIM_OC2_SetConfig>
    break;
 8001eca:	e7f5      	b.n	8001eb8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ecc:	6820      	ldr	r0, [r4, #0]
 8001ece:	f7ff fcab 	bl	8001828 <TIM_OC3_SetConfig>
    break;
 8001ed2:	e7f1      	b.n	8001eb8 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ed4:	6820      	ldr	r0, [r4, #0]
 8001ed6:	f7ff fcd7 	bl	8001888 <TIM_OC4_SetConfig>
    break;
 8001eda:	e7ed      	b.n	8001eb8 <HAL_TIM_OC_ConfigChannel+0x38>

08001edc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001edc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ee0:	2b01      	cmp	r3, #1
{
 8001ee2:	b510      	push	{r4, lr}
 8001ee4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001ee8:	d018      	beq.n	8001f1c <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001eea:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001eee:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001ef0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ef2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001ef4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001ef6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001efa:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4322      	orrs	r2, r4
 8001f00:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f08:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001f10:	2301      	movs	r3, #1
 8001f12:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001f16:	2300      	movs	r3, #0
 8001f18:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001f1c:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001f1e:	bd10      	pop	{r4, pc}

08001f20 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001f20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d01f      	beq.n	8001f68 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001f28:	68cb      	ldr	r3, [r1, #12]
 8001f2a:	688a      	ldr	r2, [r1, #8]
 8001f2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f30:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001f32:	684a      	ldr	r2, [r1, #4]
 8001f34:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f38:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001f3a:	680a      	ldr	r2, [r1, #0]
 8001f3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f40:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001f42:	690a      	ldr	r2, [r1, #16]
 8001f44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f48:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001f4a:	694a      	ldr	r2, [r1, #20]
 8001f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f50:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f52:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001f54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f58:	4313      	orrs	r3, r2
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001f5a:	6802      	ldr	r2, [r0, #0]
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001f64:	4618      	mov	r0, r3
 8001f66:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001f68:	2002      	movs	r0, #2
}
 8001f6a:	4770      	bx	lr

08001f6c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001f70:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f72:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001f74:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f76:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001f7c:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001f7e:	6133      	str	r3, [r6, #16]
{
 8001f80:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f82:	6883      	ldr	r3, [r0, #8]
 8001f84:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001f86:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f88:	4303      	orrs	r3, r0
 8001f8a:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f8c:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f90:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001f92:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f96:	430b      	orrs	r3, r1
 8001f98:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001f9a:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001f9c:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001f9e:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001fa4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fa6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001faa:	6173      	str	r3, [r6, #20]
 8001fac:	4b7a      	ldr	r3, [pc, #488]	; (8002198 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fae:	d17c      	bne.n	80020aa <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001fb0:	429e      	cmp	r6, r3
 8001fb2:	d003      	beq.n	8001fbc <UART_SetConfig+0x50>
 8001fb4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fb8:	429e      	cmp	r6, r3
 8001fba:	d144      	bne.n	8002046 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001fbc:	f7ff f9d8 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 8001fc0:	2519      	movs	r5, #25
 8001fc2:	fb05 f300 	mul.w	r3, r5, r0
 8001fc6:	6860      	ldr	r0, [r4, #4]
 8001fc8:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001fcc:	0040      	lsls	r0, r0, #1
 8001fce:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fd2:	fbb3 f3f9 	udiv	r3, r3, r9
 8001fd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001fda:	f7ff f9c9 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 8001fde:	6863      	ldr	r3, [r4, #4]
 8001fe0:	4368      	muls	r0, r5
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fbb0 f7f3 	udiv	r7, r0, r3
 8001fe8:	f7ff f9c2 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 8001fec:	6863      	ldr	r3, [r4, #4]
 8001fee:	4368      	muls	r0, r5
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff6:	fbb3 f3f9 	udiv	r3, r3, r9
 8001ffa:	fb09 7313 	mls	r3, r9, r3, r7
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	3332      	adds	r3, #50	; 0x32
 8002002:	fbb3 f3f9 	udiv	r3, r3, r9
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800200c:	f7ff f9b0 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 8002010:	6862      	ldr	r2, [r4, #4]
 8002012:	4368      	muls	r0, r5
 8002014:	0052      	lsls	r2, r2, #1
 8002016:	fbb0 faf2 	udiv	sl, r0, r2
 800201a:	f7ff f9a9 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800201e:	6863      	ldr	r3, [r4, #4]
 8002020:	4368      	muls	r0, r5
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fbb0 f3f3 	udiv	r3, r0, r3
 8002028:	fbb3 f3f9 	udiv	r3, r3, r9
 800202c:	fb09 a313 	mls	r3, r9, r3, sl
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	3332      	adds	r3, #50	; 0x32
 8002034:	fbb3 f3f9 	udiv	r3, r3, r9
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800203e:	443b      	add	r3, r7
 8002040:	60b3      	str	r3, [r6, #8]
 8002042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002046:	f7ff f983 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 800204a:	2519      	movs	r5, #25
 800204c:	fb05 f300 	mul.w	r3, r5, r0
 8002050:	6860      	ldr	r0, [r4, #4]
 8002052:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002056:	0040      	lsls	r0, r0, #1
 8002058:	fbb3 f3f0 	udiv	r3, r3, r0
 800205c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002060:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002064:	f7ff f974 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002068:	6863      	ldr	r3, [r4, #4]
 800206a:	4368      	muls	r0, r5
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fbb0 f7f3 	udiv	r7, r0, r3
 8002072:	f7ff f96d 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002076:	6863      	ldr	r3, [r4, #4]
 8002078:	4368      	muls	r0, r5
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002080:	fbb3 f3f9 	udiv	r3, r3, r9
 8002084:	fb09 7313 	mls	r3, r9, r3, r7
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	3332      	adds	r3, #50	; 0x32
 800208c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002096:	f7ff f95b 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 800209a:	6862      	ldr	r2, [r4, #4]
 800209c:	4368      	muls	r0, r5
 800209e:	0052      	lsls	r2, r2, #1
 80020a0:	fbb0 faf2 	udiv	sl, r0, r2
 80020a4:	f7ff f954 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 80020a8:	e7b9      	b.n	800201e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80020aa:	429e      	cmp	r6, r3
 80020ac:	d002      	beq.n	80020b4 <UART_SetConfig+0x148>
 80020ae:	4b3b      	ldr	r3, [pc, #236]	; (800219c <UART_SetConfig+0x230>)
 80020b0:	429e      	cmp	r6, r3
 80020b2:	d140      	bne.n	8002136 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020b4:	f7ff f95c 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 80020b8:	6867      	ldr	r7, [r4, #4]
 80020ba:	2519      	movs	r5, #25
 80020bc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020c0:	fb05 f300 	mul.w	r3, r5, r0
 80020c4:	00bf      	lsls	r7, r7, #2
 80020c6:	fbb3 f3f7 	udiv	r3, r3, r7
 80020ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80020ce:	011f      	lsls	r7, r3, #4
 80020d0:	f7ff f94e 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 80020d4:	6863      	ldr	r3, [r4, #4]
 80020d6:	4368      	muls	r0, r5
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	fbb0 f8f3 	udiv	r8, r0, r3
 80020de:	f7ff f947 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 80020e2:	6863      	ldr	r3, [r4, #4]
 80020e4:	4368      	muls	r0, r5
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80020f0:	fb09 8313 	mls	r3, r9, r3, r8
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	3332      	adds	r3, #50	; 0x32
 80020f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80020fc:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002100:	f7ff f936 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
 8002104:	6862      	ldr	r2, [r4, #4]
 8002106:	4368      	muls	r0, r5
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	fbb0 faf2 	udiv	sl, r0, r2
 800210e:	f7ff f92f 	bl	8001370 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002112:	6863      	ldr	r3, [r4, #4]
 8002114:	4368      	muls	r0, r5
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	fbb0 f3f3 	udiv	r3, r0, r3
 800211c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002120:	fb09 a313 	mls	r3, r9, r3, sl
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	3332      	adds	r3, #50	; 0x32
 8002128:	fbb3 f3f9 	udiv	r3, r3, r9
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	ea43 0308 	orr.w	r3, r3, r8
 8002134:	e783      	b.n	800203e <UART_SetConfig+0xd2>
 8002136:	f7ff f90b 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 800213a:	6867      	ldr	r7, [r4, #4]
 800213c:	2519      	movs	r5, #25
 800213e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002142:	fb05 f300 	mul.w	r3, r5, r0
 8002146:	00bf      	lsls	r7, r7, #2
 8002148:	fbb3 f3f7 	udiv	r3, r3, r7
 800214c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002150:	011f      	lsls	r7, r3, #4
 8002152:	f7ff f8fd 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002156:	6863      	ldr	r3, [r4, #4]
 8002158:	4368      	muls	r0, r5
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	fbb0 f8f3 	udiv	r8, r0, r3
 8002160:	f7ff f8f6 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002164:	6863      	ldr	r3, [r4, #4]
 8002166:	4368      	muls	r0, r5
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	fbb0 f3f3 	udiv	r3, r0, r3
 800216e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002172:	fb09 8313 	mls	r3, r9, r3, r8
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	3332      	adds	r3, #50	; 0x32
 800217a:	fbb3 f3f9 	udiv	r3, r3, r9
 800217e:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002182:	f7ff f8e5 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002186:	6862      	ldr	r2, [r4, #4]
 8002188:	4368      	muls	r0, r5
 800218a:	0092      	lsls	r2, r2, #2
 800218c:	fbb0 faf2 	udiv	sl, r0, r2
 8002190:	f7ff f8de 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002194:	e7bd      	b.n	8002112 <UART_SetConfig+0x1a6>
 8002196:	bf00      	nop
 8002198:	40011000 	.word	0x40011000
 800219c:	40011400 	.word	0x40011400

080021a0 <HAL_UART_Init>:
{
 80021a0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80021a2:	4604      	mov	r4, r0
 80021a4:	b340      	cbz	r0, 80021f8 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80021a6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80021aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021ae:	b91b      	cbnz	r3, 80021b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80021b0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80021b4:	f000 fdae 	bl	8002d14 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80021b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021ba:	2324      	movs	r3, #36	; 0x24
 80021bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021c0:	68d3      	ldr	r3, [r2, #12]
 80021c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021c6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80021c8:	4620      	mov	r0, r4
 80021ca:	f7ff fecf 	bl	8001f6c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021e6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e8:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80021ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ec:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80021ee:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80021f2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80021f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021f8:	2001      	movs	r0, #1
}
 80021fa:	bd10      	pop	{r4, pc}

080021fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021fc:	b510      	push	{r4, lr}
 80021fe:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	2200      	movs	r2, #0
 8002202:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <SystemClock_Config+0xa4>)
 8002204:	9200      	str	r2, [sp, #0]
 8002206:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002208:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800220c:	6419      	str	r1, [r3, #64]	; 0x40
 800220e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002210:	4924      	ldr	r1, [pc, #144]	; (80022a4 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800221a:	9201      	str	r2, [sp, #4]
 800221c:	680b      	ldr	r3, [r1, #0]
 800221e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002222:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002226:	600b      	str	r3, [r1, #0]
 8002228:	680b      	ldr	r3, [r1, #0]
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800222a:	920e      	str	r2, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800222c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002234:	2301      	movs	r3, #1
 8002236:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002238:	2310      	movs	r3, #16
 800223a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800223c:	2308      	movs	r3, #8
 800223e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002240:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002242:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002244:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002246:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002248:	2303      	movs	r3, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800224a:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800224c:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800224e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002250:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002252:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002254:	f7ff f8e4 	bl	8001420 <HAL_RCC_OscConfig>
 8002258:	b100      	cbz	r0, 800225c <SystemClock_Config+0x60>
 800225a:	e7fe      	b.n	800225a <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800225c:	230f      	movs	r3, #15
 800225e:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002260:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002266:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002268:	4621      	mov	r1, r4
 800226a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800226c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800226e:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002270:	f7fe ffce 	bl	8001210 <HAL_RCC_ClockConfig>
 8002274:	4604      	mov	r4, r0
 8002276:	b100      	cbz	r0, 800227a <SystemClock_Config+0x7e>
 8002278:	e7fe      	b.n	8002278 <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800227a:	f7ff f863 	bl	8001344 <HAL_RCC_GetHCLKFreq>
 800227e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002282:	fbb0 f0f3 	udiv	r0, r0, r3
 8002286:	f7fe fe53 	bl	8000f30 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800228a:	2004      	movs	r0, #4
 800228c:	f7fe fe66 	bl	8000f5c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002290:	4622      	mov	r2, r4
 8002292:	4621      	mov	r1, r4
 8002294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002298:	f7fe fe0a 	bl	8000eb0 <HAL_NVIC_SetPriority>
}
 800229c:	b014      	add	sp, #80	; 0x50
 800229e:	bd10      	pop	{r4, pc}
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40007000 	.word	0x40007000

080022a8 <CAN_Config>:

}

/* USER CODE BEGIN 4 */
void CAN_Config(void)
{
 80022a8:	b530      	push	{r4, r5, lr}
  CAN_FilterTypeDef  sFilterConfig;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 9;
 80022aa:	481d      	ldr	r0, [pc, #116]	; (8002320 <CAN_Config+0x78>)
  hcan1.Instance = CAN1;
 80022ac:	4c1d      	ldr	r4, [pc, #116]	; (8002324 <CAN_Config+0x7c>)
  hcan1.Init.Prescaler = 9;
 80022ae:	2309      	movs	r3, #9
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80022b0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
  hcan1.Init.Prescaler = 9;
 80022b4:	e884 0009 	stmia.w	r4, {r0, r3}
{
 80022b8:	b08b      	sub	sp, #44	; 0x2c
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80022ba:	2300      	movs	r3, #0
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80022bc:	6122      	str	r2, [r4, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = ENABLE;
 80022be:	2501      	movs	r5, #1
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80022c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80022c4:	4620      	mov	r0, r4
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80022c6:	60a3      	str	r3, [r4, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022c8:	60e3      	str	r3, [r4, #12]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80022ca:	6162      	str	r2, [r4, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80022cc:	7623      	strb	r3, [r4, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80022ce:	7663      	strb	r3, [r4, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80022d0:	76a3      	strb	r3, [r4, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80022d2:	76e5      	strb	r5, [r4, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80022d4:	7723      	strb	r3, [r4, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80022d6:	7763      	strb	r3, [r4, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80022d8:	f7fe fabc 	bl	8000854 <HAL_CAN_Init>
 80022dc:	b100      	cbz	r0, 80022e0 <CAN_Config+0x38>
 80022de:	e7fe      	b.n	80022de <CAN_Config+0x36>
  {
	_Error_Handler(__FILE__, __LINE__);
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 80022e0:	9005      	str	r0, [sp, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022e2:	9006      	str	r0, [sp, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
  sFilterConfig.FilterIdHigh = 0x0000;
 80022e4:	9000      	str	r0, [sp, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 80022e6:	9001      	str	r0, [sp, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 80022e8:	9002      	str	r0, [sp, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 80022ea:	9003      	str	r0, [sp, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022ec:	9004      	str	r0, [sp, #16]
  sFilterConfig.FilterActivation = ENABLE;
  sFilterConfig.SlaveStartFilterBank = 14;
 80022ee:	230e      	movs	r3, #14

  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80022f0:	4669      	mov	r1, sp
 80022f2:	4620      	mov	r0, r4
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022f4:	9507      	str	r5, [sp, #28]
  sFilterConfig.FilterActivation = ENABLE;
 80022f6:	9508      	str	r5, [sp, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 80022f8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80022fa:	f7fe fb27 	bl	800094c <HAL_CAN_ConfigFilter>
 80022fe:	b100      	cbz	r0, 8002302 <CAN_Config+0x5a>
 8002300:	e7fe      	b.n	8002300 <CAN_Config+0x58>
    /* Filter configuration Error */
	  _Error_Handler(__FILE__, __LINE__);
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8002302:	4620      	mov	r0, r4
 8002304:	f7fe fbac 	bl	8000a60 <HAL_CAN_Start>
 8002308:	b100      	cbz	r0, 800230c <CAN_Config+0x64>
 800230a:	e7fe      	b.n	800230a <CAN_Config+0x62>
//    /* Notification Error */
//	  _Error_Handler(__FILE__, __LINE__);
//  }

  /*##-5- Configure Transmission process #####################################*/
  TxHeader.StdId = 0x01;
 800230c:	4b06      	ldr	r3, [pc, #24]	; (8002328 <CAN_Config+0x80>)
  TxHeader.ExtId = 0x01; // not needed
  TxHeader.RTR = CAN_RTR_DATA;
  TxHeader.IDE = CAN_ID_STD;
  TxHeader.DLC = 8;
 800230e:	2208      	movs	r2, #8
  TxHeader.StdId = 0x01;
 8002310:	601d      	str	r5, [r3, #0]
  TxHeader.ExtId = 0x01; // not needed
 8002312:	605d      	str	r5, [r3, #4]
  TxHeader.RTR = CAN_RTR_DATA;
 8002314:	60d8      	str	r0, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8002316:	6098      	str	r0, [r3, #8]
  TxHeader.DLC = 8;
 8002318:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 800231a:	7518      	strb	r0, [r3, #20]
}
 800231c:	b00b      	add	sp, #44	; 0x2c
 800231e:	bd30      	pop	{r4, r5, pc}
 8002320:	40006400 	.word	0x40006400
 8002324:	2000046c 	.word	0x2000046c
 8002328:	20000494 	.word	0x20000494

0800232c <main>:
{
 800232c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002330:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8002332:	f7fe f913 	bl	800055c <HAL_Init>
  SystemClock_Config();
 8002336:	f7ff ff61 	bl	80021fc <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	4a8f      	ldr	r2, [pc, #572]	; (800257c <main+0x250>)
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hadc1.Instance = ADC1;
 8002342:	4c8f      	ldr	r4, [pc, #572]	; (8002580 <main+0x254>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002344:	4e8f      	ldr	r6, [pc, #572]	; (8002584 <main+0x258>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002346:	f041 0104 	orr.w	r1, r1, #4
 800234a:	6311      	str	r1, [r2, #48]	; 0x30
 800234c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800234e:	f001 0104 	and.w	r1, r1, #4
 8002352:	9100      	str	r1, [sp, #0]
 8002354:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800235a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800235e:	6311      	str	r1, [r2, #48]	; 0x30
 8002360:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002362:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002366:	9101      	str	r1, [sp, #4]
 8002368:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	9302      	str	r3, [sp, #8]
 800236c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800236e:	f041 0101 	orr.w	r1, r1, #1
 8002372:	6311      	str	r1, [r2, #48]	; 0x30
 8002374:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002376:	f001 0101 	and.w	r1, r1, #1
 800237a:	9102      	str	r1, [sp, #8]
 800237c:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	9303      	str	r3, [sp, #12]
 8002380:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002382:	f041 0102 	orr.w	r1, r1, #2
 8002386:	6311      	str	r1, [r2, #48]	; 0x30
 8002388:	6b12      	ldr	r2, [r2, #48]	; 0x30
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800238a:	60a3      	str	r3, [r4, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	f002 0202 	and.w	r2, r2, #2
 8002390:	9203      	str	r2, [sp, #12]
 8002392:	9a03      	ldr	r2, [sp, #12]
  hadc1.Instance = ADC1;
 8002394:	4a7c      	ldr	r2, [pc, #496]	; (8002588 <main+0x25c>)
  hadc1.Init.ScanConvMode = DISABLE;
 8002396:	6123      	str	r3, [r4, #16]
  hadc1.Init.NbrOfConversion = 1;
 8002398:	2501      	movs	r5, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800239a:	4620      	mov	r0, r4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800239c:	e884 000c 	stmia.w	r4, {r2, r3}
  hadc1.Init.ContinuousConvMode = DISABLE;
 80023a0:	61a3      	str	r3, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023a2:	6223      	str	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023a4:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023a6:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023a8:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 80023aa:	61e5      	str	r5, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80023ac:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023ae:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80023b0:	f7fe f914 	bl	80005dc <HAL_ADC_Init>
 80023b4:	b100      	cbz	r0, 80023b8 <main+0x8c>
 80023b6:	e7fe      	b.n	80023b6 <main+0x8a>
  sConfig.Channel = ADC_CHANNEL_2;
 80023b8:	2302      	movs	r3, #2
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023ba:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023bc:	a911      	add	r1, sp, #68	; 0x44
 80023be:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_2;
 80023c0:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Rank = 1;
 80023c2:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c4:	f7fe f9ae 	bl	8000724 <HAL_ADC_ConfigChannel>
 80023c8:	b100      	cbz	r0, 80023cc <main+0xa0>
 80023ca:	e7fe      	b.n	80023ca <main+0x9e>
  hadc2.Instance = ADC2;
 80023cc:	4c6f      	ldr	r4, [pc, #444]	; (800258c <main+0x260>)
 80023ce:	4b70      	ldr	r3, [pc, #448]	; (8002590 <main+0x264>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80023d0:	6060      	str	r0, [r4, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80023d2:	60a0      	str	r0, [r4, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80023d4:	6120      	str	r0, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80023d6:	61a0      	str	r0, [r4, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80023d8:	6220      	str	r0, [r4, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023da:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023dc:	60e0      	str	r0, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80023de:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023e0:	4620      	mov	r0, r4
  hadc2.Instance = ADC2;
 80023e2:	6023      	str	r3, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023e4:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc2.Init.NbrOfConversion = 1;
 80023e6:	61e5      	str	r5, [r4, #28]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80023e8:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80023ea:	f7fe f8f7 	bl	80005dc <HAL_ADC_Init>
 80023ee:	b100      	cbz	r0, 80023f2 <main+0xc6>
 80023f0:	e7fe      	b.n	80023f0 <main+0xc4>
  sConfig.Channel = ADC_CHANNEL_4;
 80023f2:	2304      	movs	r3, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80023f4:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023f6:	a911      	add	r1, sp, #68	; 0x44
 80023f8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 80023fa:	9311      	str	r3, [sp, #68]	; 0x44
  sConfig.Rank = 1;
 80023fc:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80023fe:	f7fe f991 	bl	8000724 <HAL_ADC_ConfigChannel>
 8002402:	b100      	cbz	r0, 8002406 <main+0xda>
 8002404:	e7fe      	b.n	8002404 <main+0xd8>
  hi2c3.Instance = I2C3;
 8002406:	4b63      	ldr	r3, [pc, #396]	; (8002594 <main+0x268>)
  hi2c3.Init.ClockSpeed = 100000;
 8002408:	4a63      	ldr	r2, [pc, #396]	; (8002598 <main+0x26c>)
 800240a:	4c64      	ldr	r4, [pc, #400]	; (800259c <main+0x270>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800240c:	6098      	str	r0, [r3, #8]
  hi2c3.Init.ClockSpeed = 100000;
 800240e:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2c3.Init.OwnAddress1 = 0;
 8002412:	60d8      	str	r0, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002414:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002418:	6158      	str	r0, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800241a:	6198      	str	r0, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800241c:	61d8      	str	r0, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800241e:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002420:	4618      	mov	r0, r3
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002422:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002424:	f7fe fe86 	bl	8001134 <HAL_I2C_Init>
 8002428:	b100      	cbz	r0, 800242c <main+0x100>
 800242a:	e7fe      	b.n	800242a <main+0xfe>
  hspi2.Instance = SPI2;
 800242c:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <main+0x274>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800242e:	495d      	ldr	r1, [pc, #372]	; (80025a4 <main+0x278>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002430:	6098      	str	r0, [r3, #8]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002432:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002436:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800243a:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800243e:	60d8      	str	r0, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002440:	6118      	str	r0, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002442:	6158      	str	r0, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002444:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002446:	61d8      	str	r0, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002448:	6218      	str	r0, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800244a:	6258      	str	r0, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244c:	6298      	str	r0, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800244e:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002450:	4618      	mov	r0, r3
  hspi2.Init.CRCPolynomial = 10;
 8002452:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002454:	f7ff f97e 	bl	8001754 <HAL_SPI_Init>
 8002458:	b100      	cbz	r0, 800245c <main+0x130>
 800245a:	e7fe      	b.n	800245a <main+0x12e>
  htim1.Instance = TIM1;
 800245c:	4c52      	ldr	r4, [pc, #328]	; (80025a8 <main+0x27c>)
 800245e:	4b53      	ldr	r3, [pc, #332]	; (80025ac <main+0x280>)
  htim1.Init.Prescaler = 0;
 8002460:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 8002464:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002466:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8002468:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800246a:	4620      	mov	r0, r4
  htim1.Instance = TIM1;
 800246c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800246e:	f7ff fbc7 	bl	8001c00 <HAL_TIM_Base_Init>
 8002472:	b100      	cbz	r0, 8002476 <main+0x14a>
 8002474:	e7fe      	b.n	8002474 <main+0x148>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002476:	ad18      	add	r5, sp, #96	; 0x60
 8002478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800247c:	f845 3d48 	str.w	r3, [r5, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002480:	4620      	mov	r0, r4
 8002482:	4629      	mov	r1, r5
 8002484:	f7ff fa7f 	bl	8001986 <HAL_TIM_ConfigClockSource>
 8002488:	b100      	cbz	r0, 800248c <main+0x160>
 800248a:	e7fe      	b.n	800248a <main+0x15e>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff fbd1 	bl	8001c34 <HAL_TIM_OC_Init>
 8002492:	b100      	cbz	r0, 8002496 <main+0x16a>
 8002494:	e7fe      	b.n	8002494 <main+0x168>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002496:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002498:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800249a:	a904      	add	r1, sp, #16
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff fd1d 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 80024a2:	b100      	cbz	r0, 80024a6 <main+0x17a>
 80024a4:	e7fe      	b.n	80024a4 <main+0x178>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024a6:	2300      	movs	r3, #0
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024a8:	220c      	movs	r2, #12
 80024aa:	a90a      	add	r1, sp, #40	; 0x28
 80024ac:	483e      	ldr	r0, [pc, #248]	; (80025a8 <main+0x27c>)
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024ae:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 80024b0:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024b2:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024b4:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024b6:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024b8:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024ba:	f7ff fce1 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 80024be:	b100      	cbz	r0, 80024c2 <main+0x196>
 80024c0:	e7fe      	b.n	80024c0 <main+0x194>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024c2:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024c4:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c6:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 80024c8:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024ca:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024d0:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024d2:	a911      	add	r1, sp, #68	; 0x44
 80024d4:	4834      	ldr	r0, [pc, #208]	; (80025a8 <main+0x27c>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024d6:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024d8:	f7ff fd22 	bl	8001f20 <HAL_TIMEx_ConfigBreakDeadTime>
 80024dc:	4606      	mov	r6, r0
 80024de:	b100      	cbz	r0, 80024e2 <main+0x1b6>
 80024e0:	e7fe      	b.n	80024e0 <main+0x1b4>
  htim2.Instance = TIM2;
 80024e2:	4c33      	ldr	r4, [pc, #204]	; (80025b0 <main+0x284>)
  HAL_TIM_MspPostInit(&htim1);
 80024e4:	4830      	ldr	r0, [pc, #192]	; (80025a8 <main+0x27c>)
 80024e6:	f000 fbad 	bl	8002c44 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 80024ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024ee:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 0;
 80024f0:	e884 0048 	stmia.w	r4, {r3, r6}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024f4:	60a6      	str	r6, [r4, #8]
  htim2.Init.Period = 0;
 80024f6:	60e6      	str	r6, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f8:	6126      	str	r6, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024fa:	f7ff fb81 	bl	8001c00 <HAL_TIM_Base_Init>
 80024fe:	b100      	cbz	r0, 8002502 <main+0x1d6>
 8002500:	e7fe      	b.n	8002500 <main+0x1d4>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002506:	a90a      	add	r1, sp, #40	; 0x28
 8002508:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800250c:	f7ff fa3b 	bl	8001986 <HAL_TIM_ConfigClockSource>
 8002510:	b100      	cbz	r0, 8002514 <main+0x1e8>
 8002512:	e7fe      	b.n	8002512 <main+0x1e6>
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002514:	4620      	mov	r0, r4
 8002516:	f7ff fb8d 	bl	8001c34 <HAL_TIM_OC_Init>
 800251a:	b100      	cbz	r0, 800251e <main+0x1f2>
 800251c:	e7fe      	b.n	800251c <main+0x1f0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251e:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002520:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002522:	4629      	mov	r1, r5
 8002524:	4620      	mov	r0, r4
 8002526:	f7ff fcd9 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 800252a:	4602      	mov	r2, r0
 800252c:	b100      	cbz	r0, 8002530 <main+0x204>
 800252e:	e7fe      	b.n	800252e <main+0x202>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002530:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.Pulse = 0;
 8002532:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002534:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002536:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002538:	a911      	add	r1, sp, #68	; 0x44
 800253a:	4620      	mov	r0, r4
 800253c:	f7ff fca0 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 8002540:	b100      	cbz	r0, 8002544 <main+0x218>
 8002542:	e7fe      	b.n	8002542 <main+0x216>
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002544:	2204      	movs	r2, #4
 8002546:	a911      	add	r1, sp, #68	; 0x44
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff fc99 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 800254e:	4606      	mov	r6, r0
 8002550:	b100      	cbz	r0, 8002554 <main+0x228>
 8002552:	e7fe      	b.n	8002552 <main+0x226>
  HAL_TIM_MspPostInit(&htim2);
 8002554:	4620      	mov	r0, r4
  htim3.Instance = TIM3;
 8002556:	4c17      	ldr	r4, [pc, #92]	; (80025b4 <main+0x288>)
  HAL_TIM_MspPostInit(&htim2);
 8002558:	f000 fb74 	bl	8002c44 <HAL_TIM_MspPostInit>
  htim3.Instance = TIM3;
 800255c:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <main+0x28c>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800255e:	60a6      	str	r6, [r4, #8]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002560:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 0;
 8002562:	e884 0048 	stmia.w	r4, {r3, r6}
  htim3.Init.Period = 0;
 8002566:	60e6      	str	r6, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002568:	6126      	str	r6, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800256a:	f7ff fb49 	bl	8001c00 <HAL_TIM_Base_Init>
 800256e:	b100      	cbz	r0, 8002572 <main+0x246>
 8002570:	e7fe      	b.n	8002570 <main+0x244>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002572:	4620      	mov	r0, r4
 8002574:	f7ff fb78 	bl	8001c68 <HAL_TIM_IC_Init>
 8002578:	b300      	cbz	r0, 80025bc <main+0x290>
 800257a:	e7fe      	b.n	800257a <main+0x24e>
 800257c:	40023800 	.word	0x40023800
 8002580:	20000250 	.word	0x20000250
 8002584:	0f000001 	.word	0x0f000001
 8002588:	40012000 	.word	0x40012000
 800258c:	20000190 	.word	0x20000190
 8002590:	40012100 	.word	0x40012100
 8002594:	2000002c 	.word	0x2000002c
 8002598:	40005c00 	.word	0x40005c00
 800259c:	000186a0 	.word	0x000186a0
 80025a0:	20000080 	.word	0x20000080
 80025a4:	40003800 	.word	0x40003800
 80025a8:	200002e0 	.word	0x200002e0
 80025ac:	40010000 	.word	0x40010000
 80025b0:	20000430 	.word	0x20000430
 80025b4:	20000214 	.word	0x20000214
 80025b8:	40000400 	.word	0x40000400
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80025bc:	2307      	movs	r3, #7
 80025be:	9311      	str	r3, [sp, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80025c0:	2350      	movs	r3, #80	; 0x50
 80025c2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 80025c4:	a911      	add	r1, sp, #68	; 0x44
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80025c6:	2300      	movs	r3, #0
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 80025c8:	4881      	ldr	r0, [pc, #516]	; (80027d0 <main+0x4a4>)
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80025ca:	9313      	str	r3, [sp, #76]	; 0x4c
  sSlaveConfig.TriggerFilter = 0;
 80025cc:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 80025ce:	f7ff fa93 	bl	8001af8 <HAL_TIM_SlaveConfigSynchronization>
 80025d2:	b100      	cbz	r0, 80025d6 <main+0x2aa>
 80025d4:	e7fe      	b.n	80025d4 <main+0x2a8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025d6:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d8:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025da:	4629      	mov	r1, r5
 80025dc:	487c      	ldr	r0, [pc, #496]	; (80027d0 <main+0x4a4>)
 80025de:	f7ff fc7d 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 80025e2:	b100      	cbz	r0, 80025e6 <main+0x2ba>
 80025e4:	e7fe      	b.n	80025e4 <main+0x2b8>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80025e6:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025e8:	2301      	movs	r3, #1
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80025ea:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigIC.ICFilter = 0;
 80025ec:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025ee:	2204      	movs	r2, #4
 80025f0:	a90a      	add	r1, sp, #40	; 0x28
 80025f2:	4877      	ldr	r0, [pc, #476]	; (80027d0 <main+0x4a4>)
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80025f4:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80025f6:	f7ff fb8b 	bl	8001d10 <HAL_TIM_IC_ConfigChannel>
 80025fa:	b100      	cbz	r0, 80025fe <main+0x2d2>
 80025fc:	e7fe      	b.n	80025fc <main+0x2d0>
  htim4.Instance = TIM4;
 80025fe:	4c75      	ldr	r4, [pc, #468]	; (80027d4 <main+0x4a8>)
 8002600:	4b75      	ldr	r3, [pc, #468]	; (80027d8 <main+0x4ac>)
  htim4.Init.Prescaler = 0;
 8002602:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002604:	60a0      	str	r0, [r4, #8]
  htim4.Init.Period = 0;
 8002606:	60e0      	str	r0, [r4, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002608:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800260a:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 800260c:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800260e:	f7ff faf7 	bl	8001c00 <HAL_TIM_Base_Init>
 8002612:	b100      	cbz	r0, 8002616 <main+0x2ea>
 8002614:	e7fe      	b.n	8002614 <main+0x2e8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002616:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800261a:	a90a      	add	r1, sp, #40	; 0x28
 800261c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261e:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002620:	f7ff f9b1 	bl	8001986 <HAL_TIM_ConfigClockSource>
 8002624:	b100      	cbz	r0, 8002628 <main+0x2fc>
 8002626:	e7fe      	b.n	8002626 <main+0x2fa>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002628:	4620      	mov	r0, r4
 800262a:	f7ff fb03 	bl	8001c34 <HAL_TIM_OC_Init>
 800262e:	b100      	cbz	r0, 8002632 <main+0x306>
 8002630:	e7fe      	b.n	8002630 <main+0x304>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002632:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002634:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002636:	4629      	mov	r1, r5
 8002638:	4620      	mov	r0, r4
 800263a:	f7ff fc4f 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 800263e:	b100      	cbz	r0, 8002642 <main+0x316>
 8002640:	e7fe      	b.n	8002640 <main+0x314>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002642:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.Pulse = 0;
 8002644:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002646:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002648:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800264a:	2204      	movs	r2, #4
 800264c:	a911      	add	r1, sp, #68	; 0x44
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff fc16 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 8002654:	4606      	mov	r6, r0
 8002656:	b100      	cbz	r0, 800265a <main+0x32e>
 8002658:	e7fe      	b.n	8002658 <main+0x32c>
  HAL_TIM_MspPostInit(&htim4);
 800265a:	4620      	mov	r0, r4
  htim5.Instance = TIM5;
 800265c:	4c5f      	ldr	r4, [pc, #380]	; (80027dc <main+0x4b0>)
  HAL_TIM_MspPostInit(&htim4);
 800265e:	f000 faf1 	bl	8002c44 <HAL_TIM_MspPostInit>
  htim5.Instance = TIM5;
 8002662:	4b5f      	ldr	r3, [pc, #380]	; (80027e0 <main+0x4b4>)
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002664:	60a6      	str	r6, [r4, #8]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002666:	4620      	mov	r0, r4
  htim5.Init.Prescaler = 0;
 8002668:	e884 0048 	stmia.w	r4, {r3, r6}
  htim5.Init.Period = 0;
 800266c:	60e6      	str	r6, [r4, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800266e:	6126      	str	r6, [r4, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002670:	f7ff fac6 	bl	8001c00 <HAL_TIM_Base_Init>
 8002674:	b100      	cbz	r0, 8002678 <main+0x34c>
 8002676:	e7fe      	b.n	8002676 <main+0x34a>
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002678:	a90a      	add	r1, sp, #40	; 0x28
 800267a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800267c:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800267e:	f7ff f982 	bl	8001986 <HAL_TIM_ConfigClockSource>
 8002682:	b100      	cbz	r0, 8002686 <main+0x35a>
 8002684:	e7fe      	b.n	8002684 <main+0x358>
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002686:	4855      	ldr	r0, [pc, #340]	; (80027dc <main+0x4b0>)
 8002688:	f7ff fad4 	bl	8001c34 <HAL_TIM_OC_Init>
 800268c:	b100      	cbz	r0, 8002690 <main+0x364>
 800268e:	e7fe      	b.n	800268e <main+0x362>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002692:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002694:	4629      	mov	r1, r5
 8002696:	4851      	ldr	r0, [pc, #324]	; (80027dc <main+0x4b0>)
 8002698:	f7ff fc20 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 800269c:	4602      	mov	r2, r0
 800269e:	b100      	cbz	r0, 80026a2 <main+0x376>
 80026a0:	e7fe      	b.n	80026a0 <main+0x374>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026a2:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.Pulse = 0;
 80026a4:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a6:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a8:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026aa:	a911      	add	r1, sp, #68	; 0x44
 80026ac:	484b      	ldr	r0, [pc, #300]	; (80027dc <main+0x4b0>)
 80026ae:	f7ff fbe7 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 80026b2:	b100      	cbz	r0, 80026b6 <main+0x38a>
 80026b4:	e7fe      	b.n	80026b4 <main+0x388>
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026b6:	2204      	movs	r2, #4
 80026b8:	a911      	add	r1, sp, #68	; 0x44
 80026ba:	4848      	ldr	r0, [pc, #288]	; (80027dc <main+0x4b0>)
 80026bc:	f7ff fbe0 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 80026c0:	4606      	mov	r6, r0
 80026c2:	b100      	cbz	r0, 80026c6 <main+0x39a>
 80026c4:	e7fe      	b.n	80026c4 <main+0x398>
  htim8.Instance = TIM8;
 80026c6:	4c47      	ldr	r4, [pc, #284]	; (80027e4 <main+0x4b8>)
  HAL_TIM_MspPostInit(&htim5);
 80026c8:	4844      	ldr	r0, [pc, #272]	; (80027dc <main+0x4b0>)
 80026ca:	f000 fabb 	bl	8002c44 <HAL_TIM_MspPostInit>
  htim8.Instance = TIM8;
 80026ce:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <main+0x4bc>)
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026d0:	60a6      	str	r6, [r4, #8]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026d2:	4620      	mov	r0, r4
  htim8.Init.Prescaler = 0;
 80026d4:	e884 0048 	stmia.w	r4, {r3, r6}
  htim8.Init.Period = 0;
 80026d8:	60e6      	str	r6, [r4, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026da:	6126      	str	r6, [r4, #16]
  htim8.Init.RepetitionCounter = 0;
 80026dc:	6166      	str	r6, [r4, #20]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026de:	f7ff fa8f 	bl	8001c00 <HAL_TIM_Base_Init>
 80026e2:	b100      	cbz	r0, 80026e6 <main+0x3ba>
 80026e4:	e7fe      	b.n	80026e4 <main+0x3b8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026ea:	4629      	mov	r1, r5
 80026ec:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ee:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026f0:	f7ff f949 	bl	8001986 <HAL_TIM_ConfigClockSource>
 80026f4:	b100      	cbz	r0, 80026f8 <main+0x3cc>
 80026f6:	e7fe      	b.n	80026f6 <main+0x3ca>
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff fa9b 	bl	8001c34 <HAL_TIM_OC_Init>
 80026fe:	b100      	cbz	r0, 8002702 <main+0x3d6>
 8002700:	e7fe      	b.n	8002700 <main+0x3d4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002702:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002704:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002706:	a904      	add	r1, sp, #16
 8002708:	4620      	mov	r0, r4
 800270a:	f7ff fbe7 	bl	8001edc <HAL_TIMEx_MasterConfigSynchronization>
 800270e:	4602      	mov	r2, r0
 8002710:	b100      	cbz	r0, 8002714 <main+0x3e8>
 8002712:	e7fe      	b.n	8002712 <main+0x3e6>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002714:	900a      	str	r0, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 8002716:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002718:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800271a:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800271c:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800271e:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002720:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002722:	a90a      	add	r1, sp, #40	; 0x28
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff fbab 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 800272a:	b100      	cbz	r0, 800272e <main+0x402>
 800272c:	e7fe      	b.n	800272c <main+0x400>
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800272e:	2204      	movs	r2, #4
 8002730:	a90a      	add	r1, sp, #40	; 0x28
 8002732:	4620      	mov	r0, r4
 8002734:	f7ff fba4 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 8002738:	b100      	cbz	r0, 800273c <main+0x410>
 800273a:	e7fe      	b.n	800273a <main+0x40e>
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800273c:	2208      	movs	r2, #8
 800273e:	a90a      	add	r1, sp, #40	; 0x28
 8002740:	4828      	ldr	r0, [pc, #160]	; (80027e4 <main+0x4b8>)
 8002742:	f7ff fb9d 	bl	8001e80 <HAL_TIM_OC_ConfigChannel>
 8002746:	b100      	cbz	r0, 800274a <main+0x41e>
 8002748:	e7fe      	b.n	8002748 <main+0x41c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800274a:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800274c:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800274e:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 8002750:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002752:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002758:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800275a:	a911      	add	r1, sp, #68	; 0x44
 800275c:	4821      	ldr	r0, [pc, #132]	; (80027e4 <main+0x4b8>)
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800275e:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002760:	f7ff fbde 	bl	8001f20 <HAL_TIMEx_ConfigBreakDeadTime>
 8002764:	4604      	mov	r4, r0
 8002766:	b100      	cbz	r0, 800276a <main+0x43e>
 8002768:	e7fe      	b.n	8002768 <main+0x43c>
  HAL_TIM_MspPostInit(&htim8);
 800276a:	481e      	ldr	r0, [pc, #120]	; (80027e4 <main+0x4b8>)
 800276c:	f000 fa6a 	bl	8002c44 <HAL_TIM_MspPostInit>
  huart1.Instance = USART1;
 8002770:	481e      	ldr	r0, [pc, #120]	; (80027ec <main+0x4c0>)
  huart1.Init.BaudRate = 115200;
 8002772:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <main+0x4c4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002774:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 115200;
 8002776:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800277a:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 800277c:	e880 0048 	stmia.w	r0, {r3, r6}
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002780:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002782:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002784:	6145      	str	r5, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002786:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002788:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800278a:	f7ff fd09 	bl	80021a0 <HAL_UART_Init>
 800278e:	b100      	cbz	r0, 8002792 <main+0x466>
 8002790:	e7fe      	b.n	8002790 <main+0x464>
  huart3.Instance = USART3;
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <main+0x4c8>)
 8002794:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <main+0x4cc>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002796:	6098      	str	r0, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002798:	60d8      	str	r0, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800279a:	6118      	str	r0, [r3, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800279c:	6198      	str	r0, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800279e:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027a0:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 80027a2:	e883 0044 	stmia.w	r3, {r2, r6}
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027a6:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027a8:	f7ff fcfa 	bl	80021a0 <HAL_UART_Init>
 80027ac:	b100      	cbz	r0, 80027b0 <main+0x484>
 80027ae:	e7fe      	b.n	80027ae <main+0x482>
  huart6.Instance = USART6;
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <main+0x4d0>)
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <main+0x4d4>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027b4:	6098      	str	r0, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027b6:	60d8      	str	r0, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027b8:	6118      	str	r0, [r3, #16]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ba:	6198      	str	r0, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027bc:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027be:	4618      	mov	r0, r3
  huart6.Init.BaudRate = 115200;
 80027c0:	e883 0044 	stmia.w	r3, {r2, r6}
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027c4:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027c6:	f7ff fceb 	bl	80021a0 <HAL_UART_Init>
 80027ca:	b1d8      	cbz	r0, 8002804 <main+0x4d8>
 80027cc:	e7fe      	b.n	80027cc <main+0x4a0>
 80027ce:	bf00      	nop
 80027d0:	20000214 	.word	0x20000214
 80027d4:	20000114 	.word	0x20000114
 80027d8:	40000800 	.word	0x40000800
 80027dc:	200001d8 	.word	0x200001d8
 80027e0:	40000c00 	.word	0x40000c00
 80027e4:	200000d8 	.word	0x200000d8
 80027e8:	40010400 	.word	0x40010400
 80027ec:	20000298 	.word	0x20000298
 80027f0:	40011000 	.word	0x40011000
 80027f4:	20000150 	.word	0x20000150
 80027f8:	40004800 	.word	0x40004800
 80027fc:	20000320 	.word	0x20000320
 8002800:	40011400 	.word	0x40011400
  CAN_Config();
 8002804:	f7ff fd50 	bl	80022a8 <CAN_Config>
	  TxData[5] = first;	//3rd byte of time_stamp
 8002808:	4c20      	ldr	r4, [pc, #128]	; (800288c <main+0x560>)
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 800280a:	4e21      	ldr	r6, [pc, #132]	; (8002890 <main+0x564>)
 800280c:	4f21      	ldr	r7, [pc, #132]	; (8002894 <main+0x568>)
	  time_stamp = HAL_GetTick();
 800280e:	f7fd fecb 	bl	80005a8 <HAL_GetTick>
	  uint8_t first = (uint8_t) (time_stamp >> 16);
 8002812:	0c03      	lsrs	r3, r0, #16
 8002814:	7163      	strb	r3, [r4, #5]
	  uint8_t third = (uint8_t) (time_stamp >> 0);
 8002816:	71e0      	strb	r0, [r4, #7]
	  uint8_t second = (uint8_t) (time_stamp >> 8);
 8002818:	0a03      	lsrs	r3, r0, #8
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 800281a:	2100      	movs	r1, #0
 800281c:	4630      	mov	r0, r6
	  uint8_t second = (uint8_t) (time_stamp >> 8);
 800281e:	71a3      	strb	r3, [r4, #6]
	  if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8002820:	f7fe fa16 	bl	8000c50 <HAL_CAN_GetRxFifoFillLevel>
 8002824:	b1e0      	cbz	r0, 8002860 <main+0x534>
          HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8002826:	4d1c      	ldr	r5, [pc, #112]	; (8002898 <main+0x56c>)
 8002828:	f8df 8074 	ldr.w	r8, [pc, #116]	; 80028a0 <main+0x574>
 800282c:	462b      	mov	r3, r5
 800282e:	4642      	mov	r2, r8
 8002830:	2100      	movs	r1, #0
 8002832:	4630      	mov	r0, r6
 8002834:	f7fe f98e 	bl	8000b54 <HAL_CAN_GetRxMessage>
          TxHeader.StdId = 0x007;
 8002838:	2307      	movs	r3, #7
 800283a:	603b      	str	r3, [r7, #0]
	      TxData[0] = RxData[0];
 800283c:	782b      	ldrb	r3, [r5, #0]
 800283e:	7023      	strb	r3, [r4, #0]
	      TxData[1] = RxData[1];
 8002840:	786b      	ldrb	r3, [r5, #1]
 8002842:	7063      	strb	r3, [r4, #1]
	      TxData[2] = RxData[2];
 8002844:	78ab      	ldrb	r3, [r5, #2]
 8002846:	70a3      	strb	r3, [r4, #2]
	      TxData[3] = RxData[3];
 8002848:	78eb      	ldrb	r3, [r5, #3]
 800284a:	70e3      	strb	r3, [r4, #3]
	      TxData[4] = RxHeader.StdId;
 800284c:	f8d8 3000 	ldr.w	r3, [r8]
 8002850:	7123      	strb	r3, [r4, #4]
		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8002852:	4622      	mov	r2, r4
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <main+0x570>)
 8002856:	4639      	mov	r1, r7
 8002858:	4630      	mov	r0, r6
 800285a:	f7fe f92c 	bl	8000ab6 <HAL_CAN_AddTxMessage>
 800285e:	e7d6      	b.n	800280e <main+0x4e2>
		  TxHeader.StdId = 0x01;
 8002860:	2301      	movs	r3, #1
 8002862:	603b      	str	r3, [r7, #0]
		  TxData[0] = 1; 	// random value
 8002864:	7023      	strb	r3, [r4, #0]
		  TxData[1] = 2;	//random value
 8002866:	2302      	movs	r3, #2
 8002868:	7063      	strb	r3, [r4, #1]
		  TxData[2] = 3; 	// random value
 800286a:	2303      	movs	r3, #3
 800286c:	70a3      	strb	r3, [r4, #2]
		  TxData[3] = 4;	//random value
 800286e:	2304      	movs	r3, #4
 8002870:	70e3      	strb	r3, [r4, #3]
		  TxData[4] = 5; 	// random value
 8002872:	2305      	movs	r3, #5
 8002874:	7123      	strb	r3, [r4, #4]
		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK) {
 8002876:	4622      	mov	r2, r4
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <main+0x570>)
 800287a:	4639      	mov	r1, r7
 800287c:	4630      	mov	r0, r6
 800287e:	f7fe f91a 	bl	8000ab6 <HAL_CAN_AddTxMessage>
		  HAL_Delay(10); // 100 / sec is enough
 8002882:	200a      	movs	r0, #10
 8002884:	f7fd fe96 	bl	80005b4 <HAL_Delay>
 8002888:	e7c1      	b.n	800280e <main+0x4e2>
 800288a:	bf00      	nop
 800288c:	200002d8 	.word	0x200002d8
 8002890:	2000046c 	.word	0x2000046c
 8002894:	20000494 	.word	0x20000494
 8002898:	20000428 	.word	0x20000428
 800289c:	2000031c 	.word	0x2000031c
 80028a0:	200004ac 	.word	0x200004ac

080028a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028a4:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_MspInit+0x8c>)
 80028a8:	2400      	movs	r4, #0
 80028aa:	9400      	str	r4, [sp, #0]
 80028ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028b2:	645a      	str	r2, [r3, #68]	; 0x44
 80028b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028b6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80028ba:	9200      	str	r2, [sp, #0]
 80028bc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028be:	9401      	str	r4, [sp, #4]
 80028c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ce:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d0:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80028d2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028d4:	f7fe fada 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80028d8:	4622      	mov	r2, r4
 80028da:	4621      	mov	r1, r4
 80028dc:	f06f 000b 	mvn.w	r0, #11
 80028e0:	f7fe fae6 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80028e4:	4622      	mov	r2, r4
 80028e6:	4621      	mov	r1, r4
 80028e8:	f06f 000a 	mvn.w	r0, #10
 80028ec:	f7fe fae0 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80028f0:	4622      	mov	r2, r4
 80028f2:	4621      	mov	r1, r4
 80028f4:	f06f 0009 	mvn.w	r0, #9
 80028f8:	f7fe fada 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80028fc:	4622      	mov	r2, r4
 80028fe:	4621      	mov	r1, r4
 8002900:	f06f 0004 	mvn.w	r0, #4
 8002904:	f7fe fad4 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002908:	4622      	mov	r2, r4
 800290a:	4621      	mov	r1, r4
 800290c:	f06f 0003 	mvn.w	r0, #3
 8002910:	f7fe face 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002914:	4622      	mov	r2, r4
 8002916:	4621      	mov	r1, r4
 8002918:	f06f 0001 	mvn.w	r0, #1
 800291c:	f7fe fac8 	bl	8000eb0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002920:	4622      	mov	r2, r4
 8002922:	4621      	mov	r1, r4
 8002924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002928:	f7fe fac2 	bl	8000eb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292c:	b002      	add	sp, #8
 800292e:	bd10      	pop	{r4, pc}
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002934:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8002936:	6803      	ldr	r3, [r0, #0]
 8002938:	4a20      	ldr	r2, [pc, #128]	; (80029bc <HAL_ADC_MspInit+0x88>)
 800293a:	4293      	cmp	r3, r2
{
 800293c:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 800293e:	d11f      	bne.n	8002980 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002940:	2400      	movs	r4, #0
 8002942:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_ADC_MspInit+0x8c>)
 8002944:	9401      	str	r4, [sp, #4]
 8002946:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PC4     ------> ADC1_IN14 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002948:	481e      	ldr	r0, [pc, #120]	; (80029c4 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800294a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002952:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800295c:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295e:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002962:	2503      	movs	r5, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002964:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002966:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002968:	f7fe fb0a 	bl	8000f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800296c:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296e:	4816      	ldr	r0, [pc, #88]	; (80029c8 <HAL_ADC_MspInit+0x94>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002970:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002972:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002974:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002976:	a903      	add	r1, sp, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002978:	f7fe fb02 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800297c:	b009      	add	sp, #36	; 0x24
 800297e:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <HAL_ADC_MspInit+0x98>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d1fa      	bne.n	800297c <HAL_ADC_MspInit+0x48>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002986:	2400      	movs	r4, #0
 8002988:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <HAL_ADC_MspInit+0x8c>)
 800298a:	9402      	str	r4, [sp, #8]
 800298c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298e:	480e      	ldr	r0, [pc, #56]	; (80029c8 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8002990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002994:	645a      	str	r2, [r3, #68]	; 0x44
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	9405      	str	r4, [sp, #20]
    __HAL_RCC_ADC2_CLK_ENABLE();
 800299a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800299e:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 80029a0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029a2:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC2_CLK_ENABLE();
 80029a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029a6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a8:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029aa:	f7fe fae9 	bl	8000f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80029ae:	2330      	movs	r3, #48	; 0x30
 80029b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029b2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b6:	a903      	add	r1, sp, #12
 80029b8:	4802      	ldr	r0, [pc, #8]	; (80029c4 <HAL_ADC_MspInit+0x90>)
 80029ba:	e7dd      	b.n	8002978 <HAL_ADC_MspInit+0x44>
 80029bc:	40012000 	.word	0x40012000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40012100 	.word	0x40012100

080029d0 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 80029d2:	6802      	ldr	r2, [r0, #0]
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_CAN_MspInit+0x7c>)
 80029d6:	429a      	cmp	r2, r3
{
 80029d8:	b087      	sub	sp, #28
  if(hcan->Instance==CAN1)
 80029da:	d135      	bne.n	8002a48 <HAL_CAN_MspInit+0x78>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029dc:	2400      	movs	r4, #0
 80029de:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80029e2:	9400      	str	r4, [sp, #0]
 80029e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	481a      	ldr	r0, [pc, #104]	; (8002a50 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029e8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	9403      	str	r4, [sp, #12]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fa:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a00:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a02:	2509      	movs	r5, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0a:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a0c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0e:	f7fe fab7 	bl	8000f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a12:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	a901      	add	r1, sp, #4
 8002a18:	480e      	ldr	r0, [pc, #56]	; (8002a54 <HAL_CAN_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a1a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a20:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a22:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a24:	f7fe faac 	bl	8000f80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002a28:	4622      	mov	r2, r4
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	2014      	movs	r0, #20
 8002a2e:	f7fe fa3f 	bl	8000eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a32:	2014      	movs	r0, #20
 8002a34:	f7fe fa70 	bl	8000f18 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002a38:	2015      	movs	r0, #21
 8002a3a:	4622      	mov	r2, r4
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	f7fe fa37 	bl	8000eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002a42:	2015      	movs	r0, #21
 8002a44:	f7fe fa68 	bl	8000f18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a48:	b007      	add	sp, #28
 8002a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a4c:	40006400 	.word	0x40006400
 8002a50:	40020000 	.word	0x40020000
 8002a54:	40020400 	.word	0x40020400

08002a58 <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a58:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C3)
 8002a5a:	6802      	ldr	r2, [r0, #0]
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_I2C_MspInit+0x60>)
 8002a5e:	429a      	cmp	r2, r3
{
 8002a60:	b087      	sub	sp, #28
  if(hi2c->Instance==I2C3)
 8002a62:	d126      	bne.n	8002ab2 <HAL_I2C_MspInit+0x5a>
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a64:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a66:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a6a:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a6c:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a70:	eb0d 0104 	add.w	r1, sp, r4
 8002a74:	4811      	ldr	r0, [pc, #68]	; (8002abc <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a76:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a78:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7a:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a7e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	f7fe fa7e 	bl	8000f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a84:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a86:	eb0d 0104 	add.w	r1, sp, r4
 8002a8a:	480d      	ldr	r0, [pc, #52]	; (8002ac0 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a8c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a90:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a94:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a96:	f7fe fa73 	bl	8000f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_I2C_MspInit+0x6c>)
 8002aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ab2:	b007      	add	sp, #28
 8002ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40005c00 	.word	0x40005c00
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	40020400 	.word	0x40020400
 8002ac4:	40023800 	.word	0x40023800

08002ac8 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI2)
 8002aca:	6802      	ldr	r2, [r0, #0]
 8002acc:	4b15      	ldr	r3, [pc, #84]	; (8002b24 <HAL_SPI_MspInit+0x5c>)
 8002ace:	429a      	cmp	r2, r3
{
 8002ad0:	b087      	sub	sp, #28
  if(hspi->Instance==SPI2)
 8002ad2:	d124      	bne.n	8002b1e <HAL_SPI_MspInit+0x56>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ad4:	2400      	movs	r4, #0
 8002ad6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8002ada:	9400      	str	r4, [sp, #0]
 8002adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ade:	4812      	ldr	r0, [pc, #72]	; (8002b28 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ae0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae8:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002af4:	230c      	movs	r3, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002af8:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002afa:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002afc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002afe:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b00:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b02:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b04:	f7fe fa3c 	bl	8000f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b0c:	a901      	add	r1, sp, #4
 8002b0e:	4807      	ldr	r0, [pc, #28]	; (8002b2c <HAL_SPI_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b10:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b12:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b16:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b18:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1a:	f7fe fa31 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b1e:	b007      	add	sp, #28
 8002b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40003800 	.word	0x40003800
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	40020400 	.word	0x40020400

08002b30 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b30:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8002b32:	6803      	ldr	r3, [r0, #0]
 8002b34:	4a3b      	ldr	r2, [pc, #236]	; (8002c24 <HAL_TIM_Base_MspInit+0xf4>)
 8002b36:	4293      	cmp	r3, r2
{
 8002b38:	b08b      	sub	sp, #44	; 0x2c
  if(htim_base->Instance==TIM1)
 8002b3a:	d10d      	bne.n	8002b58 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4b39      	ldr	r3, [pc, #228]	; (8002c28 <HAL_TIM_Base_MspInit+0xf8>)
 8002b42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b44:	f042 0201 	orr.w	r2, r2, #1
 8002b48:	645a      	str	r2, [r3, #68]	; 0x44
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002b54:	b00b      	add	sp, #44	; 0x2c
 8002b56:	bd30      	pop	{r4, r5, pc}
  else if(htim_base->Instance==TIM2)
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d10c      	bne.n	8002b78 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9301      	str	r3, [sp, #4]
 8002b62:	4b31      	ldr	r3, [pc, #196]	; (8002c28 <HAL_TIM_Base_MspInit+0xf8>)
 8002b64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	9301      	str	r3, [sp, #4]
 8002b74:	9b01      	ldr	r3, [sp, #4]
 8002b76:	e7ed      	b.n	8002b54 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM3)
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <HAL_TIM_Base_MspInit+0xfc>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d121      	bne.n	8002bc2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b7e:	2400      	movs	r4, #0
 8002b80:	4b29      	ldr	r3, [pc, #164]	; (8002c28 <HAL_TIM_Base_MspInit+0xf8>)
 8002b82:	9402      	str	r4, [sp, #8]
 8002b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	482a      	ldr	r0, [pc, #168]	; (8002c30 <HAL_TIM_Base_MspInit+0x100>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b88:	f042 0202 	orr.w	r2, r2, #2
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	9407      	str	r4, [sp, #28]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2502      	movs	r5, #2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b9a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b9e:	2340      	movs	r3, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba0:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ba2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ba6:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ba8:	f7fe f9ea 	bl	8000f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bac:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bae:	a905      	add	r1, sp, #20
 8002bb0:	4820      	ldr	r0, [pc, #128]	; (8002c34 <HAL_TIM_Base_MspInit+0x104>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002bb2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bba:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bbc:	f7fe f9e0 	bl	8000f80 <HAL_GPIO_Init>
 8002bc0:	e7c8      	b.n	8002b54 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM4)
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	; (8002c38 <HAL_TIM_Base_MspInit+0x108>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d10c      	bne.n	8002be2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9303      	str	r3, [sp, #12]
 8002bcc:	4b16      	ldr	r3, [pc, #88]	; (8002c28 <HAL_TIM_Base_MspInit+0xf8>)
 8002bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bd0:	f042 0204 	orr.w	r2, r2, #4
 8002bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	f003 0304 	and.w	r3, r3, #4
 8002bdc:	9303      	str	r3, [sp, #12]
 8002bde:	9b03      	ldr	r3, [sp, #12]
 8002be0:	e7b8      	b.n	8002b54 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM5)
 8002be2:	4a16      	ldr	r2, [pc, #88]	; (8002c3c <HAL_TIM_Base_MspInit+0x10c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d10c      	bne.n	8002c02 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	9304      	str	r3, [sp, #16]
 8002bec:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <HAL_TIM_Base_MspInit+0xf8>)
 8002bee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bf0:	f042 0208 	orr.w	r2, r2, #8
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f003 0308 	and.w	r3, r3, #8
 8002bfc:	9304      	str	r3, [sp, #16]
 8002bfe:	9b04      	ldr	r3, [sp, #16]
 8002c00:	e7a8      	b.n	8002b54 <HAL_TIM_Base_MspInit+0x24>
  else if(htim_base->Instance==TIM8)
 8002c02:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_TIM_Base_MspInit+0x110>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d1a5      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9305      	str	r3, [sp, #20]
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_TIM_Base_MspInit+0xf8>)
 8002c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c10:	f042 0202 	orr.w	r2, r2, #2
 8002c14:	645a      	str	r2, [r3, #68]	; 0x44
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	9305      	str	r3, [sp, #20]
 8002c1e:	9b05      	ldr	r3, [sp, #20]
}
 8002c20:	e798      	b.n	8002b54 <HAL_TIM_Base_MspInit+0x24>
 8002c22:	bf00      	nop
 8002c24:	40010000 	.word	0x40010000
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c44:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002c46:	6803      	ldr	r3, [r0, #0]
 8002c48:	4a2c      	ldr	r2, [pc, #176]	; (8002cfc <HAL_TIM_MspPostInit+0xb8>)
 8002c4a:	4293      	cmp	r3, r2
{
 8002c4c:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 8002c4e:	d10f      	bne.n	8002c70 <HAL_TIM_MspPostInit+0x2c>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c54:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c60:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	4827      	ldr	r0, [pc, #156]	; (8002d00 <HAL_TIM_MspPostInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c64:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c66:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c68:	f7fe f98a 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002c6c:	b006      	add	sp, #24
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim->Instance==TIM2)
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c74:	d115      	bne.n	8002ca2 <HAL_TIM_MspPostInit+0x5e>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7a:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c7e:	2501      	movs	r5, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c80:	a901      	add	r1, sp, #4
 8002c82:	481f      	ldr	r0, [pc, #124]	; (8002d00 <HAL_TIM_MspPostInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c84:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c8a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c8c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c8e:	f7fe f977 	bl	8000f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c92:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002c96:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c9e:	9505      	str	r5, [sp, #20]
 8002ca0:	e00a      	b.n	8002cb8 <HAL_TIM_MspPostInit+0x74>
  else if(htim->Instance==TIM4)
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_TIM_MspPostInit+0xc0>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d10a      	bne.n	8002cbe <HAL_TIM_MspPostInit+0x7a>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ca8:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cac:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002cb6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb8:	a901      	add	r1, sp, #4
 8002cba:	4813      	ldr	r0, [pc, #76]	; (8002d08 <HAL_TIM_MspPostInit+0xc4>)
 8002cbc:	e7d4      	b.n	8002c68 <HAL_TIM_MspPostInit+0x24>
  else if(htim->Instance==TIM5)
 8002cbe:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <HAL_TIM_MspPostInit+0xc8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_MspPostInit+0x90>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cc4:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002cc8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cce:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	9204      	str	r2, [sp, #16]
 8002cd2:	e7c6      	b.n	8002c62 <HAL_TIM_MspPostInit+0x1e>
  else if(htim->Instance==TIM8)
 8002cd4:	4a0e      	ldr	r2, [pc, #56]	; (8002d10 <HAL_TIM_MspPostInit+0xcc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d1c8      	bne.n	8002c6c <HAL_TIM_MspPostInit+0x28>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002cda:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ce0:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	a901      	add	r1, sp, #4
 8002ce4:	4806      	ldr	r0, [pc, #24]	; (8002d00 <HAL_TIM_MspPostInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002ce6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cec:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002cee:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf0:	f7fe f946 	bl	8000f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002cf4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002cf8:	e7cd      	b.n	8002c96 <HAL_TIM_MspPostInit+0x52>
 8002cfa:	bf00      	nop
 8002cfc:	40010000 	.word	0x40010000
 8002d00:	40020000 	.word	0x40020000
 8002d04:	40000800 	.word	0x40000800
 8002d08:	40020400 	.word	0x40020400
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40010400 	.word	0x40010400

08002d14 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d14:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002d16:	6803      	ldr	r3, [r0, #0]
 8002d18:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <HAL_UART_MspInit+0xcc>)
 8002d1a:	4293      	cmp	r3, r2
{
 8002d1c:	b089      	sub	sp, #36	; 0x24
  if(huart->Instance==USART1)
 8002d1e:	d11c      	bne.n	8002d5a <HAL_UART_MspInit+0x46>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <HAL_UART_MspInit+0xd0>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d26:	4830      	ldr	r0, [pc, #192]	; (8002de8 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d2a:	f042 0210 	orr.w	r2, r2, #16
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d4c:	2307      	movs	r3, #7
 8002d4e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d52:	f7fe f915 	bl	8000f80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d56:	b009      	add	sp, #36	; 0x24
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART3)
 8002d5a:	4a24      	ldr	r2, [pc, #144]	; (8002dec <HAL_UART_MspInit+0xd8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d123      	bne.n	8002da8 <HAL_UART_MspInit+0x94>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d60:	2300      	movs	r3, #0
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	4b1f      	ldr	r3, [pc, #124]	; (8002de4 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	4822      	ldr	r0, [pc, #136]	; (8002df0 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d6a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d7c:	2320      	movs	r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d7e:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d80:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d82:	2407      	movs	r4, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d84:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002d86:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d88:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d8a:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d8e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d90:	f7fe f8f6 	bl	8000f80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d9c:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002da0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da2:	a903      	add	r1, sp, #12
 8002da4:	4813      	ldr	r0, [pc, #76]	; (8002df4 <HAL_UART_MspInit+0xe0>)
 8002da6:	e7d4      	b.n	8002d52 <HAL_UART_MspInit+0x3e>
  else if(huart->Instance==USART6)
 8002da8:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <HAL_UART_MspInit+0xe4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d1d3      	bne.n	8002d56 <HAL_UART_MspInit+0x42>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <HAL_UART_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002db4:	480e      	ldr	r0, [pc, #56]	; (8002df0 <HAL_UART_MspInit+0xdc>)
    __HAL_RCC_USART6_CLK_ENABLE();
 8002db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002db8:	f042 0220 	orr.w	r2, r2, #32
 8002dbc:	645a      	str	r2, [r3, #68]	; 0x44
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dc8:	23c0      	movs	r3, #192	; 0xc0
 8002dca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002dd8:	2308      	movs	r3, #8
 8002dda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ddc:	a903      	add	r1, sp, #12
 8002dde:	e7b8      	b.n	8002d52 <HAL_UART_MspInit+0x3e>
 8002de0:	40011000 	.word	0x40011000
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020000 	.word	0x40020000
 8002dec:	40004800 	.word	0x40004800
 8002df0:	40020800 	.word	0x40020800
 8002df4:	40020400 	.word	0x40020400
 8002df8:	40011400 	.word	0x40011400

08002dfc <NMI_Handler>:
 8002dfc:	4770      	bx	lr

08002dfe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002dfe:	e7fe      	b.n	8002dfe <HardFault_Handler>

08002e00 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002e00:	e7fe      	b.n	8002e00 <MemManage_Handler>

08002e02 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002e02:	e7fe      	b.n	8002e02 <BusFault_Handler>

08002e04 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002e04:	e7fe      	b.n	8002e04 <UsageFault_Handler>

08002e06 <SVC_Handler>:
 8002e06:	4770      	bx	lr

08002e08 <DebugMon_Handler>:
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002e0a:	4770      	bx	lr

08002e0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002e0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e0e:	f7fd fbbf 	bl	8000590 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002e16:	f7fe b8ae 	b.w	8000f76 <HAL_SYSTICK_IRQHandler>
	...

08002e1c <CAN1_RX1_IRQHandler>:
void CAN1_RX1_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e1c:	4801      	ldr	r0, [pc, #4]	; (8002e24 <CAN1_RX1_IRQHandler+0x8>)
 8002e1e:	f7fd bf36 	b.w	8000c8e <HAL_CAN_IRQHandler>
 8002e22:	bf00      	nop
 8002e24:	2000046c 	.word	0x2000046c

08002e28 <CAN1_RX0_IRQHandler>:
 8002e28:	f7ff bff8 	b.w	8002e1c <CAN1_RX1_IRQHandler>

08002e2c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e2c:	490f      	ldr	r1, [pc, #60]	; (8002e6c <SystemInit+0x40>)
 8002e2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e32:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <SystemInit+0x44>)
 8002e3c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e3e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002e46:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002e4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e52:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e54:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <SystemInit+0x48>)
 8002e56:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e5e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e60:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e66:	608b      	str	r3, [r1, #8]
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00
 8002e70:	40023800 	.word	0x40023800
 8002e74:	24003010 	.word	0x24003010

08002e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002eb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e7e:	e003      	b.n	8002e88 <LoopCopyDataInit>

08002e80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e86:	3104      	adds	r1, #4

08002e88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e88:	480b      	ldr	r0, [pc, #44]	; (8002eb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e8a:	4b0c      	ldr	r3, [pc, #48]	; (8002ebc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e90:	d3f6      	bcc.n	8002e80 <CopyDataInit>
  ldr  r2, =_sbss
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e94:	e002      	b.n	8002e9c <LoopFillZerobss>

08002e96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e98:	f842 3b04 	str.w	r3, [r2], #4

08002e9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ea0:	d3f9      	bcc.n	8002e96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ea2:	f7ff ffc3 	bl	8002e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ea6:	f000 f811 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eaa:	f7ff fa3f 	bl	800232c <main>
  bx  lr    
 8002eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002eb0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002eb4:	08002f54 	.word	0x08002f54
  ldr  r0, =_sdata
 8002eb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ebc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002ec0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002ec4:	200004c8 	.word	0x200004c8

08002ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec8:	e7fe      	b.n	8002ec8 <ADC_IRQHandler>
	...

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	4e0d      	ldr	r6, [pc, #52]	; (8002f04 <__libc_init_array+0x38>)
 8002ed0:	4c0d      	ldr	r4, [pc, #52]	; (8002f08 <__libc_init_array+0x3c>)
 8002ed2:	1ba4      	subs	r4, r4, r6
 8002ed4:	10a4      	asrs	r4, r4, #2
 8002ed6:	2500      	movs	r5, #0
 8002ed8:	42a5      	cmp	r5, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	4e0b      	ldr	r6, [pc, #44]	; (8002f0c <__libc_init_array+0x40>)
 8002ede:	4c0c      	ldr	r4, [pc, #48]	; (8002f10 <__libc_init_array+0x44>)
 8002ee0:	f000 f818 	bl	8002f14 <_init>
 8002ee4:	1ba4      	subs	r4, r4, r6
 8002ee6:	10a4      	asrs	r4, r4, #2
 8002ee8:	2500      	movs	r5, #0
 8002eea:	42a5      	cmp	r5, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ef4:	4798      	blx	r3
 8002ef6:	3501      	adds	r5, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002efe:	4798      	blx	r3
 8002f00:	3501      	adds	r5, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08002f4c 	.word	0x08002f4c
 8002f08:	08002f4c 	.word	0x08002f4c
 8002f0c:	08002f4c 	.word	0x08002f4c
 8002f10:	08002f50 	.word	0x08002f50

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
